
week12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a8  0800b480  0800b480  0001b480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be28  0800be28  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800be28  0800be28  0001be28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be30  0800be30  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be30  0800be30  0001be30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be34  0800be34  0001be34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800be38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200001f8  0800c030  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000870  0800c030  00020870  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012505  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002649  00000000  00000000  0003272d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00034d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00035e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001903f  00000000  00000000  00036db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ba5  00000000  00000000  0004fdef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d8aa  00000000  00000000  00061994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff23e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a04  00000000  00000000  000ff294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b464 	.word	0x0800b464

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800b464 	.word	0x0800b464

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f98:	f002 fbb8 	bl	800370c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f001 fdb8 	bl	8002b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f001 ff62 	bl	8002e68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa4:	f001 ff40 	bl	8002e28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fa8:	f001 ff14 	bl	8002dd4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fac:	f001 fe18 	bl	8002be0 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000fb0:	f001 fe68 	bl	8002c84 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000fb4:	f001 fe9e 	bl	8002cf4 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000fb8:	f001 fee8 	bl	8002d8c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000fbc:	48aa      	ldr	r0, [pc, #680]	; (8001268 <main+0x2d8>)
 8000fbe:	f005 f89f 	bl	8006100 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000fc2:	48aa      	ldr	r0, [pc, #680]	; (800126c <main+0x2dc>)
 8000fc4:	f005 f8f6 	bl	80061b4 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	49a9      	ldr	r1, [pc, #676]	; (8001270 <main+0x2e0>)
 8000fcc:	48a9      	ldr	r0, [pc, #676]	; (8001274 <main+0x2e4>)
 8000fce:	f002 fd93 	bl	8003af8 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd8:	48a7      	ldr	r0, [pc, #668]	; (8001278 <main+0x2e8>)
 8000fda:	f004 f80f 	bl	8004ffc <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */

	while (1)
	{
		/*Method 2 Interrupt Mode*/
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 64);
 8000fde:	2240      	movs	r2, #64	; 0x40
 8000fe0:	49a6      	ldr	r1, [pc, #664]	; (800127c <main+0x2ec>)
 8000fe2:	48a7      	ldr	r0, [pc, #668]	; (8001280 <main+0x2f0>)
 8000fe4:	f005 fdb7 	bl	8006b56 <HAL_UART_Receive_IT>

		/*Method 2 W/ 1 Char Received*/
		int16_t inputchar = UARTRecieveIT();
 8000fe8:	f002 f852 	bl	8003090 <UARTRecieveIT>
 8000fec:	4603      	mov	r3, r0
 8000fee:	80fb      	strh	r3, [r7, #6]
		if(inputchar!=-1)
 8000ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d011      	beq.n	800101e <main+0x8e>
		{
			//Display Input
			sprintf(TxDataBuffer, "%c\r\n", inputchar);
 8000ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffe:	461a      	mov	r2, r3
 8001000:	49a0      	ldr	r1, [pc, #640]	; (8001284 <main+0x2f4>)
 8001002:	48a1      	ldr	r0, [pc, #644]	; (8001288 <main+0x2f8>)
 8001004:	f006 ffcc 	bl	8007fa0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001008:	489f      	ldr	r0, [pc, #636]	; (8001288 <main+0x2f8>)
 800100a:	f7ff f8e9 	bl	80001e0 <strlen>
 800100e:	4603      	mov	r3, r0
 8001010:	b29a      	uxth	r2, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	499c      	ldr	r1, [pc, #624]	; (8001288 <main+0x2f8>)
 8001018:	4899      	ldr	r0, [pc, #612]	; (8001280 <main+0x2f0>)
 800101a:	f005 fd0a 	bl	8006a32 <HAL_UART_Transmit>
		}
//..............................................................Calculate Menu...........................................................................

		static uint64_t timestamp = 0;
		if (micros() - timestamp > 10000){
 800101e:	f002 f81d 	bl	800305c <micros>
 8001022:	4b9a      	ldr	r3, [pc, #616]	; (800128c <main+0x2fc>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	1a84      	subs	r4, r0, r2
 800102a:	eb61 0503 	sbc.w	r5, r1, r3
 800102e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	42ab      	cmp	r3, r5
 8001038:	bf08      	it	eq
 800103a:	42a2      	cmpeq	r2, r4
 800103c:	f080 828a 	bcs.w	8001554 <main+0x5c4>
			timestamp = micros();
 8001040:	f002 f80c 	bl	800305c <micros>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4990      	ldr	r1, [pc, #576]	; (800128c <main+0x2fc>)
 800104a:	e9c1 2300 	strd	r2, r3, [r1]
			Time +=0.01;
 800104e:	4b90      	ldr	r3, [pc, #576]	; (8001290 <main+0x300>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa80 	bl	8000558 <__aeabi_f2d>
 8001058:	a37f      	add	r3, pc, #508	; (adr r3, 8001258 <main+0x2c8>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff f91d 	bl	800029c <__adddf3>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fdc5 	bl	8000bf8 <__aeabi_d2f>
 800106e:	4603      	mov	r3, r0
 8001070:	4a87      	ldr	r2, [pc, #540]	; (8001290 <main+0x300>)
 8001072:	6013      	str	r3, [r2, #0]


//..............................................................Calculate Sawtooth Wave...........................................................................

			if(Mode == 1 ){
 8001074:	4b87      	ldr	r3, [pc, #540]	; (8001294 <main+0x304>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	f040 811b 	bne.w	80012b4 <main+0x324>
				if(Slope==1){
 800107e:	4b86      	ldr	r3, [pc, #536]	; (8001298 <main+0x308>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d174      	bne.n	8001170 <main+0x1e0>
					if(Time <= (1/Freq_Saw)){
 8001086:	4b85      	ldr	r3, [pc, #532]	; (800129c <main+0x30c>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001094:	4b7e      	ldr	r3, [pc, #504]	; (8001290 <main+0x300>)
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	db60      	blt.n	8001166 <main+0x1d6>
						dataOut = (((VHigh_Saw*(4096.0/3.3))-(VLow_Saw*(4096.0/3.3)))/(1/Freq_Saw))*Time + (VLow_Saw*(4096.0/3.3));
 80010a4:	4b7e      	ldr	r3, [pc, #504]	; (80012a0 <main+0x310>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa55 	bl	8000558 <__aeabi_f2d>
 80010ae:	a36c      	add	r3, pc, #432	; (adr r3, 8001260 <main+0x2d0>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff faa8 	bl	8000608 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4690      	mov	r8, r2
 80010be:	4699      	mov	r9, r3
 80010c0:	4b78      	ldr	r3, [pc, #480]	; (80012a4 <main+0x314>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa47 	bl	8000558 <__aeabi_f2d>
 80010ca:	a365      	add	r3, pc, #404	; (adr r3, 8001260 <main+0x2d0>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fa9a 	bl	8000608 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4640      	mov	r0, r8
 80010da:	4649      	mov	r1, r9
 80010dc:	f7ff f8dc 	bl	8000298 <__aeabi_dsub>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4690      	mov	r8, r2
 80010e6:	4699      	mov	r9, r3
 80010e8:	4b6c      	ldr	r3, [pc, #432]	; (800129c <main+0x30c>)
 80010ea:	edd3 7a00 	vldr	s15, [r3]
 80010ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010f6:	ee16 0a90 	vmov	r0, s13
 80010fa:	f7ff fa2d 	bl	8000558 <__aeabi_f2d>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4640      	mov	r0, r8
 8001104:	4649      	mov	r1, r9
 8001106:	f7ff fba9 	bl	800085c <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4690      	mov	r8, r2
 8001110:	4699      	mov	r9, r3
 8001112:	4b5f      	ldr	r3, [pc, #380]	; (8001290 <main+0x300>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa1e 	bl	8000558 <__aeabi_f2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4640      	mov	r0, r8
 8001122:	4649      	mov	r1, r9
 8001124:	f7ff fa70 	bl	8000608 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4690      	mov	r8, r2
 800112e:	4699      	mov	r9, r3
 8001130:	4b5c      	ldr	r3, [pc, #368]	; (80012a4 <main+0x314>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fa0f 	bl	8000558 <__aeabi_f2d>
 800113a:	a349      	add	r3, pc, #292	; (adr r3, 8001260 <main+0x2d0>)
 800113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001140:	f7ff fa62 	bl	8000608 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4640      	mov	r0, r8
 800114a:	4649      	mov	r1, r9
 800114c:	f7ff f8a6 	bl	800029c <__adddf3>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fd2e 	bl	8000bb8 <__aeabi_d2uiz>
 800115c:	4603      	mov	r3, r0
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <main+0x318>)
 8001162:	801a      	strh	r2, [r3, #0]
 8001164:	e0a6      	b.n	80012b4 <main+0x324>
					}
					else{
						Time = 0.0;
 8001166:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <main+0x300>)
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e0a1      	b.n	80012b4 <main+0x324>
					}
				}
				else{
					if(Time <= (1/Freq_Saw)){
 8001170:	4b4a      	ldr	r3, [pc, #296]	; (800129c <main+0x30c>)
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800117a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800117e:	4b44      	ldr	r3, [pc, #272]	; (8001290 <main+0x300>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	f2c0 808e 	blt.w	80012ac <main+0x31c>
						dataOut = (((VLow_Saw*(4096.0/3.3))-(VHigh_Saw*(4096.0/3.3)))/(1/Freq_Saw))*Time + (VHigh_Saw*(4096.0/3.3));
 8001190:	4b44      	ldr	r3, [pc, #272]	; (80012a4 <main+0x314>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f9df 	bl	8000558 <__aeabi_f2d>
 800119a:	a331      	add	r3, pc, #196	; (adr r3, 8001260 <main+0x2d0>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fa32 	bl	8000608 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4690      	mov	r8, r2
 80011aa:	4699      	mov	r9, r3
 80011ac:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <main+0x310>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9d1 	bl	8000558 <__aeabi_f2d>
 80011b6:	a32a      	add	r3, pc, #168	; (adr r3, 8001260 <main+0x2d0>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff fa24 	bl	8000608 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4640      	mov	r0, r8
 80011c6:	4649      	mov	r1, r9
 80011c8:	f7ff f866 	bl	8000298 <__aeabi_dsub>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4690      	mov	r8, r2
 80011d2:	4699      	mov	r9, r3
 80011d4:	4b31      	ldr	r3, [pc, #196]	; (800129c <main+0x30c>)
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011e2:	ee16 0a90 	vmov	r0, s13
 80011e6:	f7ff f9b7 	bl	8000558 <__aeabi_f2d>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4640      	mov	r0, r8
 80011f0:	4649      	mov	r1, r9
 80011f2:	f7ff fb33 	bl	800085c <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4690      	mov	r8, r2
 80011fc:	4699      	mov	r9, r3
 80011fe:	4b24      	ldr	r3, [pc, #144]	; (8001290 <main+0x300>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f9a8 	bl	8000558 <__aeabi_f2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4640      	mov	r0, r8
 800120e:	4649      	mov	r1, r9
 8001210:	f7ff f9fa 	bl	8000608 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4690      	mov	r8, r2
 800121a:	4699      	mov	r9, r3
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <main+0x310>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f999 	bl	8000558 <__aeabi_f2d>
 8001226:	a30e      	add	r3, pc, #56	; (adr r3, 8001260 <main+0x2d0>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f9ec 	bl	8000608 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4640      	mov	r0, r8
 8001236:	4649      	mov	r1, r9
 8001238:	f7ff f830 	bl	800029c <__adddf3>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fcb8 	bl	8000bb8 <__aeabi_d2uiz>
 8001248:	4603      	mov	r3, r0
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <main+0x318>)
 800124e:	801a      	strh	r2, [r3, #0]
 8001250:	e030      	b.n	80012b4 <main+0x324>
 8001252:	bf00      	nop
 8001254:	f3af 8000 	nop.w
 8001258:	47ae147b 	.word	0x47ae147b
 800125c:	3f847ae1 	.word	0x3f847ae1
 8001260:	364d9365 	.word	0x364d9365
 8001264:	409364d9 	.word	0x409364d9
 8001268:	20000688 	.word	0x20000688
 800126c:	20000770 	.word	0x20000770
 8001270:	20000216 	.word	0x20000216
 8001274:	20000728 	.word	0x20000728
 8001278:	40020000 	.word	0x40020000
 800127c:	20000268 	.word	0x20000268
 8001280:	20000818 	.word	0x20000818
 8001284:	0800b480 	.word	0x0800b480
 8001288:	20000248 	.word	0x20000248
 800128c:	20000670 	.word	0x20000670
 8001290:	20000234 	.word	0x20000234
 8001294:	20000214 	.word	0x20000214
 8001298:	20000002 	.word	0x20000002
 800129c:	20000004 	.word	0x20000004
 80012a0:	20000018 	.word	0x20000018
 80012a4:	20000230 	.word	0x20000230
 80012a8:	20000218 	.word	0x20000218
					}
					else{
						Time = 0.0;
 80012ac:	4bb4      	ldr	r3, [pc, #720]	; (8001580 <main+0x5f0>)
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
				}
			}

//..............................................................Calculate Sine Wave...........................................................................

			if(Mode == 2)
 80012b4:	4bb3      	ldr	r3, [pc, #716]	; (8001584 <main+0x5f4>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	f040 80be 	bne.w	800143a <main+0x4aa>
			{
				Rad += 0.01;
 80012be:	4bb2      	ldr	r3, [pc, #712]	; (8001588 <main+0x5f8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f948 	bl	8000558 <__aeabi_f2d>
 80012c8:	a3a7      	add	r3, pc, #668	; (adr r3, 8001568 <main+0x5d8>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7fe ffe5 	bl	800029c <__adddf3>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fc8d 	bl	8000bf8 <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	4aa9      	ldr	r2, [pc, #676]	; (8001588 <main+0x5f8>)
 80012e2:	6013      	str	r3, [r2, #0]
				Amp =((VHigh_Sin*(4096.0/3.3))-(VLow_Sin*(4096.0/3.3)))/2;
 80012e4:	4ba9      	ldr	r3, [pc, #676]	; (800158c <main+0x5fc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f935 	bl	8000558 <__aeabi_f2d>
 80012ee:	a3a0      	add	r3, pc, #640	; (adr r3, 8001570 <main+0x5e0>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff f988 	bl	8000608 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4690      	mov	r8, r2
 80012fe:	4699      	mov	r9, r3
 8001300:	4ba3      	ldr	r3, [pc, #652]	; (8001590 <main+0x600>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f927 	bl	8000558 <__aeabi_f2d>
 800130a:	a399      	add	r3, pc, #612	; (adr r3, 8001570 <main+0x5e0>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f97a 	bl	8000608 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4640      	mov	r0, r8
 800131a:	4649      	mov	r1, r9
 800131c:	f7fe ffbc 	bl	8000298 <__aeabi_dsub>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001330:	f7ff fa94 	bl	800085c <__aeabi_ddiv>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fc5c 	bl	8000bf8 <__aeabi_d2f>
 8001340:	4603      	mov	r3, r0
 8001342:	4a94      	ldr	r2, [pc, #592]	; (8001594 <main+0x604>)
 8001344:	6013      	str	r3, [r2, #0]
				Ver_Shift =((VHigh_Sin*(4096.0/3.3))+(VLow_Sin*(4096.0/3.3)))/2;
 8001346:	4b91      	ldr	r3, [pc, #580]	; (800158c <main+0x5fc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f904 	bl	8000558 <__aeabi_f2d>
 8001350:	a387      	add	r3, pc, #540	; (adr r3, 8001570 <main+0x5e0>)
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	f7ff f957 	bl	8000608 <__aeabi_dmul>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4690      	mov	r8, r2
 8001360:	4699      	mov	r9, r3
 8001362:	4b8b      	ldr	r3, [pc, #556]	; (8001590 <main+0x600>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f8f6 	bl	8000558 <__aeabi_f2d>
 800136c:	a380      	add	r3, pc, #512	; (adr r3, 8001570 <main+0x5e0>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff f949 	bl	8000608 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4640      	mov	r0, r8
 800137c:	4649      	mov	r1, r9
 800137e:	f7fe ff8d 	bl	800029c <__adddf3>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001392:	f7ff fa63 	bl	800085c <__aeabi_ddiv>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fc2b 	bl	8000bf8 <__aeabi_d2f>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a7c      	ldr	r2, [pc, #496]	; (8001598 <main+0x608>)
 80013a6:	6013      	str	r3, [r2, #0]
				dataOut = (Amp)*sin(2*M_PI*Freq_Sin*Rad)+(Ver_Shift);
 80013a8:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <main+0x604>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8d3 	bl	8000558 <__aeabi_f2d>
 80013b2:	4680      	mov	r8, r0
 80013b4:	4689      	mov	r9, r1
 80013b6:	4b79      	ldr	r3, [pc, #484]	; (800159c <main+0x60c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8cc 	bl	8000558 <__aeabi_f2d>
 80013c0:	a36d      	add	r3, pc, #436	; (adr r3, 8001578 <main+0x5e8>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f91f 	bl	8000608 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4692      	mov	sl, r2
 80013d0:	469b      	mov	fp, r3
 80013d2:	4b6d      	ldr	r3, [pc, #436]	; (8001588 <main+0x5f8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8be 	bl	8000558 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4650      	mov	r0, sl
 80013e2:	4659      	mov	r1, fp
 80013e4:	f7ff f910 	bl	8000608 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	ec43 2b17 	vmov	d7, r2, r3
 80013f0:	eeb0 0a47 	vmov.f32	s0, s14
 80013f4:	eef0 0a67 	vmov.f32	s1, s15
 80013f8:	f008 fffe 	bl	800a3f8 <sin>
 80013fc:	ec53 2b10 	vmov	r2, r3, d0
 8001400:	4640      	mov	r0, r8
 8001402:	4649      	mov	r1, r9
 8001404:	f7ff f900 	bl	8000608 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4690      	mov	r8, r2
 800140e:	4699      	mov	r9, r3
 8001410:	4b61      	ldr	r3, [pc, #388]	; (8001598 <main+0x608>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f89f 	bl	8000558 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4640      	mov	r0, r8
 8001420:	4649      	mov	r1, r9
 8001422:	f7fe ff3b 	bl	800029c <__adddf3>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff fbc3 	bl	8000bb8 <__aeabi_d2uiz>
 8001432:	4603      	mov	r3, r0
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <main+0x610>)
 8001438:	801a      	strh	r2, [r3, #0]
			}

//..............................................................Calculate Square Wave...........................................................................

			if(Mode == 3){
 800143a:	4b52      	ldr	r3, [pc, #328]	; (8001584 <main+0x5f4>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d172      	bne.n	8001528 <main+0x598>
				Period_High = Duty_C/(Freq_Square*100.0);
 8001442:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <main+0x614>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f874 	bl	8000534 <__aeabi_i2d>
 800144c:	4680      	mov	r8, r0
 800144e:	4689      	mov	r9, r1
 8001450:	4b55      	ldr	r3, [pc, #340]	; (80015a8 <main+0x618>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f87f 	bl	8000558 <__aeabi_f2d>
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b53      	ldr	r3, [pc, #332]	; (80015ac <main+0x61c>)
 8001460:	f7ff f8d2 	bl	8000608 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4640      	mov	r0, r8
 800146a:	4649      	mov	r1, r9
 800146c:	f7ff f9f6 	bl	800085c <__aeabi_ddiv>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fbbe 	bl	8000bf8 <__aeabi_d2f>
 800147c:	4603      	mov	r3, r0
 800147e:	4a4c      	ldr	r2, [pc, #304]	; (80015b0 <main+0x620>)
 8001480:	6013      	str	r3, [r2, #0]
				if(Time <= Period_High){
 8001482:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <main+0x5f0>)
 8001484:	ed93 7a00 	vldr	s14, [r3]
 8001488:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <main+0x620>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	d814      	bhi.n	80014c2 <main+0x532>
					dataOut = VHigh_Square*(4096.0/3.3);
 8001498:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <main+0x624>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f85b 	bl	8000558 <__aeabi_f2d>
 80014a2:	a333      	add	r3, pc, #204	; (adr r3, 8001570 <main+0x5e0>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff f8ae 	bl	8000608 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fb80 	bl	8000bb8 <__aeabi_d2uiz>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <main+0x610>)
 80014be:	801a      	strh	r2, [r3, #0]
 80014c0:	e032      	b.n	8001528 <main+0x598>
				}
				else if(Time > Period_High && Time <=(1/Freq_Square)){
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <main+0x5f0>)
 80014c4:	ed93 7a00 	vldr	s14, [r3]
 80014c8:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <main+0x620>)
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	dd23      	ble.n	8001520 <main+0x590>
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <main+0x618>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <main+0x5f0>)
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	db14      	blt.n	8001520 <main+0x590>
					dataOut = VLow_Square*(4096.0/3.3);
 80014f6:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <main+0x628>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f82c 	bl	8000558 <__aeabi_f2d>
 8001500:	a31b      	add	r3, pc, #108	; (adr r3, 8001570 <main+0x5e0>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f87f 	bl	8000608 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fb51 	bl	8000bb8 <__aeabi_d2uiz>
 8001516:	4603      	mov	r3, r0
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <main+0x610>)
 800151c:	801a      	strh	r2, [r3, #0]
 800151e:	e003      	b.n	8001528 <main+0x598>
				}

				else {
					Time =0.0 ;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <main+0x5f0>)
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
				}
			}

			if (hspi3.State == HAL_SPI_STATE_READY && HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin) == GPIO_PIN_SET){
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <main+0x62c>)
 800152a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d10f      	bne.n	8001554 <main+0x5c4>
 8001534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001538:	4821      	ldr	r0, [pc, #132]	; (80015c0 <main+0x630>)
 800153a:	f003 fd47 	bl	8004fcc <HAL_GPIO_ReadPin>
 800153e:	4603      	mov	r3, r0
 8001540:	2b01      	cmp	r3, #1
 8001542:	d107      	bne.n	8001554 <main+0x5c4>
				MCP4922SetOutput(DACConfig, dataOut);
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <main+0x634>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <main+0x610>)
 800154a:	8812      	ldrh	r2, [r2, #0]
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f001 fd2a 	bl	8002fa8 <MCP4922SetOutput>
			}
		}

//..............................................................Main Menu...........................................................................

		switch(State){
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <main+0x638>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b1e      	cmp	r3, #30
 800155a:	f300 80c1 	bgt.w	80016e0 <main+0x750>
 800155e:	2b00      	cmp	r3, #0
 8001560:	dc7a      	bgt.n	8001658 <main+0x6c8>
 8001562:	f001 babb 	b.w	8002adc <main+0x1b4c>
 8001566:	bf00      	nop
 8001568:	47ae147b 	.word	0x47ae147b
 800156c:	3f847ae1 	.word	0x3f847ae1
 8001570:	364d9365 	.word	0x364d9365
 8001574:	409364d9 	.word	0x409364d9
 8001578:	54442d18 	.word	0x54442d18
 800157c:	401921fb 	.word	0x401921fb
 8001580:	20000234 	.word	0x20000234
 8001584:	20000214 	.word	0x20000214
 8001588:	20000238 	.word	0x20000238
 800158c:	20000010 	.word	0x20000010
 8001590:	20000228 	.word	0x20000228
 8001594:	2000023c 	.word	0x2000023c
 8001598:	20000240 	.word	0x20000240
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000218 	.word	0x20000218
 80015a4:	20000003 	.word	0x20000003
 80015a8:	2000000c 	.word	0x2000000c
 80015ac:	40590000 	.word	0x40590000
 80015b0:	20000244 	.word	0x20000244
 80015b4:	20000014 	.word	0x20000014
 80015b8:	2000022c 	.word	0x2000022c
 80015bc:	200006d0 	.word	0x200006d0
 80015c0:	40020400 	.word	0x40020400
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000001 	.word	0x20000001
 80015cc:	3b28      	subs	r3, #40	; 0x28
 80015ce:	2b1e      	cmp	r3, #30
 80015d0:	f63f ad05 	bhi.w	8000fde <main+0x4e>
 80015d4:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <main+0x64c>)
 80015d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015da:	bf00      	nop
 80015dc:	08001df5 	.word	0x08001df5
 80015e0:	08000fdf 	.word	0x08000fdf
 80015e4:	08000fdf 	.word	0x08000fdf
 80015e8:	08000fdf 	.word	0x08000fdf
 80015ec:	08000fdf 	.word	0x08000fdf
 80015f0:	08000fdf 	.word	0x08000fdf
 80015f4:	08000fdf 	.word	0x08000fdf
 80015f8:	08000fdf 	.word	0x08000fdf
 80015fc:	08000fdf 	.word	0x08000fdf
 8001600:	08000fdf 	.word	0x08000fdf
 8001604:	08001e1d 	.word	0x08001e1d
 8001608:	08000fdf 	.word	0x08000fdf
 800160c:	08000fdf 	.word	0x08000fdf
 8001610:	08000fdf 	.word	0x08000fdf
 8001614:	08000fdf 	.word	0x08000fdf
 8001618:	08000fdf 	.word	0x08000fdf
 800161c:	08000fdf 	.word	0x08000fdf
 8001620:	08000fdf 	.word	0x08000fdf
 8001624:	08000fdf 	.word	0x08000fdf
 8001628:	08000fdf 	.word	0x08000fdf
 800162c:	0800241f 	.word	0x0800241f
 8001630:	08000fdf 	.word	0x08000fdf
 8001634:	08000fdf 	.word	0x08000fdf
 8001638:	08000fdf 	.word	0x08000fdf
 800163c:	08000fdf 	.word	0x08000fdf
 8001640:	08000fdf 	.word	0x08000fdf
 8001644:	08000fdf 	.word	0x08000fdf
 8001648:	08000fdf 	.word	0x08000fdf
 800164c:	08000fdf 	.word	0x08000fdf
 8001650:	08000fdf 	.word	0x08000fdf
 8001654:	08002445 	.word	0x08002445
 8001658:	3b01      	subs	r3, #1
 800165a:	2b1d      	cmp	r3, #29
 800165c:	f63f acbf 	bhi.w	8000fde <main+0x4e>
 8001660:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <main+0x6d8>)
 8001662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001666:	bf00      	nop
 8001668:	080016f1 	.word	0x080016f1
 800166c:	08000fdf 	.word	0x08000fdf
 8001670:	08000fdf 	.word	0x08000fdf
 8001674:	08000fdf 	.word	0x08000fdf
 8001678:	08000fdf 	.word	0x08000fdf
 800167c:	08000fdf 	.word	0x08000fdf
 8001680:	08000fdf 	.word	0x08000fdf
 8001684:	08000fdf 	.word	0x08000fdf
 8001688:	08000fdf 	.word	0x08000fdf
 800168c:	08001719 	.word	0x08001719
 8001690:	08000fdf 	.word	0x08000fdf
 8001694:	08000fdf 	.word	0x08000fdf
 8001698:	08000fdf 	.word	0x08000fdf
 800169c:	08000fdf 	.word	0x08000fdf
 80016a0:	08000fdf 	.word	0x08000fdf
 80016a4:	08000fdf 	.word	0x08000fdf
 80016a8:	08000fdf 	.word	0x08000fdf
 80016ac:	08000fdf 	.word	0x08000fdf
 80016b0:	08000fdf 	.word	0x08000fdf
 80016b4:	08001787 	.word	0x08001787
 80016b8:	08000fdf 	.word	0x08000fdf
 80016bc:	08000fdf 	.word	0x08000fdf
 80016c0:	08000fdf 	.word	0x08000fdf
 80016c4:	08000fdf 	.word	0x08000fdf
 80016c8:	08000fdf 	.word	0x08000fdf
 80016cc:	08000fdf 	.word	0x08000fdf
 80016d0:	08000fdf 	.word	0x08000fdf
 80016d4:	08000fdf 	.word	0x08000fdf
 80016d8:	08000fdf 	.word	0x08000fdf
 80016dc:	080017af 	.word	0x080017af
 80016e0:	2b46      	cmp	r3, #70	; 0x46
 80016e2:	f73f ac7c 	bgt.w	8000fde <main+0x4e>
 80016e6:	2b28      	cmp	r3, #40	; 0x28
 80016e8:	f6bf af70 	bge.w	80015cc <main+0x63c>
 80016ec:	f001 b9f6 	b.w	8002adc <main+0x1b4c>
			case Start_Menu:
				sprintf(Menu, "\n\n\n\n\n\nSELECT GENERATOR WAVE\r\n "
 80016f0:	49c1      	ldr	r1, [pc, #772]	; (80019f8 <main+0xa68>)
 80016f2:	48c2      	ldr	r0, [pc, #776]	; (80019fc <main+0xa6c>)
 80016f4:	f006 fc54 	bl	8007fa0 <siprintf>
						"1.Sawtooth	Wave\n\r "
						"2.Sine   	Wave\n\r "
						"3.Square 	Wave\n\r");
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80016f8:	48c0      	ldr	r0, [pc, #768]	; (80019fc <main+0xa6c>)
 80016fa:	f7fe fd71 	bl	80001e0 <strlen>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	49bd      	ldr	r1, [pc, #756]	; (80019fc <main+0xa6c>)
 8001708:	48bd      	ldr	r0, [pc, #756]	; (8001a00 <main+0xa70>)
 800170a:	f005 f992 	bl	8006a32 <HAL_UART_Transmit>
				State = Waitting_Input;
 800170e:	4bbd      	ldr	r3, [pc, #756]	; (8001a04 <main+0xa74>)
 8001710:	220a      	movs	r2, #10
 8001712:	701a      	strb	r2, [r3, #0]
				break;
 8001714:	f001 b9e2 	b.w	8002adc <main+0x1b4c>
			case Waitting_Input:
				switch(inputchar)
 8001718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171c:	2b33      	cmp	r3, #51	; 0x33
 800171e:	d018      	beq.n	8001752 <main+0x7c2>
 8001720:	2b33      	cmp	r3, #51	; 0x33
 8001722:	dc1d      	bgt.n	8001760 <main+0x7d0>
 8001724:	2b32      	cmp	r3, #50	; 0x32
 8001726:	d00d      	beq.n	8001744 <main+0x7b4>
 8001728:	2b32      	cmp	r3, #50	; 0x32
 800172a:	dc19      	bgt.n	8001760 <main+0x7d0>
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d026      	beq.n	8001780 <main+0x7f0>
 8001732:	2b31      	cmp	r3, #49	; 0x31
 8001734:	d114      	bne.n	8001760 <main+0x7d0>
				{
				case -1:  //No Input
					break;
				case '1':
					Mode =1;
 8001736:	4bb4      	ldr	r3, [pc, #720]	; (8001a08 <main+0xa78>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
					State = Menu_1;
 800173c:	4bb1      	ldr	r3, [pc, #708]	; (8001a04 <main+0xa74>)
 800173e:	2214      	movs	r2, #20
 8001740:	701a      	strb	r2, [r3, #0]
					break;
 8001742:	e01e      	b.n	8001782 <main+0x7f2>
				case '2':
					Mode =2;
 8001744:	4bb0      	ldr	r3, [pc, #704]	; (8001a08 <main+0xa78>)
 8001746:	2202      	movs	r2, #2
 8001748:	701a      	strb	r2, [r3, #0]
					State = Menu_2;
 800174a:	4bae      	ldr	r3, [pc, #696]	; (8001a04 <main+0xa74>)
 800174c:	2228      	movs	r2, #40	; 0x28
 800174e:	701a      	strb	r2, [r3, #0]
					break;
 8001750:	e017      	b.n	8001782 <main+0x7f2>
				case '3':
					Mode =3;
 8001752:	4bad      	ldr	r3, [pc, #692]	; (8001a08 <main+0xa78>)
 8001754:	2203      	movs	r2, #3
 8001756:	701a      	strb	r2, [r3, #0]
					State = Menu_3;
 8001758:	4baa      	ldr	r3, [pc, #680]	; (8001a04 <main+0xa74>)
 800175a:	223c      	movs	r2, #60	; 0x3c
 800175c:	701a      	strb	r2, [r3, #0]
					break;
 800175e:	e010      	b.n	8001782 <main+0x7f2>
				default:
					sprintf(Menu, "Error! You can press only 1. 2. or 3.\r\n");
 8001760:	49aa      	ldr	r1, [pc, #680]	; (8001a0c <main+0xa7c>)
 8001762:	48a6      	ldr	r0, [pc, #664]	; (80019fc <main+0xa6c>)
 8001764:	f006 fc1c 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001768:	48a4      	ldr	r0, [pc, #656]	; (80019fc <main+0xa6c>)
 800176a:	f7fe fd39 	bl	80001e0 <strlen>
 800176e:	4603      	mov	r3, r0
 8001770:	b29a      	uxth	r2, r3
 8001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001776:	49a1      	ldr	r1, [pc, #644]	; (80019fc <main+0xa6c>)
 8001778:	48a1      	ldr	r0, [pc, #644]	; (8001a00 <main+0xa70>)
 800177a:	f005 f95a 	bl	8006a32 <HAL_UART_Transmit>
					break;
 800177e:	e000      	b.n	8001782 <main+0x7f2>
					break;
 8001780:	bf00      	nop
				}
				break;
 8001782:	f001 b9ab 	b.w	8002adc <main+0x1b4c>

//..............................................................Generator Sawtooth Wave .............................................................

				case Menu_1:
				sprintf(Menu, 	"\n\nGenerator Sawtooth Wave \r\n"
 8001786:	49a2      	ldr	r1, [pc, #648]	; (8001a10 <main+0xa80>)
 8001788:	489c      	ldr	r0, [pc, #624]	; (80019fc <main+0xa6c>)
 800178a:	f006 fc09 	bl	8007fa0 <siprintf>
						"e.V Low  Up (+0.1V)	r.V Low  Down (-0.1V)\r\n"
						"\n"
						"z.Slope Up		c.Slope down\r\n"
						"p.Print All\r\n"
						"x.Back\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 800178e:	489b      	ldr	r0, [pc, #620]	; (80019fc <main+0xa6c>)
 8001790:	f7fe fd26 	bl	80001e0 <strlen>
 8001794:	4603      	mov	r3, r0
 8001796:	b29a      	uxth	r2, r3
 8001798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179c:	4997      	ldr	r1, [pc, #604]	; (80019fc <main+0xa6c>)
 800179e:	4898      	ldr	r0, [pc, #608]	; (8001a00 <main+0xa70>)
 80017a0:	f005 f947 	bl	8006a32 <HAL_UART_Transmit>
					State = Menu_1_Waitting_Input;
 80017a4:	4b97      	ldr	r3, [pc, #604]	; (8001a04 <main+0xa74>)
 80017a6:	221e      	movs	r2, #30
 80017a8:	701a      	strb	r2, [r3, #0]
					break;
 80017aa:	f001 b997 	b.w	8002adc <main+0x1b4c>

//..............................................................Menu Sawtooth Wave .............................................................

			case Menu_1_Waitting_Input :
				switch(inputchar){
 80017ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b6:	f000 831a 	beq.w	8001dee <main+0xe5e>
 80017ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017be:	f2c0 8306 	blt.w	8001dce <main+0xe3e>
 80017c2:	2b7a      	cmp	r3, #122	; 0x7a
 80017c4:	f300 8303 	bgt.w	8001dce <main+0xe3e>
 80017c8:	2b41      	cmp	r3, #65	; 0x41
 80017ca:	f2c0 8300 	blt.w	8001dce <main+0xe3e>
 80017ce:	3b41      	subs	r3, #65	; 0x41
 80017d0:	2b39      	cmp	r3, #57	; 0x39
 80017d2:	f200 82fc 	bhi.w	8001dce <main+0xe3e>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <main+0x84c>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080019cf 	.word	0x080019cf
 80017e0:	08001dcf 	.word	0x08001dcf
 80017e4:	08001dcf 	.word	0x08001dcf
 80017e8:	08001a81 	.word	0x08001a81
 80017ec:	08001dcf 	.word	0x08001dcf
 80017f0:	08001dcf 	.word	0x08001dcf
 80017f4:	08001dcf 	.word	0x08001dcf
 80017f8:	08001dcf 	.word	0x08001dcf
 80017fc:	08001dcf 	.word	0x08001dcf
 8001800:	08001dcf 	.word	0x08001dcf
 8001804:	08001dcf 	.word	0x08001dcf
 8001808:	08001dcf 	.word	0x08001dcf
 800180c:	08001dcf 	.word	0x08001dcf
 8001810:	08001dcf 	.word	0x08001dcf
 8001814:	08001dcf 	.word	0x08001dcf
 8001818:	08001dcf 	.word	0x08001dcf
 800181c:	08001dcf 	.word	0x08001dcf
 8001820:	08001dcf 	.word	0x08001dcf
 8001824:	08001dcf 	.word	0x08001dcf
 8001828:	08001dcf 	.word	0x08001dcf
 800182c:	08001dcf 	.word	0x08001dcf
 8001830:	08001dcf 	.word	0x08001dcf
 8001834:	08001dcf 	.word	0x08001dcf
 8001838:	08001dcf 	.word	0x08001dcf
 800183c:	08001dcf 	.word	0x08001dcf
 8001840:	08001dcf 	.word	0x08001dcf
 8001844:	08001dcf 	.word	0x08001dcf
 8001848:	08001dcf 	.word	0x08001dcf
 800184c:	08001dcf 	.word	0x08001dcf
 8001850:	08001dcf 	.word	0x08001dcf
 8001854:	08001dcf 	.word	0x08001dcf
 8001858:	08001dcf 	.word	0x08001dcf
 800185c:	08001911 	.word	0x08001911
 8001860:	08001dcf 	.word	0x08001dcf
 8001864:	080018eb 	.word	0x080018eb
 8001868:	0800196f 	.word	0x0800196f
 800186c:	08001c01 	.word	0x08001c01
 8001870:	08001dcf 	.word	0x08001dcf
 8001874:	08001dcf 	.word	0x08001dcf
 8001878:	08001dcf 	.word	0x08001dcf
 800187c:	08001dcf 	.word	0x08001dcf
 8001880:	08001dcf 	.word	0x08001dcf
 8001884:	08001dcf 	.word	0x08001dcf
 8001888:	08001dcf 	.word	0x08001dcf
 800188c:	08001dcf 	.word	0x08001dcf
 8001890:	08001dcf 	.word	0x08001dcf
 8001894:	08001dcf 	.word	0x08001dcf
 8001898:	08001d41 	.word	0x08001d41
 800189c:	08001af9 	.word	0x08001af9
 80018a0:	08001c93 	.word	0x08001c93
 80018a4:	08001dcf 	.word	0x08001dcf
 80018a8:	08001dcf 	.word	0x08001dcf
 80018ac:	08001dcf 	.word	0x08001dcf
 80018b0:	08001dcf 	.word	0x08001dcf
 80018b4:	08001b6f 	.word	0x08001b6f
 80018b8:	08001dc7 	.word	0x08001dc7
 80018bc:	08001dcf 	.word	0x08001dcf
 80018c0:	080018c5 	.word	0x080018c5
				case -1:  //No Input
					break;
				case 'z':
					Slope = 1;
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <main+0xa84>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
					sprintf(Menu, "Slope down\r\n");
 80018ca:	4953      	ldr	r1, [pc, #332]	; (8001a18 <main+0xa88>)
 80018cc:	484b      	ldr	r0, [pc, #300]	; (80019fc <main+0xa6c>)
 80018ce:	f006 fb67 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80018d2:	484a      	ldr	r0, [pc, #296]	; (80019fc <main+0xa6c>)
 80018d4:	f7fe fc84 	bl	80001e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e0:	4946      	ldr	r1, [pc, #280]	; (80019fc <main+0xa6c>)
 80018e2:	4847      	ldr	r0, [pc, #284]	; (8001a00 <main+0xa70>)
 80018e4:	f005 f8a5 	bl	8006a32 <HAL_UART_Transmit>
					break;
 80018e8:	e282      	b.n	8001df0 <main+0xe60>
				case 'c':
					Slope = -1;
 80018ea:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <main+0xa84>)
 80018ec:	22ff      	movs	r2, #255	; 0xff
 80018ee:	701a      	strb	r2, [r3, #0]
					sprintf(Menu, "Slope up\r\n");
 80018f0:	494a      	ldr	r1, [pc, #296]	; (8001a1c <main+0xa8c>)
 80018f2:	4842      	ldr	r0, [pc, #264]	; (80019fc <main+0xa6c>)
 80018f4:	f006 fb54 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80018f8:	4840      	ldr	r0, [pc, #256]	; (80019fc <main+0xa6c>)
 80018fa:	f7fe fc71 	bl	80001e0 <strlen>
 80018fe:	4603      	mov	r3, r0
 8001900:	b29a      	uxth	r2, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	493d      	ldr	r1, [pc, #244]	; (80019fc <main+0xa6c>)
 8001908:	483d      	ldr	r0, [pc, #244]	; (8001a00 <main+0xa70>)
 800190a:	f005 f892 	bl	8006a32 <HAL_UART_Transmit>
					break;
 800190e:	e26f      	b.n	8001df0 <main+0xe60>


				case 'a':
					if(Freq_Saw>9){
 8001910:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <main+0xa90>)
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800191a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	dd03      	ble.n	800192c <main+0x99c>
						Freq_Saw =10 ;
 8001924:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <main+0xa90>)
 8001926:	4a3f      	ldr	r2, [pc, #252]	; (8001a24 <main+0xa94>)
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e009      	b.n	8001940 <main+0x9b0>
					}
					else {
						Freq_Saw+=1;
 800192c:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <main+0xa90>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001936:	ee77 7a87 	vadd.f32	s15, s15, s14
 800193a:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <main+0xa90>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
					}
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Saw);
 8001940:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <main+0xa90>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe07 	bl	8000558 <__aeabi_f2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4936      	ldr	r1, [pc, #216]	; (8001a28 <main+0xa98>)
 8001950:	482a      	ldr	r0, [pc, #168]	; (80019fc <main+0xa6c>)
 8001952:	f006 fb25 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001956:	4829      	ldr	r0, [pc, #164]	; (80019fc <main+0xa6c>)
 8001958:	f7fe fc42 	bl	80001e0 <strlen>
 800195c:	4603      	mov	r3, r0
 800195e:	b29a      	uxth	r2, r3
 8001960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001964:	4925      	ldr	r1, [pc, #148]	; (80019fc <main+0xa6c>)
 8001966:	4826      	ldr	r0, [pc, #152]	; (8001a00 <main+0xa70>)
 8001968:	f005 f863 	bl	8006a32 <HAL_UART_Transmit>
					break;
 800196c:	e240      	b.n	8001df0 <main+0xe60>
				case 'd':
					if(Freq_Saw<1){
 800196e:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <main+0xa90>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001980:	d504      	bpl.n	800198c <main+0x9fc>
						Freq_Saw =0 ;
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <main+0xa90>)
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e009      	b.n	80019a0 <main+0xa10>
					}
					else {
						Freq_Saw-=1;
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <main+0xa90>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <main+0xa90>)
 800199c:	edc3 7a00 	vstr	s15, [r3]
					}
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Saw);
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <main+0xa90>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdd7 	bl	8000558 <__aeabi_f2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	491e      	ldr	r1, [pc, #120]	; (8001a28 <main+0xa98>)
 80019b0:	4812      	ldr	r0, [pc, #72]	; (80019fc <main+0xa6c>)
 80019b2:	f006 faf5 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80019b6:	4811      	ldr	r0, [pc, #68]	; (80019fc <main+0xa6c>)
 80019b8:	f7fe fc12 	bl	80001e0 <strlen>
 80019bc:	4603      	mov	r3, r0
 80019be:	b29a      	uxth	r2, r3
 80019c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c4:	490d      	ldr	r1, [pc, #52]	; (80019fc <main+0xa6c>)
 80019c6:	480e      	ldr	r0, [pc, #56]	; (8001a00 <main+0xa70>)
 80019c8:	f005 f833 	bl	8006a32 <HAL_UART_Transmit>
					break;
 80019cc:	e210      	b.n	8001df0 <main+0xe60>


				case 'A':
					if(Freq_Saw>9.9){
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <main+0xa90>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdc0 	bl	8000558 <__aeabi_f2d>
 80019d8:	a305      	add	r3, pc, #20	; (adr r3, 80019f0 <main+0xa60>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7ff f8a3 	bl	8000b28 <__aeabi_dcmpgt>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d021      	beq.n	8001a2c <main+0xa9c>
						Freq_Saw =10 ;
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <main+0xa90>)
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <main+0xa94>)
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e030      	b.n	8001a52 <main+0xac2>
 80019f0:	cccccccd 	.word	0xcccccccd
 80019f4:	4023cccc 	.word	0x4023cccc
 80019f8:	0800b488 	.word	0x0800b488
 80019fc:	20000288 	.word	0x20000288
 8001a00:	20000818 	.word	0x20000818
 8001a04:	20000001 	.word	0x20000001
 8001a08:	20000214 	.word	0x20000214
 8001a0c:	0800b4dc 	.word	0x0800b4dc
 8001a10:	0800b504 	.word	0x0800b504
 8001a14:	20000002 	.word	0x20000002
 8001a18:	0800b5e8 	.word	0x0800b5e8
 8001a1c:	0800b5f8 	.word	0x0800b5f8
 8001a20:	20000004 	.word	0x20000004
 8001a24:	41200000 	.word	0x41200000
 8001a28:	0800b604 	.word	0x0800b604
					}
					else {
						Freq_Saw+=0.1;
 8001a2c:	4ba6      	ldr	r3, [pc, #664]	; (8001cc8 <main+0xd38>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd91 	bl	8000558 <__aeabi_f2d>
 8001a36:	a3a0      	add	r3, pc, #640	; (adr r3, 8001cb8 <main+0xd28>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	f7fe fc2e 	bl	800029c <__adddf3>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff f8d6 	bl	8000bf8 <__aeabi_d2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a9e      	ldr	r2, [pc, #632]	; (8001cc8 <main+0xd38>)
 8001a50:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Saw);
 8001a52:	4b9d      	ldr	r3, [pc, #628]	; (8001cc8 <main+0xd38>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd7e 	bl	8000558 <__aeabi_f2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	499a      	ldr	r1, [pc, #616]	; (8001ccc <main+0xd3c>)
 8001a62:	489b      	ldr	r0, [pc, #620]	; (8001cd0 <main+0xd40>)
 8001a64:	f006 fa9c 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001a68:	4899      	ldr	r0, [pc, #612]	; (8001cd0 <main+0xd40>)
 8001a6a:	f7fe fbb9 	bl	80001e0 <strlen>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a76:	4996      	ldr	r1, [pc, #600]	; (8001cd0 <main+0xd40>)
 8001a78:	4896      	ldr	r0, [pc, #600]	; (8001cd4 <main+0xd44>)
 8001a7a:	f004 ffda 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8001a7e:	e1b7      	b.n	8001df0 <main+0xe60>
				case 'D':
					if(Freq_Saw<0.1){
 8001a80:	4b91      	ldr	r3, [pc, #580]	; (8001cc8 <main+0xd38>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd67 	bl	8000558 <__aeabi_f2d>
 8001a8a:	a38b      	add	r3, pc, #556	; (adr r3, 8001cb8 <main+0xd28>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7ff f82c 	bl	8000aec <__aeabi_dcmplt>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <main+0xb14>
						Freq_Saw =0 ;
 8001a9a:	4b8b      	ldr	r3, [pc, #556]	; (8001cc8 <main+0xd38>)
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e012      	b.n	8001aca <main+0xb3a>
					}
					else {
						Freq_Saw-=0.1;
 8001aa4:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <main+0xd38>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd55 	bl	8000558 <__aeabi_f2d>
 8001aae:	a382      	add	r3, pc, #520	; (adr r3, 8001cb8 <main+0xd28>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fbf0 	bl	8000298 <__aeabi_dsub>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff f89a 	bl	8000bf8 <__aeabi_d2f>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a80      	ldr	r2, [pc, #512]	; (8001cc8 <main+0xd38>)
 8001ac8:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Saw);
 8001aca:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <main+0xd38>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd42 	bl	8000558 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	497c      	ldr	r1, [pc, #496]	; (8001ccc <main+0xd3c>)
 8001ada:	487d      	ldr	r0, [pc, #500]	; (8001cd0 <main+0xd40>)
 8001adc:	f006 fa60 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001ae0:	487b      	ldr	r0, [pc, #492]	; (8001cd0 <main+0xd40>)
 8001ae2:	f7fe fb7d 	bl	80001e0 <strlen>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aee:	4978      	ldr	r1, [pc, #480]	; (8001cd0 <main+0xd40>)
 8001af0:	4878      	ldr	r0, [pc, #480]	; (8001cd4 <main+0xd44>)
 8001af2:	f004 ff9e 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8001af6:	e17b      	b.n	8001df0 <main+0xe60>



				case 'q':
					if (VHigh_Saw>3.2){
 8001af8:	4b77      	ldr	r3, [pc, #476]	; (8001cd8 <main+0xd48>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fd2b 	bl	8000558 <__aeabi_f2d>
 8001b02:	a36f      	add	r3, pc, #444	; (adr r3, 8001cc0 <main+0xd30>)
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	f7ff f80e 	bl	8000b28 <__aeabi_dcmpgt>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <main+0xb8a>
						VHigh_Saw=3.3;
 8001b12:	4b71      	ldr	r3, [pc, #452]	; (8001cd8 <main+0xd48>)
 8001b14:	4a71      	ldr	r2, [pc, #452]	; (8001cdc <main+0xd4c>)
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	e012      	b.n	8001b40 <main+0xbb0>
					}
					else{
						VHigh_Saw +=0.1;
 8001b1a:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <main+0xd48>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd1a 	bl	8000558 <__aeabi_f2d>
 8001b24:	a364      	add	r3, pc, #400	; (adr r3, 8001cb8 <main+0xd28>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fbb7 	bl	800029c <__adddf3>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7ff f85f 	bl	8000bf8 <__aeabi_d2f>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4a66      	ldr	r2, [pc, #408]	; (8001cd8 <main+0xd48>)
 8001b3e:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "V High :%.1f\r\n",VHigh_Saw);
 8001b40:	4b65      	ldr	r3, [pc, #404]	; (8001cd8 <main+0xd48>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fd07 	bl	8000558 <__aeabi_f2d>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4964      	ldr	r1, [pc, #400]	; (8001ce0 <main+0xd50>)
 8001b50:	485f      	ldr	r0, [pc, #380]	; (8001cd0 <main+0xd40>)
 8001b52:	f006 fa25 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001b56:	485e      	ldr	r0, [pc, #376]	; (8001cd0 <main+0xd40>)
 8001b58:	f7fe fb42 	bl	80001e0 <strlen>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b64:	495a      	ldr	r1, [pc, #360]	; (8001cd0 <main+0xd40>)
 8001b66:	485b      	ldr	r0, [pc, #364]	; (8001cd4 <main+0xd44>)
 8001b68:	f004 ff63 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8001b6c:	e140      	b.n	8001df0 <main+0xe60>
				case 'w':
					if (VHigh_Saw<VLow_Saw+0.1){
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <main+0xd48>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fcf0 	bl	8000558 <__aeabi_f2d>
 8001b78:	4680      	mov	r8, r0
 8001b7a:	4689      	mov	r9, r1
 8001b7c:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <main+0xd54>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fce9 	bl	8000558 <__aeabi_f2d>
 8001b86:	a34c      	add	r3, pc, #304	; (adr r3, 8001cb8 <main+0xd28>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	f7fe fb86 	bl	800029c <__adddf3>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4640      	mov	r0, r8
 8001b96:	4649      	mov	r1, r9
 8001b98:	f7fe ffa8 	bl	8000aec <__aeabi_dcmplt>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <main+0xc1c>
						VHigh_Saw=VLow_Saw;
 8001ba2:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <main+0xd54>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a4c      	ldr	r2, [pc, #304]	; (8001cd8 <main+0xd48>)
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e012      	b.n	8001bd2 <main+0xc42>
					}
					else{
						VHigh_Saw -=0.1;
 8001bac:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <main+0xd48>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fcd1 	bl	8000558 <__aeabi_f2d>
 8001bb6:	a340      	add	r3, pc, #256	; (adr r3, 8001cb8 <main+0xd28>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fb6c 	bl	8000298 <__aeabi_dsub>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7ff f816 	bl	8000bf8 <__aeabi_d2f>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4a42      	ldr	r2, [pc, #264]	; (8001cd8 <main+0xd48>)
 8001bd0:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "V High :%.1f\r\n",VHigh_Saw);
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <main+0xd48>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fcbe 	bl	8000558 <__aeabi_f2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	493f      	ldr	r1, [pc, #252]	; (8001ce0 <main+0xd50>)
 8001be2:	483b      	ldr	r0, [pc, #236]	; (8001cd0 <main+0xd40>)
 8001be4:	f006 f9dc 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001be8:	4839      	ldr	r0, [pc, #228]	; (8001cd0 <main+0xd40>)
 8001bea:	f7fe faf9 	bl	80001e0 <strlen>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf6:	4936      	ldr	r1, [pc, #216]	; (8001cd0 <main+0xd40>)
 8001bf8:	4836      	ldr	r0, [pc, #216]	; (8001cd4 <main+0xd44>)
 8001bfa:	f004 ff1a 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8001bfe:	e0f7      	b.n	8001df0 <main+0xe60>


				case 'e':
					if (VLow_Saw>VHigh_Saw-0.1){
 8001c00:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <main+0xd54>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fca7 	bl	8000558 <__aeabi_f2d>
 8001c0a:	4680      	mov	r8, r0
 8001c0c:	4689      	mov	r9, r1
 8001c0e:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <main+0xd48>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fca0 	bl	8000558 <__aeabi_f2d>
 8001c18:	a327      	add	r3, pc, #156	; (adr r3, 8001cb8 <main+0xd28>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fb3b 	bl	8000298 <__aeabi_dsub>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4640      	mov	r0, r8
 8001c28:	4649      	mov	r1, r9
 8001c2a:	f7fe ff7d 	bl	8000b28 <__aeabi_dcmpgt>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d004      	beq.n	8001c3e <main+0xcae>
						VLow_Saw=VHigh_Saw;
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <main+0xd48>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2a      	ldr	r2, [pc, #168]	; (8001ce4 <main+0xd54>)
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e012      	b.n	8001c64 <main+0xcd4>
					}
					else{
						VLow_Saw +=0.1;
 8001c3e:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <main+0xd54>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc88 	bl	8000558 <__aeabi_f2d>
 8001c48:	a31b      	add	r3, pc, #108	; (adr r3, 8001cb8 <main+0xd28>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fb25 	bl	800029c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ffcd 	bl	8000bf8 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <main+0xd54>)
 8001c62:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "V Low :%.1f\r\n",VLow_Saw);
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <main+0xd54>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc75 	bl	8000558 <__aeabi_f2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	491d      	ldr	r1, [pc, #116]	; (8001ce8 <main+0xd58>)
 8001c74:	4816      	ldr	r0, [pc, #88]	; (8001cd0 <main+0xd40>)
 8001c76:	f006 f993 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001c7a:	4815      	ldr	r0, [pc, #84]	; (8001cd0 <main+0xd40>)
 8001c7c:	f7fe fab0 	bl	80001e0 <strlen>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c88:	4911      	ldr	r1, [pc, #68]	; (8001cd0 <main+0xd40>)
 8001c8a:	4812      	ldr	r0, [pc, #72]	; (8001cd4 <main+0xd44>)
 8001c8c:	f004 fed1 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8001c90:	e0ae      	b.n	8001df0 <main+0xe60>
				case 'r':
					if (VLow_Saw<0.1){
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <main+0xd54>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fc5e 	bl	8000558 <__aeabi_f2d>
 8001c9c:	a306      	add	r3, pc, #24	; (adr r3, 8001cb8 <main+0xd28>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	f7fe ff23 	bl	8000aec <__aeabi_dcmplt>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01f      	beq.n	8001cec <main+0xd5c>
						VLow_Saw=0;
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <main+0xd54>)
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e02d      	b.n	8001d12 <main+0xd82>
 8001cb6:	bf00      	nop
 8001cb8:	9999999a 	.word	0x9999999a
 8001cbc:	3fb99999 	.word	0x3fb99999
 8001cc0:	9999999a 	.word	0x9999999a
 8001cc4:	40099999 	.word	0x40099999
 8001cc8:	20000004 	.word	0x20000004
 8001ccc:	0800b604 	.word	0x0800b604
 8001cd0:	20000288 	.word	0x20000288
 8001cd4:	20000818 	.word	0x20000818
 8001cd8:	20000018 	.word	0x20000018
 8001cdc:	40533333 	.word	0x40533333
 8001ce0:	0800b628 	.word	0x0800b628
 8001ce4:	20000230 	.word	0x20000230
 8001ce8:	0800b638 	.word	0x0800b638
					}
					else{
						VLow_Saw -=0.1;
 8001cec:	4bc2      	ldr	r3, [pc, #776]	; (8001ff8 <main+0x1068>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc31 	bl	8000558 <__aeabi_f2d>
 8001cf6:	a3be      	add	r3, pc, #760	; (adr r3, 8001ff0 <main+0x1060>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe facc 	bl	8000298 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe ff76 	bl	8000bf8 <__aeabi_d2f>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4aba      	ldr	r2, [pc, #744]	; (8001ff8 <main+0x1068>)
 8001d10:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "V Low :%.1f\r\n",VLow_Saw);
 8001d12:	4bb9      	ldr	r3, [pc, #740]	; (8001ff8 <main+0x1068>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc1e 	bl	8000558 <__aeabi_f2d>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	49b6      	ldr	r1, [pc, #728]	; (8001ffc <main+0x106c>)
 8001d22:	48b7      	ldr	r0, [pc, #732]	; (8002000 <main+0x1070>)
 8001d24:	f006 f93c 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001d28:	48b5      	ldr	r0, [pc, #724]	; (8002000 <main+0x1070>)
 8001d2a:	f7fe fa59 	bl	80001e0 <strlen>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d36:	49b2      	ldr	r1, [pc, #712]	; (8002000 <main+0x1070>)
 8001d38:	48b2      	ldr	r0, [pc, #712]	; (8002004 <main+0x1074>)
 8001d3a:	f004 fe7a 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8001d3e:	e057      	b.n	8001df0 <main+0xe60>



				case 'p':
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Saw);
 8001d40:	4bb1      	ldr	r3, [pc, #708]	; (8002008 <main+0x1078>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fc07 	bl	8000558 <__aeabi_f2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	49af      	ldr	r1, [pc, #700]	; (800200c <main+0x107c>)
 8001d50:	48ab      	ldr	r0, [pc, #684]	; (8002000 <main+0x1070>)
 8001d52:	f006 f925 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001d56:	48aa      	ldr	r0, [pc, #680]	; (8002000 <main+0x1070>)
 8001d58:	f7fe fa42 	bl	80001e0 <strlen>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d64:	49a6      	ldr	r1, [pc, #664]	; (8002000 <main+0x1070>)
 8001d66:	48a7      	ldr	r0, [pc, #668]	; (8002004 <main+0x1074>)
 8001d68:	f004 fe63 	bl	8006a32 <HAL_UART_Transmit>
					sprintf(Menu, "V High :%.1f\r\n",VHigh_Saw);
 8001d6c:	4ba8      	ldr	r3, [pc, #672]	; (8002010 <main+0x1080>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbf1 	bl	8000558 <__aeabi_f2d>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	49a6      	ldr	r1, [pc, #664]	; (8002014 <main+0x1084>)
 8001d7c:	48a0      	ldr	r0, [pc, #640]	; (8002000 <main+0x1070>)
 8001d7e:	f006 f90f 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001d82:	489f      	ldr	r0, [pc, #636]	; (8002000 <main+0x1070>)
 8001d84:	f7fe fa2c 	bl	80001e0 <strlen>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d90:	499b      	ldr	r1, [pc, #620]	; (8002000 <main+0x1070>)
 8001d92:	489c      	ldr	r0, [pc, #624]	; (8002004 <main+0x1074>)
 8001d94:	f004 fe4d 	bl	8006a32 <HAL_UART_Transmit>
					sprintf(Menu, "V Low :%.1f\r\n",VLow_Saw);
 8001d98:	4b97      	ldr	r3, [pc, #604]	; (8001ff8 <main+0x1068>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbdb 	bl	8000558 <__aeabi_f2d>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4995      	ldr	r1, [pc, #596]	; (8001ffc <main+0x106c>)
 8001da8:	4895      	ldr	r0, [pc, #596]	; (8002000 <main+0x1070>)
 8001daa:	f006 f8f9 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001dae:	4894      	ldr	r0, [pc, #592]	; (8002000 <main+0x1070>)
 8001db0:	f7fe fa16 	bl	80001e0 <strlen>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbc:	4990      	ldr	r1, [pc, #576]	; (8002000 <main+0x1070>)
 8001dbe:	4891      	ldr	r0, [pc, #580]	; (8002004 <main+0x1074>)
 8001dc0:	f004 fe37 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8001dc4:	e014      	b.n	8001df0 <main+0xe60>
				case 'x':
					State = Start_Menu;
 8001dc6:	4b94      	ldr	r3, [pc, #592]	; (8002018 <main+0x1088>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
					break;
 8001dcc:	e010      	b.n	8001df0 <main+0xe60>
				default:
					sprintf(Menu, "Error!\r\n");
 8001dce:	4993      	ldr	r1, [pc, #588]	; (800201c <main+0x108c>)
 8001dd0:	488b      	ldr	r0, [pc, #556]	; (8002000 <main+0x1070>)
 8001dd2:	f006 f8e5 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001dd6:	488a      	ldr	r0, [pc, #552]	; (8002000 <main+0x1070>)
 8001dd8:	f7fe fa02 	bl	80001e0 <strlen>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de4:	4986      	ldr	r1, [pc, #536]	; (8002000 <main+0x1070>)
 8001de6:	4887      	ldr	r0, [pc, #540]	; (8002004 <main+0x1074>)
 8001de8:	f004 fe23 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8001dec:	e000      	b.n	8001df0 <main+0xe60>
					break;
 8001dee:	bf00      	nop
					}
				break;
 8001df0:	f000 be74 	b.w	8002adc <main+0x1b4c>

//..............................................................Generator Sine Wave .............................................................

			case Menu_2:
				sprintf(Menu, 	"\n\nGenerator Sine Wave \r\n"
 8001df4:	498a      	ldr	r1, [pc, #552]	; (8002020 <main+0x1090>)
 8001df6:	4882      	ldr	r0, [pc, #520]	; (8002000 <main+0x1070>)
 8001df8:	f006 f8d2 	bl	8007fa0 <siprintf>
						"q.V High Up (+0.1V)	w.V High Down (-0.1V)\r\n"
						"e.V Low  Up (+0.1V)	r.V Low  Down (-0.1V)\r\n"
						"\n"
						"p.Print All\r\n"
						"x.Back\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001dfc:	4880      	ldr	r0, [pc, #512]	; (8002000 <main+0x1070>)
 8001dfe:	f7fe f9ef 	bl	80001e0 <strlen>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0a:	497d      	ldr	r1, [pc, #500]	; (8002000 <main+0x1070>)
 8001e0c:	487d      	ldr	r0, [pc, #500]	; (8002004 <main+0x1074>)
 8001e0e:	f004 fe10 	bl	8006a32 <HAL_UART_Transmit>
					State = Menu_2_Waitting_Input;
 8001e12:	4b81      	ldr	r3, [pc, #516]	; (8002018 <main+0x1088>)
 8001e14:	2232      	movs	r2, #50	; 0x32
 8001e16:	701a      	strb	r2, [r3, #0]
					break;
 8001e18:	f000 be60 	b.w	8002adc <main+0x1b4c>

//..............................................................Menu Sine Wave .............................................................

			case Menu_2_Waitting_Input :		//Sine Wave
				switch(inputchar){
 8001e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	f000 82f9 	beq.w	800241a <main+0x148a>
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	f2c0 82e5 	blt.w	80023fa <main+0x146a>
 8001e30:	2b78      	cmp	r3, #120	; 0x78
 8001e32:	f300 82e2 	bgt.w	80023fa <main+0x146a>
 8001e36:	2b41      	cmp	r3, #65	; 0x41
 8001e38:	f2c0 82df 	blt.w	80023fa <main+0x146a>
 8001e3c:	3b41      	subs	r3, #65	; 0x41
 8001e3e:	2b37      	cmp	r3, #55	; 0x37
 8001e40:	f200 82db 	bhi.w	80023fa <main+0x146a>
 8001e44:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <main+0xebc>)
 8001e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4a:	bf00      	nop
 8001e4c:	0800202d 	.word	0x0800202d
 8001e50:	080023fb 	.word	0x080023fb
 8001e54:	080023fb 	.word	0x080023fb
 8001e58:	080020a3 	.word	0x080020a3
 8001e5c:	080023fb 	.word	0x080023fb
 8001e60:	080023fb 	.word	0x080023fb
 8001e64:	080023fb 	.word	0x080023fb
 8001e68:	080023fb 	.word	0x080023fb
 8001e6c:	080023fb 	.word	0x080023fb
 8001e70:	080023fb 	.word	0x080023fb
 8001e74:	080023fb 	.word	0x080023fb
 8001e78:	080023fb 	.word	0x080023fb
 8001e7c:	080023fb 	.word	0x080023fb
 8001e80:	080023fb 	.word	0x080023fb
 8001e84:	080023fb 	.word	0x080023fb
 8001e88:	080023fb 	.word	0x080023fb
 8001e8c:	080023fb 	.word	0x080023fb
 8001e90:	080023fb 	.word	0x080023fb
 8001e94:	080023fb 	.word	0x080023fb
 8001e98:	080023fb 	.word	0x080023fb
 8001e9c:	080023fb 	.word	0x080023fb
 8001ea0:	080023fb 	.word	0x080023fb
 8001ea4:	080023fb 	.word	0x080023fb
 8001ea8:	080023fb 	.word	0x080023fb
 8001eac:	080023fb 	.word	0x080023fb
 8001eb0:	080023fb 	.word	0x080023fb
 8001eb4:	080023fb 	.word	0x080023fb
 8001eb8:	080023fb 	.word	0x080023fb
 8001ebc:	080023fb 	.word	0x080023fb
 8001ec0:	080023fb 	.word	0x080023fb
 8001ec4:	080023fb 	.word	0x080023fb
 8001ec8:	080023fb 	.word	0x080023fb
 8001ecc:	08001f2d 	.word	0x08001f2d
 8001ed0:	080023fb 	.word	0x080023fb
 8001ed4:	080023fb 	.word	0x080023fb
 8001ed8:	08001f8b 	.word	0x08001f8b
 8001edc:	08002223 	.word	0x08002223
 8001ee0:	080023fb 	.word	0x080023fb
 8001ee4:	080023fb 	.word	0x080023fb
 8001ee8:	080023fb 	.word	0x080023fb
 8001eec:	080023fb 	.word	0x080023fb
 8001ef0:	080023fb 	.word	0x080023fb
 8001ef4:	080023fb 	.word	0x080023fb
 8001ef8:	080023fb 	.word	0x080023fb
 8001efc:	080023fb 	.word	0x080023fb
 8001f00:	080023fb 	.word	0x080023fb
 8001f04:	080023fb 	.word	0x080023fb
 8001f08:	0800236d 	.word	0x0800236d
 8001f0c:	0800211b 	.word	0x0800211b
 8001f10:	080022b5 	.word	0x080022b5
 8001f14:	080023fb 	.word	0x080023fb
 8001f18:	080023fb 	.word	0x080023fb
 8001f1c:	080023fb 	.word	0x080023fb
 8001f20:	080023fb 	.word	0x080023fb
 8001f24:	08002191 	.word	0x08002191
 8001f28:	080023f3 	.word	0x080023f3
				case -1:  //No Input
					break;
				case 'a':
					if(Freq_Sin>9){
 8001f2c:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <main+0x1094>)
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	dd03      	ble.n	8001f48 <main+0xfb8>
						Freq_Sin =10 ;
 8001f40:	4b38      	ldr	r3, [pc, #224]	; (8002024 <main+0x1094>)
 8001f42:	4a39      	ldr	r2, [pc, #228]	; (8002028 <main+0x1098>)
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e009      	b.n	8001f5c <main+0xfcc>
					}
					else {
						Freq_Sin+=1;
 8001f48:	4b36      	ldr	r3, [pc, #216]	; (8002024 <main+0x1094>)
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f56:	4b33      	ldr	r3, [pc, #204]	; (8002024 <main+0x1094>)
 8001f58:	edc3 7a00 	vstr	s15, [r3]
					}
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Sin);
 8001f5c:	4b31      	ldr	r3, [pc, #196]	; (8002024 <main+0x1094>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe faf9 	bl	8000558 <__aeabi_f2d>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4928      	ldr	r1, [pc, #160]	; (800200c <main+0x107c>)
 8001f6c:	4824      	ldr	r0, [pc, #144]	; (8002000 <main+0x1070>)
 8001f6e:	f006 f817 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001f72:	4823      	ldr	r0, [pc, #140]	; (8002000 <main+0x1070>)
 8001f74:	f7fe f934 	bl	80001e0 <strlen>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f80:	491f      	ldr	r1, [pc, #124]	; (8002000 <main+0x1070>)
 8001f82:	4820      	ldr	r0, [pc, #128]	; (8002004 <main+0x1074>)
 8001f84:	f004 fd55 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8001f88:	e248      	b.n	800241c <main+0x148c>
				case 'd':
					if(Freq_Sin<1){
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <main+0x1094>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9c:	d504      	bpl.n	8001fa8 <main+0x1018>
						Freq_Sin =0 ;
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <main+0x1094>)
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e009      	b.n	8001fbc <main+0x102c>
					}
					else {
						Freq_Sin-=1;
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <main+0x1094>)
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <main+0x1094>)
 8001fb8:	edc3 7a00 	vstr	s15, [r3]
					}
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Sin);
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <main+0x1094>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fac9 	bl	8000558 <__aeabi_f2d>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4910      	ldr	r1, [pc, #64]	; (800200c <main+0x107c>)
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <main+0x1070>)
 8001fce:	f005 ffe7 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8001fd2:	480b      	ldr	r0, [pc, #44]	; (8002000 <main+0x1070>)
 8001fd4:	f7fe f904 	bl	80001e0 <strlen>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe0:	4907      	ldr	r1, [pc, #28]	; (8002000 <main+0x1070>)
 8001fe2:	4808      	ldr	r0, [pc, #32]	; (8002004 <main+0x1074>)
 8001fe4:	f004 fd25 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8001fe8:	e218      	b.n	800241c <main+0x148c>
 8001fea:	bf00      	nop
 8001fec:	f3af 8000 	nop.w
 8001ff0:	9999999a 	.word	0x9999999a
 8001ff4:	3fb99999 	.word	0x3fb99999
 8001ff8:	20000230 	.word	0x20000230
 8001ffc:	0800b638 	.word	0x0800b638
 8002000:	20000288 	.word	0x20000288
 8002004:	20000818 	.word	0x20000818
 8002008:	20000004 	.word	0x20000004
 800200c:	0800b604 	.word	0x0800b604
 8002010:	20000018 	.word	0x20000018
 8002014:	0800b628 	.word	0x0800b628
 8002018:	20000001 	.word	0x20000001
 800201c:	0800b648 	.word	0x0800b648
 8002020:	0800b654 	.word	0x0800b654
 8002024:	20000008 	.word	0x20000008
 8002028:	41200000 	.word	0x41200000


				case 'A':
					if(Freq_Sin>9.9){
 800202c:	4bb0      	ldr	r3, [pc, #704]	; (80022f0 <main+0x1360>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fa91 	bl	8000558 <__aeabi_f2d>
 8002036:	a3a8      	add	r3, pc, #672	; (adr r3, 80022d8 <main+0x1348>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fd74 	bl	8000b28 <__aeabi_dcmpgt>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <main+0x10be>
						Freq_Sin =10 ;
 8002046:	4baa      	ldr	r3, [pc, #680]	; (80022f0 <main+0x1360>)
 8002048:	4aaa      	ldr	r2, [pc, #680]	; (80022f4 <main+0x1364>)
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e012      	b.n	8002074 <main+0x10e4>
					}
					else {
						Freq_Sin+=0.1;
 800204e:	4ba8      	ldr	r3, [pc, #672]	; (80022f0 <main+0x1360>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa80 	bl	8000558 <__aeabi_f2d>
 8002058:	a3a1      	add	r3, pc, #644	; (adr r3, 80022e0 <main+0x1350>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	f7fe f91d 	bl	800029c <__adddf3>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f7fe fdc5 	bl	8000bf8 <__aeabi_d2f>
 800206e:	4603      	mov	r3, r0
 8002070:	4a9f      	ldr	r2, [pc, #636]	; (80022f0 <main+0x1360>)
 8002072:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Sin);
 8002074:	4b9e      	ldr	r3, [pc, #632]	; (80022f0 <main+0x1360>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fa6d 	bl	8000558 <__aeabi_f2d>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	499d      	ldr	r1, [pc, #628]	; (80022f8 <main+0x1368>)
 8002084:	489d      	ldr	r0, [pc, #628]	; (80022fc <main+0x136c>)
 8002086:	f005 ff8b 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 800208a:	489c      	ldr	r0, [pc, #624]	; (80022fc <main+0x136c>)
 800208c:	f7fe f8a8 	bl	80001e0 <strlen>
 8002090:	4603      	mov	r3, r0
 8002092:	b29a      	uxth	r2, r3
 8002094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002098:	4998      	ldr	r1, [pc, #608]	; (80022fc <main+0x136c>)
 800209a:	4899      	ldr	r0, [pc, #612]	; (8002300 <main+0x1370>)
 800209c:	f004 fcc9 	bl	8006a32 <HAL_UART_Transmit>
					break;
 80020a0:	e1bc      	b.n	800241c <main+0x148c>
				case 'D':
					if(Freq_Sin<0.1){
 80020a2:	4b93      	ldr	r3, [pc, #588]	; (80022f0 <main+0x1360>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fa56 	bl	8000558 <__aeabi_f2d>
 80020ac:	a38c      	add	r3, pc, #560	; (adr r3, 80022e0 <main+0x1350>)
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	f7fe fd1b 	bl	8000aec <__aeabi_dcmplt>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <main+0x1136>
						Freq_Sin =0 ;
 80020bc:	4b8c      	ldr	r3, [pc, #560]	; (80022f0 <main+0x1360>)
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e012      	b.n	80020ec <main+0x115c>
					}
					else {
						Freq_Sin-=0.1;
 80020c6:	4b8a      	ldr	r3, [pc, #552]	; (80022f0 <main+0x1360>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fa44 	bl	8000558 <__aeabi_f2d>
 80020d0:	a383      	add	r3, pc, #524	; (adr r3, 80022e0 <main+0x1350>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	f7fe f8df 	bl	8000298 <__aeabi_dsub>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7fe fd89 	bl	8000bf8 <__aeabi_d2f>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4a81      	ldr	r2, [pc, #516]	; (80022f0 <main+0x1360>)
 80020ea:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Sin);
 80020ec:	4b80      	ldr	r3, [pc, #512]	; (80022f0 <main+0x1360>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fa31 	bl	8000558 <__aeabi_f2d>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	497f      	ldr	r1, [pc, #508]	; (80022f8 <main+0x1368>)
 80020fc:	487f      	ldr	r0, [pc, #508]	; (80022fc <main+0x136c>)
 80020fe:	f005 ff4f 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002102:	487e      	ldr	r0, [pc, #504]	; (80022fc <main+0x136c>)
 8002104:	f7fe f86c 	bl	80001e0 <strlen>
 8002108:	4603      	mov	r3, r0
 800210a:	b29a      	uxth	r2, r3
 800210c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002110:	497a      	ldr	r1, [pc, #488]	; (80022fc <main+0x136c>)
 8002112:	487b      	ldr	r0, [pc, #492]	; (8002300 <main+0x1370>)
 8002114:	f004 fc8d 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8002118:	e180      	b.n	800241c <main+0x148c>



				case 'q':
					if (VHigh_Sin>3.2){
 800211a:	4b7a      	ldr	r3, [pc, #488]	; (8002304 <main+0x1374>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa1a 	bl	8000558 <__aeabi_f2d>
 8002124:	a370      	add	r3, pc, #448	; (adr r3, 80022e8 <main+0x1358>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	f7fe fcfd 	bl	8000b28 <__aeabi_dcmpgt>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <main+0x11ac>
						VHigh_Sin=3.3;
 8002134:	4b73      	ldr	r3, [pc, #460]	; (8002304 <main+0x1374>)
 8002136:	4a74      	ldr	r2, [pc, #464]	; (8002308 <main+0x1378>)
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e012      	b.n	8002162 <main+0x11d2>
					}
					else{
						VHigh_Sin +=0.1;
 800213c:	4b71      	ldr	r3, [pc, #452]	; (8002304 <main+0x1374>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fa09 	bl	8000558 <__aeabi_f2d>
 8002146:	a366      	add	r3, pc, #408	; (adr r3, 80022e0 <main+0x1350>)
 8002148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214c:	f7fe f8a6 	bl	800029c <__adddf3>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f7fe fd4e 	bl	8000bf8 <__aeabi_d2f>
 800215c:	4603      	mov	r3, r0
 800215e:	4a69      	ldr	r2, [pc, #420]	; (8002304 <main+0x1374>)
 8002160:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "V High :%.1f\r\n",VHigh_Sin);
 8002162:	4b68      	ldr	r3, [pc, #416]	; (8002304 <main+0x1374>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f9f6 	bl	8000558 <__aeabi_f2d>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4966      	ldr	r1, [pc, #408]	; (800230c <main+0x137c>)
 8002172:	4862      	ldr	r0, [pc, #392]	; (80022fc <main+0x136c>)
 8002174:	f005 ff14 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002178:	4860      	ldr	r0, [pc, #384]	; (80022fc <main+0x136c>)
 800217a:	f7fe f831 	bl	80001e0 <strlen>
 800217e:	4603      	mov	r3, r0
 8002180:	b29a      	uxth	r2, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002186:	495d      	ldr	r1, [pc, #372]	; (80022fc <main+0x136c>)
 8002188:	485d      	ldr	r0, [pc, #372]	; (8002300 <main+0x1370>)
 800218a:	f004 fc52 	bl	8006a32 <HAL_UART_Transmit>
					break;
 800218e:	e145      	b.n	800241c <main+0x148c>
				case 'w':
					if (VHigh_Sin<VLow_Sin+0.1){
 8002190:	4b5c      	ldr	r3, [pc, #368]	; (8002304 <main+0x1374>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f9df 	bl	8000558 <__aeabi_f2d>
 800219a:	4680      	mov	r8, r0
 800219c:	4689      	mov	r9, r1
 800219e:	4b5c      	ldr	r3, [pc, #368]	; (8002310 <main+0x1380>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9d8 	bl	8000558 <__aeabi_f2d>
 80021a8:	a34d      	add	r3, pc, #308	; (adr r3, 80022e0 <main+0x1350>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f875 	bl	800029c <__adddf3>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4640      	mov	r0, r8
 80021b8:	4649      	mov	r1, r9
 80021ba:	f7fe fc97 	bl	8000aec <__aeabi_dcmplt>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <main+0x123e>
						VHigh_Sin=VLow_Sin;
 80021c4:	4b52      	ldr	r3, [pc, #328]	; (8002310 <main+0x1380>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4e      	ldr	r2, [pc, #312]	; (8002304 <main+0x1374>)
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	e012      	b.n	80021f4 <main+0x1264>
					}
					else{
						VHigh_Sin -=0.1;
 80021ce:	4b4d      	ldr	r3, [pc, #308]	; (8002304 <main+0x1374>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe f9c0 	bl	8000558 <__aeabi_f2d>
 80021d8:	a341      	add	r3, pc, #260	; (adr r3, 80022e0 <main+0x1350>)
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	f7fe f85b 	bl	8000298 <__aeabi_dsub>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7fe fd05 	bl	8000bf8 <__aeabi_d2f>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4a44      	ldr	r2, [pc, #272]	; (8002304 <main+0x1374>)
 80021f2:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "V High :%.1f\r\n",VHigh_Sin);
 80021f4:	4b43      	ldr	r3, [pc, #268]	; (8002304 <main+0x1374>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f9ad 	bl	8000558 <__aeabi_f2d>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4942      	ldr	r1, [pc, #264]	; (800230c <main+0x137c>)
 8002204:	483d      	ldr	r0, [pc, #244]	; (80022fc <main+0x136c>)
 8002206:	f005 fecb 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 800220a:	483c      	ldr	r0, [pc, #240]	; (80022fc <main+0x136c>)
 800220c:	f7fd ffe8 	bl	80001e0 <strlen>
 8002210:	4603      	mov	r3, r0
 8002212:	b29a      	uxth	r2, r3
 8002214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002218:	4938      	ldr	r1, [pc, #224]	; (80022fc <main+0x136c>)
 800221a:	4839      	ldr	r0, [pc, #228]	; (8002300 <main+0x1370>)
 800221c:	f004 fc09 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8002220:	e0fc      	b.n	800241c <main+0x148c>


				case 'e':
					if (VLow_Sin>VHigh_Sin-0.1){
 8002222:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <main+0x1380>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe f996 	bl	8000558 <__aeabi_f2d>
 800222c:	4680      	mov	r8, r0
 800222e:	4689      	mov	r9, r1
 8002230:	4b34      	ldr	r3, [pc, #208]	; (8002304 <main+0x1374>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f98f 	bl	8000558 <__aeabi_f2d>
 800223a:	a329      	add	r3, pc, #164	; (adr r3, 80022e0 <main+0x1350>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f7fe f82a 	bl	8000298 <__aeabi_dsub>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4640      	mov	r0, r8
 800224a:	4649      	mov	r1, r9
 800224c:	f7fe fc6c 	bl	8000b28 <__aeabi_dcmpgt>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d004      	beq.n	8002260 <main+0x12d0>
						VLow_Sin=VHigh_Sin;
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <main+0x1374>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2d      	ldr	r2, [pc, #180]	; (8002310 <main+0x1380>)
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e012      	b.n	8002286 <main+0x12f6>
					}
					else{
						VLow_Sin +=0.1;
 8002260:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <main+0x1380>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f977 	bl	8000558 <__aeabi_f2d>
 800226a:	a31d      	add	r3, pc, #116	; (adr r3, 80022e0 <main+0x1350>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	f7fe f814 	bl	800029c <__adddf3>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fcbc 	bl	8000bf8 <__aeabi_d2f>
 8002280:	4603      	mov	r3, r0
 8002282:	4a23      	ldr	r2, [pc, #140]	; (8002310 <main+0x1380>)
 8002284:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "V Low :%.1f\r\n",VLow_Sin);
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <main+0x1380>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f964 	bl	8000558 <__aeabi_f2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	491f      	ldr	r1, [pc, #124]	; (8002314 <main+0x1384>)
 8002296:	4819      	ldr	r0, [pc, #100]	; (80022fc <main+0x136c>)
 8002298:	f005 fe82 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 800229c:	4817      	ldr	r0, [pc, #92]	; (80022fc <main+0x136c>)
 800229e:	f7fd ff9f 	bl	80001e0 <strlen>
 80022a2:	4603      	mov	r3, r0
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022aa:	4914      	ldr	r1, [pc, #80]	; (80022fc <main+0x136c>)
 80022ac:	4814      	ldr	r0, [pc, #80]	; (8002300 <main+0x1370>)
 80022ae:	f004 fbc0 	bl	8006a32 <HAL_UART_Transmit>
					break;
 80022b2:	e0b3      	b.n	800241c <main+0x148c>
				case 'r':
					if (VLow_Sin<0.1){
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <main+0x1380>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f94d 	bl	8000558 <__aeabi_f2d>
 80022be:	a308      	add	r3, pc, #32	; (adr r3, 80022e0 <main+0x1350>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	f7fe fc12 	bl	8000aec <__aeabi_dcmplt>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d024      	beq.n	8002318 <main+0x1388>
						VLow_Sin=0;
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <main+0x1380>)
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e032      	b.n	800233e <main+0x13ae>
 80022d8:	cccccccd 	.word	0xcccccccd
 80022dc:	4023cccc 	.word	0x4023cccc
 80022e0:	9999999a 	.word	0x9999999a
 80022e4:	3fb99999 	.word	0x3fb99999
 80022e8:	9999999a 	.word	0x9999999a
 80022ec:	40099999 	.word	0x40099999
 80022f0:	20000008 	.word	0x20000008
 80022f4:	41200000 	.word	0x41200000
 80022f8:	0800b604 	.word	0x0800b604
 80022fc:	20000288 	.word	0x20000288
 8002300:	20000818 	.word	0x20000818
 8002304:	20000010 	.word	0x20000010
 8002308:	40533333 	.word	0x40533333
 800230c:	0800b628 	.word	0x0800b628
 8002310:	20000228 	.word	0x20000228
 8002314:	0800b638 	.word	0x0800b638
					}
					else{
						VLow_Sin -=0.1;
 8002318:	4bbb      	ldr	r3, [pc, #748]	; (8002608 <main+0x1678>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f91b 	bl	8000558 <__aeabi_f2d>
 8002322:	a3b7      	add	r3, pc, #732	; (adr r3, 8002600 <main+0x1670>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fd ffb6 	bl	8000298 <__aeabi_dsub>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe fc60 	bl	8000bf8 <__aeabi_d2f>
 8002338:	4603      	mov	r3, r0
 800233a:	4ab3      	ldr	r2, [pc, #716]	; (8002608 <main+0x1678>)
 800233c:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "V Low :%.1f\r\n",VLow_Sin);
 800233e:	4bb2      	ldr	r3, [pc, #712]	; (8002608 <main+0x1678>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe f908 	bl	8000558 <__aeabi_f2d>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	49af      	ldr	r1, [pc, #700]	; (800260c <main+0x167c>)
 800234e:	48b0      	ldr	r0, [pc, #704]	; (8002610 <main+0x1680>)
 8002350:	f005 fe26 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002354:	48ae      	ldr	r0, [pc, #696]	; (8002610 <main+0x1680>)
 8002356:	f7fd ff43 	bl	80001e0 <strlen>
 800235a:	4603      	mov	r3, r0
 800235c:	b29a      	uxth	r2, r3
 800235e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002362:	49ab      	ldr	r1, [pc, #684]	; (8002610 <main+0x1680>)
 8002364:	48ab      	ldr	r0, [pc, #684]	; (8002614 <main+0x1684>)
 8002366:	f004 fb64 	bl	8006a32 <HAL_UART_Transmit>
					break;
 800236a:	e057      	b.n	800241c <main+0x148c>



				case 'p':
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Sin);
 800236c:	4baa      	ldr	r3, [pc, #680]	; (8002618 <main+0x1688>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f8f1 	bl	8000558 <__aeabi_f2d>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	49a8      	ldr	r1, [pc, #672]	; (800261c <main+0x168c>)
 800237c:	48a4      	ldr	r0, [pc, #656]	; (8002610 <main+0x1680>)
 800237e:	f005 fe0f 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002382:	48a3      	ldr	r0, [pc, #652]	; (8002610 <main+0x1680>)
 8002384:	f7fd ff2c 	bl	80001e0 <strlen>
 8002388:	4603      	mov	r3, r0
 800238a:	b29a      	uxth	r2, r3
 800238c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002390:	499f      	ldr	r1, [pc, #636]	; (8002610 <main+0x1680>)
 8002392:	48a0      	ldr	r0, [pc, #640]	; (8002614 <main+0x1684>)
 8002394:	f004 fb4d 	bl	8006a32 <HAL_UART_Transmit>
					sprintf(Menu, "V High :%.1f\r\n",VHigh_Sin);
 8002398:	4ba1      	ldr	r3, [pc, #644]	; (8002620 <main+0x1690>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f8db 	bl	8000558 <__aeabi_f2d>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	499f      	ldr	r1, [pc, #636]	; (8002624 <main+0x1694>)
 80023a8:	4899      	ldr	r0, [pc, #612]	; (8002610 <main+0x1680>)
 80023aa:	f005 fdf9 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80023ae:	4898      	ldr	r0, [pc, #608]	; (8002610 <main+0x1680>)
 80023b0:	f7fd ff16 	bl	80001e0 <strlen>
 80023b4:	4603      	mov	r3, r0
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023bc:	4994      	ldr	r1, [pc, #592]	; (8002610 <main+0x1680>)
 80023be:	4895      	ldr	r0, [pc, #596]	; (8002614 <main+0x1684>)
 80023c0:	f004 fb37 	bl	8006a32 <HAL_UART_Transmit>
					sprintf(Menu, "V Low :%.1f\r\n",VLow_Sin);
 80023c4:	4b90      	ldr	r3, [pc, #576]	; (8002608 <main+0x1678>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f8c5 	bl	8000558 <__aeabi_f2d>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	498e      	ldr	r1, [pc, #568]	; (800260c <main+0x167c>)
 80023d4:	488e      	ldr	r0, [pc, #568]	; (8002610 <main+0x1680>)
 80023d6:	f005 fde3 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80023da:	488d      	ldr	r0, [pc, #564]	; (8002610 <main+0x1680>)
 80023dc:	f7fd ff00 	bl	80001e0 <strlen>
 80023e0:	4603      	mov	r3, r0
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e8:	4989      	ldr	r1, [pc, #548]	; (8002610 <main+0x1680>)
 80023ea:	488a      	ldr	r0, [pc, #552]	; (8002614 <main+0x1684>)
 80023ec:	f004 fb21 	bl	8006a32 <HAL_UART_Transmit>
					break;
 80023f0:	e014      	b.n	800241c <main+0x148c>

				case 'x':
					State = Start_Menu;
 80023f2:	4b8d      	ldr	r3, [pc, #564]	; (8002628 <main+0x1698>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
					break;
 80023f8:	e010      	b.n	800241c <main+0x148c>
				default:
					sprintf(Menu, "Error!\r\n");
 80023fa:	498c      	ldr	r1, [pc, #560]	; (800262c <main+0x169c>)
 80023fc:	4884      	ldr	r0, [pc, #528]	; (8002610 <main+0x1680>)
 80023fe:	f005 fdcf 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002402:	4883      	ldr	r0, [pc, #524]	; (8002610 <main+0x1680>)
 8002404:	f7fd feec 	bl	80001e0 <strlen>
 8002408:	4603      	mov	r3, r0
 800240a:	b29a      	uxth	r2, r3
 800240c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002410:	497f      	ldr	r1, [pc, #508]	; (8002610 <main+0x1680>)
 8002412:	4880      	ldr	r0, [pc, #512]	; (8002614 <main+0x1684>)
 8002414:	f004 fb0d 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8002418:	e000      	b.n	800241c <main+0x148c>
					break;
 800241a:	bf00      	nop
					}
				break;
 800241c:	e35e      	b.n	8002adc <main+0x1b4c>

//..............................................................Generator Square Wave .............................................................

			case Menu_3:
				sprintf(Menu, 	"\n\nGenerator Square Wave \r\n"
 800241e:	4984      	ldr	r1, [pc, #528]	; (8002630 <main+0x16a0>)
 8002420:	487b      	ldr	r0, [pc, #492]	; (8002610 <main+0x1680>)
 8002422:	f005 fdbd 	bl	8007fa0 <siprintf>
						"e.V Low  Up (+0.1V)	r.V Low  Down (-0.1V)\r\n"
						"\n"
						"z.Duty cycle up (+10 Percent)	c.Duty cycle up (-10 Percent)\r\n"
						"p.Print All\r\n"
						"x.Back\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002426:	487a      	ldr	r0, [pc, #488]	; (8002610 <main+0x1680>)
 8002428:	f7fd feda 	bl	80001e0 <strlen>
 800242c:	4603      	mov	r3, r0
 800242e:	b29a      	uxth	r2, r3
 8002430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002434:	4976      	ldr	r1, [pc, #472]	; (8002610 <main+0x1680>)
 8002436:	4877      	ldr	r0, [pc, #476]	; (8002614 <main+0x1684>)
 8002438:	f004 fafb 	bl	8006a32 <HAL_UART_Transmit>
					State = Menu_3_Waitting_Input;
 800243c:	4b7a      	ldr	r3, [pc, #488]	; (8002628 <main+0x1698>)
 800243e:	2246      	movs	r2, #70	; 0x46
 8002440:	701a      	strb	r2, [r3, #0]
					break;
 8002442:	e34b      	b.n	8002adc <main+0x1b4c>

//..............................................................Menu Square Wave .............................................................

			case Menu_3_Waitting_Input :
				switch(inputchar){
 8002444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	f000 8344 	beq.w	8002ad8 <main+0x1b48>
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	f2c0 8330 	blt.w	8002ab8 <main+0x1b28>
 8002458:	2b7a      	cmp	r3, #122	; 0x7a
 800245a:	f300 832d 	bgt.w	8002ab8 <main+0x1b28>
 800245e:	2b41      	cmp	r3, #65	; 0x41
 8002460:	f2c0 832a 	blt.w	8002ab8 <main+0x1b28>
 8002464:	3b41      	subs	r3, #65	; 0x41
 8002466:	2b39      	cmp	r3, #57	; 0x39
 8002468:	f200 8326 	bhi.w	8002ab8 <main+0x1b28>
 800246c:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <main+0x14e4>)
 800246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002472:	bf00      	nop
 8002474:	080026e7 	.word	0x080026e7
 8002478:	08002ab9 	.word	0x08002ab9
 800247c:	08002ab9 	.word	0x08002ab9
 8002480:	0800275d 	.word	0x0800275d
 8002484:	08002ab9 	.word	0x08002ab9
 8002488:	08002ab9 	.word	0x08002ab9
 800248c:	08002ab9 	.word	0x08002ab9
 8002490:	08002ab9 	.word	0x08002ab9
 8002494:	08002ab9 	.word	0x08002ab9
 8002498:	08002ab9 	.word	0x08002ab9
 800249c:	08002ab9 	.word	0x08002ab9
 80024a0:	08002ab9 	.word	0x08002ab9
 80024a4:	08002ab9 	.word	0x08002ab9
 80024a8:	08002ab9 	.word	0x08002ab9
 80024ac:	08002ab9 	.word	0x08002ab9
 80024b0:	08002ab9 	.word	0x08002ab9
 80024b4:	08002ab9 	.word	0x08002ab9
 80024b8:	08002ab9 	.word	0x08002ab9
 80024bc:	08002ab9 	.word	0x08002ab9
 80024c0:	08002ab9 	.word	0x08002ab9
 80024c4:	08002ab9 	.word	0x08002ab9
 80024c8:	08002ab9 	.word	0x08002ab9
 80024cc:	08002ab9 	.word	0x08002ab9
 80024d0:	08002ab9 	.word	0x08002ab9
 80024d4:	08002ab9 	.word	0x08002ab9
 80024d8:	08002ab9 	.word	0x08002ab9
 80024dc:	08002ab9 	.word	0x08002ab9
 80024e0:	08002ab9 	.word	0x08002ab9
 80024e4:	08002ab9 	.word	0x08002ab9
 80024e8:	08002ab9 	.word	0x08002ab9
 80024ec:	08002ab9 	.word	0x08002ab9
 80024f0:	08002ab9 	.word	0x08002ab9
 80024f4:	080025e1 	.word	0x080025e1
 80024f8:	08002ab9 	.word	0x08002ab9
 80024fc:	0800259f 	.word	0x0800259f
 8002500:	08002687 	.word	0x08002687
 8002504:	08002921 	.word	0x08002921
 8002508:	08002ab9 	.word	0x08002ab9
 800250c:	08002ab9 	.word	0x08002ab9
 8002510:	08002ab9 	.word	0x08002ab9
 8002514:	08002ab9 	.word	0x08002ab9
 8002518:	08002ab9 	.word	0x08002ab9
 800251c:	08002ab9 	.word	0x08002ab9
 8002520:	08002ab9 	.word	0x08002ab9
 8002524:	08002ab9 	.word	0x08002ab9
 8002528:	08002ab9 	.word	0x08002ab9
 800252c:	08002ab9 	.word	0x08002ab9
 8002530:	08002a2b 	.word	0x08002a2b
 8002534:	080027d5 	.word	0x080027d5
 8002538:	080029b3 	.word	0x080029b3
 800253c:	08002ab9 	.word	0x08002ab9
 8002540:	08002ab9 	.word	0x08002ab9
 8002544:	08002ab9 	.word	0x08002ab9
 8002548:	08002ab9 	.word	0x08002ab9
 800254c:	0800284b 	.word	0x0800284b
 8002550:	08002ab1 	.word	0x08002ab1
 8002554:	08002ab9 	.word	0x08002ab9
 8002558:	0800255d 	.word	0x0800255d
				case -1:  //No Input
					break;

				case 'z':
					if(Duty_C > 90){
 800255c:	4b35      	ldr	r3, [pc, #212]	; (8002634 <main+0x16a4>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b5a      	cmp	r3, #90	; 0x5a
 8002562:	d903      	bls.n	800256c <main+0x15dc>
						Duty_C = 100;
 8002564:	4b33      	ldr	r3, [pc, #204]	; (8002634 <main+0x16a4>)
 8002566:	2264      	movs	r2, #100	; 0x64
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e005      	b.n	8002578 <main+0x15e8>
					}
					else{
						Duty_C += 10;
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <main+0x16a4>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	330a      	adds	r3, #10
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <main+0x16a4>)
 8002576:	701a      	strb	r2, [r3, #0]
					}
					sprintf(Menu, "Duty_Cycle :%d\r\n",Duty_C);
 8002578:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <main+0x16a4>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	492e      	ldr	r1, [pc, #184]	; (8002638 <main+0x16a8>)
 8002580:	4823      	ldr	r0, [pc, #140]	; (8002610 <main+0x1680>)
 8002582:	f005 fd0d 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002586:	4822      	ldr	r0, [pc, #136]	; (8002610 <main+0x1680>)
 8002588:	f7fd fe2a 	bl	80001e0 <strlen>
 800258c:	4603      	mov	r3, r0
 800258e:	b29a      	uxth	r2, r3
 8002590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002594:	491e      	ldr	r1, [pc, #120]	; (8002610 <main+0x1680>)
 8002596:	481f      	ldr	r0, [pc, #124]	; (8002614 <main+0x1684>)
 8002598:	f004 fa4b 	bl	8006a32 <HAL_UART_Transmit>
					break;
 800259c:	e29d      	b.n	8002ada <main+0x1b4a>
				case 'c':
					if(Duty_C < 10){
 800259e:	4b25      	ldr	r3, [pc, #148]	; (8002634 <main+0x16a4>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b09      	cmp	r3, #9
 80025a4:	d803      	bhi.n	80025ae <main+0x161e>
						Duty_C = 0;
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <main+0x16a4>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e005      	b.n	80025ba <main+0x162a>
					}
					else{
						Duty_C -= 10;
 80025ae:	4b21      	ldr	r3, [pc, #132]	; (8002634 <main+0x16a4>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	3b0a      	subs	r3, #10
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <main+0x16a4>)
 80025b8:	701a      	strb	r2, [r3, #0]
					}
					sprintf(Menu, "Duty_Cycle :%d\r\n",Duty_C);
 80025ba:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <main+0x16a4>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	491d      	ldr	r1, [pc, #116]	; (8002638 <main+0x16a8>)
 80025c2:	4813      	ldr	r0, [pc, #76]	; (8002610 <main+0x1680>)
 80025c4:	f005 fcec 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80025c8:	4811      	ldr	r0, [pc, #68]	; (8002610 <main+0x1680>)
 80025ca:	f7fd fe09 	bl	80001e0 <strlen>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d6:	490e      	ldr	r1, [pc, #56]	; (8002610 <main+0x1680>)
 80025d8:	480e      	ldr	r0, [pc, #56]	; (8002614 <main+0x1684>)
 80025da:	f004 fa2a 	bl	8006a32 <HAL_UART_Transmit>
					break;
 80025de:	e27c      	b.n	8002ada <main+0x1b4a>


				case 'a':
					if(Freq_Square>9){
 80025e0:	4b16      	ldr	r3, [pc, #88]	; (800263c <main+0x16ac>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80025ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f2:	dd27      	ble.n	8002644 <main+0x16b4>
						Freq_Square =10 ;
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <main+0x16ac>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <main+0x16b0>)
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e02d      	b.n	8002658 <main+0x16c8>
 80025fc:	f3af 8000 	nop.w
 8002600:	9999999a 	.word	0x9999999a
 8002604:	3fb99999 	.word	0x3fb99999
 8002608:	20000228 	.word	0x20000228
 800260c:	0800b638 	.word	0x0800b638
 8002610:	20000288 	.word	0x20000288
 8002614:	20000818 	.word	0x20000818
 8002618:	20000008 	.word	0x20000008
 800261c:	0800b604 	.word	0x0800b604
 8002620:	20000010 	.word	0x20000010
 8002624:	0800b628 	.word	0x0800b628
 8002628:	20000001 	.word	0x20000001
 800262c:	0800b648 	.word	0x0800b648
 8002630:	0800b71c 	.word	0x0800b71c
 8002634:	20000003 	.word	0x20000003
 8002638:	0800b824 	.word	0x0800b824
 800263c:	2000000c 	.word	0x2000000c
 8002640:	41200000 	.word	0x41200000
					}
					else {
						Freq_Square+=1;
 8002644:	4bac      	ldr	r3, [pc, #688]	; (80028f8 <main+0x1968>)
 8002646:	edd3 7a00 	vldr	s15, [r3]
 800264a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800264e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002652:	4ba9      	ldr	r3, [pc, #676]	; (80028f8 <main+0x1968>)
 8002654:	edc3 7a00 	vstr	s15, [r3]
					}
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Square);
 8002658:	4ba7      	ldr	r3, [pc, #668]	; (80028f8 <main+0x1968>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ff7b 	bl	8000558 <__aeabi_f2d>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	49a5      	ldr	r1, [pc, #660]	; (80028fc <main+0x196c>)
 8002668:	48a5      	ldr	r0, [pc, #660]	; (8002900 <main+0x1970>)
 800266a:	f005 fc99 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 800266e:	48a4      	ldr	r0, [pc, #656]	; (8002900 <main+0x1970>)
 8002670:	f7fd fdb6 	bl	80001e0 <strlen>
 8002674:	4603      	mov	r3, r0
 8002676:	b29a      	uxth	r2, r3
 8002678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267c:	49a0      	ldr	r1, [pc, #640]	; (8002900 <main+0x1970>)
 800267e:	48a1      	ldr	r0, [pc, #644]	; (8002904 <main+0x1974>)
 8002680:	f004 f9d7 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8002684:	e229      	b.n	8002ada <main+0x1b4a>
				case 'd':
					if(Freq_Square<1){
 8002686:	4b9c      	ldr	r3, [pc, #624]	; (80028f8 <main+0x1968>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002698:	d504      	bpl.n	80026a4 <main+0x1714>
						Freq_Square =0 ;
 800269a:	4b97      	ldr	r3, [pc, #604]	; (80028f8 <main+0x1968>)
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e009      	b.n	80026b8 <main+0x1728>
					}
					else {
						Freq_Square-=1;
 80026a4:	4b94      	ldr	r3, [pc, #592]	; (80028f8 <main+0x1968>)
 80026a6:	edd3 7a00 	vldr	s15, [r3]
 80026aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026b2:	4b91      	ldr	r3, [pc, #580]	; (80028f8 <main+0x1968>)
 80026b4:	edc3 7a00 	vstr	s15, [r3]
					}
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Square);
 80026b8:	4b8f      	ldr	r3, [pc, #572]	; (80028f8 <main+0x1968>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd ff4b 	bl	8000558 <__aeabi_f2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	498d      	ldr	r1, [pc, #564]	; (80028fc <main+0x196c>)
 80026c8:	488d      	ldr	r0, [pc, #564]	; (8002900 <main+0x1970>)
 80026ca:	f005 fc69 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80026ce:	488c      	ldr	r0, [pc, #560]	; (8002900 <main+0x1970>)
 80026d0:	f7fd fd86 	bl	80001e0 <strlen>
 80026d4:	4603      	mov	r3, r0
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026dc:	4988      	ldr	r1, [pc, #544]	; (8002900 <main+0x1970>)
 80026de:	4889      	ldr	r0, [pc, #548]	; (8002904 <main+0x1974>)
 80026e0:	f004 f9a7 	bl	8006a32 <HAL_UART_Transmit>
					break;
 80026e4:	e1f9      	b.n	8002ada <main+0x1b4a>


				case 'A':
					if(Freq_Square>9.9){
 80026e6:	4b84      	ldr	r3, [pc, #528]	; (80028f8 <main+0x1968>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fd ff34 	bl	8000558 <__aeabi_f2d>
 80026f0:	a37b      	add	r3, pc, #492	; (adr r3, 80028e0 <main+0x1950>)
 80026f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f6:	f7fe fa17 	bl	8000b28 <__aeabi_dcmpgt>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <main+0x1778>
						Freq_Square =10 ;
 8002700:	4b7d      	ldr	r3, [pc, #500]	; (80028f8 <main+0x1968>)
 8002702:	4a81      	ldr	r2, [pc, #516]	; (8002908 <main+0x1978>)
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e012      	b.n	800272e <main+0x179e>
					}
					else {
						Freq_Square+=0.1;
 8002708:	4b7b      	ldr	r3, [pc, #492]	; (80028f8 <main+0x1968>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff23 	bl	8000558 <__aeabi_f2d>
 8002712:	a375      	add	r3, pc, #468	; (adr r3, 80028e8 <main+0x1958>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fd fdc0 	bl	800029c <__adddf3>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f7fe fa68 	bl	8000bf8 <__aeabi_d2f>
 8002728:	4603      	mov	r3, r0
 800272a:	4a73      	ldr	r2, [pc, #460]	; (80028f8 <main+0x1968>)
 800272c:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Square);
 800272e:	4b72      	ldr	r3, [pc, #456]	; (80028f8 <main+0x1968>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd ff10 	bl	8000558 <__aeabi_f2d>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	496f      	ldr	r1, [pc, #444]	; (80028fc <main+0x196c>)
 800273e:	4870      	ldr	r0, [pc, #448]	; (8002900 <main+0x1970>)
 8002740:	f005 fc2e 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002744:	486e      	ldr	r0, [pc, #440]	; (8002900 <main+0x1970>)
 8002746:	f7fd fd4b 	bl	80001e0 <strlen>
 800274a:	4603      	mov	r3, r0
 800274c:	b29a      	uxth	r2, r3
 800274e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002752:	496b      	ldr	r1, [pc, #428]	; (8002900 <main+0x1970>)
 8002754:	486b      	ldr	r0, [pc, #428]	; (8002904 <main+0x1974>)
 8002756:	f004 f96c 	bl	8006a32 <HAL_UART_Transmit>
					break;
 800275a:	e1be      	b.n	8002ada <main+0x1b4a>
				case 'D':
					if(Freq_Square<0.1){
 800275c:	4b66      	ldr	r3, [pc, #408]	; (80028f8 <main+0x1968>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd fef9 	bl	8000558 <__aeabi_f2d>
 8002766:	a360      	add	r3, pc, #384	; (adr r3, 80028e8 <main+0x1958>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f7fe f9be 	bl	8000aec <__aeabi_dcmplt>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <main+0x17f0>
						Freq_Square =0 ;
 8002776:	4b60      	ldr	r3, [pc, #384]	; (80028f8 <main+0x1968>)
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e012      	b.n	80027a6 <main+0x1816>
					}
					else {
						Freq_Square-=0.1;
 8002780:	4b5d      	ldr	r3, [pc, #372]	; (80028f8 <main+0x1968>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd fee7 	bl	8000558 <__aeabi_f2d>
 800278a:	a357      	add	r3, pc, #348	; (adr r3, 80028e8 <main+0x1958>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd fd82 	bl	8000298 <__aeabi_dsub>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f7fe fa2c 	bl	8000bf8 <__aeabi_d2f>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4a55      	ldr	r2, [pc, #340]	; (80028f8 <main+0x1968>)
 80027a4:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Square);
 80027a6:	4b54      	ldr	r3, [pc, #336]	; (80028f8 <main+0x1968>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd fed4 	bl	8000558 <__aeabi_f2d>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4951      	ldr	r1, [pc, #324]	; (80028fc <main+0x196c>)
 80027b6:	4852      	ldr	r0, [pc, #328]	; (8002900 <main+0x1970>)
 80027b8:	f005 fbf2 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80027bc:	4850      	ldr	r0, [pc, #320]	; (8002900 <main+0x1970>)
 80027be:	f7fd fd0f 	bl	80001e0 <strlen>
 80027c2:	4603      	mov	r3, r0
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ca:	494d      	ldr	r1, [pc, #308]	; (8002900 <main+0x1970>)
 80027cc:	484d      	ldr	r0, [pc, #308]	; (8002904 <main+0x1974>)
 80027ce:	f004 f930 	bl	8006a32 <HAL_UART_Transmit>
					break;
 80027d2:	e182      	b.n	8002ada <main+0x1b4a>



				case 'q':
					if (VHigh_Square>3.2){
 80027d4:	4b4d      	ldr	r3, [pc, #308]	; (800290c <main+0x197c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd febd 	bl	8000558 <__aeabi_f2d>
 80027de:	a344      	add	r3, pc, #272	; (adr r3, 80028f0 <main+0x1960>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f7fe f9a0 	bl	8000b28 <__aeabi_dcmpgt>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <main+0x1866>
						VHigh_Square=3.3;
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <main+0x197c>)
 80027f0:	4a47      	ldr	r2, [pc, #284]	; (8002910 <main+0x1980>)
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	e012      	b.n	800281c <main+0x188c>
					}
					else{
						VHigh_Saw +=0.1;
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <main+0x1984>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd feac 	bl	8000558 <__aeabi_f2d>
 8002800:	a339      	add	r3, pc, #228	; (adr r3, 80028e8 <main+0x1958>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f7fd fd49 	bl	800029c <__adddf3>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f7fe f9f1 	bl	8000bf8 <__aeabi_d2f>
 8002816:	4603      	mov	r3, r0
 8002818:	4a3e      	ldr	r2, [pc, #248]	; (8002914 <main+0x1984>)
 800281a:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "V High :%.1f\r\n",VHigh_Square);
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <main+0x197c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7fd fe99 	bl	8000558 <__aeabi_f2d>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	493b      	ldr	r1, [pc, #236]	; (8002918 <main+0x1988>)
 800282c:	4834      	ldr	r0, [pc, #208]	; (8002900 <main+0x1970>)
 800282e:	f005 fbb7 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002832:	4833      	ldr	r0, [pc, #204]	; (8002900 <main+0x1970>)
 8002834:	f7fd fcd4 	bl	80001e0 <strlen>
 8002838:	4603      	mov	r3, r0
 800283a:	b29a      	uxth	r2, r3
 800283c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002840:	492f      	ldr	r1, [pc, #188]	; (8002900 <main+0x1970>)
 8002842:	4830      	ldr	r0, [pc, #192]	; (8002904 <main+0x1974>)
 8002844:	f004 f8f5 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8002848:	e147      	b.n	8002ada <main+0x1b4a>
				case 'w':
					if (VHigh_Square<VLow_Saw+0.1){
 800284a:	4b30      	ldr	r3, [pc, #192]	; (800290c <main+0x197c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe82 	bl	8000558 <__aeabi_f2d>
 8002854:	4680      	mov	r8, r0
 8002856:	4689      	mov	r9, r1
 8002858:	4b30      	ldr	r3, [pc, #192]	; (800291c <main+0x198c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe7b 	bl	8000558 <__aeabi_f2d>
 8002862:	a321      	add	r3, pc, #132	; (adr r3, 80028e8 <main+0x1958>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fd fd18 	bl	800029c <__adddf3>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4640      	mov	r0, r8
 8002872:	4649      	mov	r1, r9
 8002874:	f7fe f93a 	bl	8000aec <__aeabi_dcmplt>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <main+0x18f8>
						VHigh_Square=VLow_Saw;
 800287e:	4b27      	ldr	r3, [pc, #156]	; (800291c <main+0x198c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a22      	ldr	r2, [pc, #136]	; (800290c <main+0x197c>)
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e012      	b.n	80028ae <main+0x191e>
					}
					else{
						VHigh_Square -=0.1;
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <main+0x197c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fe63 	bl	8000558 <__aeabi_f2d>
 8002892:	a315      	add	r3, pc, #84	; (adr r3, 80028e8 <main+0x1958>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f7fd fcfe 	bl	8000298 <__aeabi_dsub>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	f7fe f9a8 	bl	8000bf8 <__aeabi_d2f>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <main+0x197c>)
 80028ac:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "V High :%.1f\r\n",VHigh_Square);
 80028ae:	4b17      	ldr	r3, [pc, #92]	; (800290c <main+0x197c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fe50 	bl	8000558 <__aeabi_f2d>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4916      	ldr	r1, [pc, #88]	; (8002918 <main+0x1988>)
 80028be:	4810      	ldr	r0, [pc, #64]	; (8002900 <main+0x1970>)
 80028c0:	f005 fb6e 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 80028c4:	480e      	ldr	r0, [pc, #56]	; (8002900 <main+0x1970>)
 80028c6:	f7fd fc8b 	bl	80001e0 <strlen>
 80028ca:	4603      	mov	r3, r0
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028d2:	490b      	ldr	r1, [pc, #44]	; (8002900 <main+0x1970>)
 80028d4:	480b      	ldr	r0, [pc, #44]	; (8002904 <main+0x1974>)
 80028d6:	f004 f8ac 	bl	8006a32 <HAL_UART_Transmit>
					break;
 80028da:	e0fe      	b.n	8002ada <main+0x1b4a>
 80028dc:	f3af 8000 	nop.w
 80028e0:	cccccccd 	.word	0xcccccccd
 80028e4:	4023cccc 	.word	0x4023cccc
 80028e8:	9999999a 	.word	0x9999999a
 80028ec:	3fb99999 	.word	0x3fb99999
 80028f0:	9999999a 	.word	0x9999999a
 80028f4:	40099999 	.word	0x40099999
 80028f8:	2000000c 	.word	0x2000000c
 80028fc:	0800b604 	.word	0x0800b604
 8002900:	20000288 	.word	0x20000288
 8002904:	20000818 	.word	0x20000818
 8002908:	41200000 	.word	0x41200000
 800290c:	20000014 	.word	0x20000014
 8002910:	40533333 	.word	0x40533333
 8002914:	20000018 	.word	0x20000018
 8002918:	0800b628 	.word	0x0800b628
 800291c:	20000230 	.word	0x20000230


				case 'e':
					if (VLow_Square>VHigh_Square-0.1){
 8002920:	4b71      	ldr	r3, [pc, #452]	; (8002ae8 <main+0x1b58>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fe17 	bl	8000558 <__aeabi_f2d>
 800292a:	4680      	mov	r8, r0
 800292c:	4689      	mov	r9, r1
 800292e:	4b6f      	ldr	r3, [pc, #444]	; (8002aec <main+0x1b5c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fe10 	bl	8000558 <__aeabi_f2d>
 8002938:	a369      	add	r3, pc, #420	; (adr r3, 8002ae0 <main+0x1b50>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fcab 	bl	8000298 <__aeabi_dsub>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4640      	mov	r0, r8
 8002948:	4649      	mov	r1, r9
 800294a:	f7fe f8ed 	bl	8000b28 <__aeabi_dcmpgt>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d004      	beq.n	800295e <main+0x19ce>
						VLow_Square=VHigh_Square;
 8002954:	4b65      	ldr	r3, [pc, #404]	; (8002aec <main+0x1b5c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a63      	ldr	r2, [pc, #396]	; (8002ae8 <main+0x1b58>)
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	e012      	b.n	8002984 <main+0x19f4>
					}
					else{
						VLow_Square +=0.1;
 800295e:	4b62      	ldr	r3, [pc, #392]	; (8002ae8 <main+0x1b58>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fdf8 	bl	8000558 <__aeabi_f2d>
 8002968:	a35d      	add	r3, pc, #372	; (adr r3, 8002ae0 <main+0x1b50>)
 800296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296e:	f7fd fc95 	bl	800029c <__adddf3>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	f7fe f93d 	bl	8000bf8 <__aeabi_d2f>
 800297e:	4603      	mov	r3, r0
 8002980:	4a59      	ldr	r2, [pc, #356]	; (8002ae8 <main+0x1b58>)
 8002982:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "V Low :%.1f\r\n",VLow_Square);
 8002984:	4b58      	ldr	r3, [pc, #352]	; (8002ae8 <main+0x1b58>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fde5 	bl	8000558 <__aeabi_f2d>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4957      	ldr	r1, [pc, #348]	; (8002af0 <main+0x1b60>)
 8002994:	4857      	ldr	r0, [pc, #348]	; (8002af4 <main+0x1b64>)
 8002996:	f005 fb03 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 800299a:	4856      	ldr	r0, [pc, #344]	; (8002af4 <main+0x1b64>)
 800299c:	f7fd fc20 	bl	80001e0 <strlen>
 80029a0:	4603      	mov	r3, r0
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a8:	4952      	ldr	r1, [pc, #328]	; (8002af4 <main+0x1b64>)
 80029aa:	4853      	ldr	r0, [pc, #332]	; (8002af8 <main+0x1b68>)
 80029ac:	f004 f841 	bl	8006a32 <HAL_UART_Transmit>
					break;
 80029b0:	e093      	b.n	8002ada <main+0x1b4a>
				case 'r':
					if (VLow_Square<0.1){
 80029b2:	4b4d      	ldr	r3, [pc, #308]	; (8002ae8 <main+0x1b58>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fdce 	bl	8000558 <__aeabi_f2d>
 80029bc:	a348      	add	r3, pc, #288	; (adr r3, 8002ae0 <main+0x1b50>)
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	f7fe f893 	bl	8000aec <__aeabi_dcmplt>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <main+0x1a46>
						VLow_Square=0;
 80029cc:	4b46      	ldr	r3, [pc, #280]	; (8002ae8 <main+0x1b58>)
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e012      	b.n	80029fc <main+0x1a6c>
					}
					else{
						VLow_Square -=0.1;
 80029d6:	4b44      	ldr	r3, [pc, #272]	; (8002ae8 <main+0x1b58>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fdbc 	bl	8000558 <__aeabi_f2d>
 80029e0:	a33f      	add	r3, pc, #252	; (adr r3, 8002ae0 <main+0x1b50>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fd fc57 	bl	8000298 <__aeabi_dsub>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	f7fe f901 	bl	8000bf8 <__aeabi_d2f>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4a3b      	ldr	r2, [pc, #236]	; (8002ae8 <main+0x1b58>)
 80029fa:	6013      	str	r3, [r2, #0]
					}
					sprintf(Menu, "V Low :%.1f\r\n",VLow_Square);
 80029fc:	4b3a      	ldr	r3, [pc, #232]	; (8002ae8 <main+0x1b58>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fda9 	bl	8000558 <__aeabi_f2d>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4939      	ldr	r1, [pc, #228]	; (8002af0 <main+0x1b60>)
 8002a0c:	4839      	ldr	r0, [pc, #228]	; (8002af4 <main+0x1b64>)
 8002a0e:	f005 fac7 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002a12:	4838      	ldr	r0, [pc, #224]	; (8002af4 <main+0x1b64>)
 8002a14:	f7fd fbe4 	bl	80001e0 <strlen>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a20:	4934      	ldr	r1, [pc, #208]	; (8002af4 <main+0x1b64>)
 8002a22:	4835      	ldr	r0, [pc, #212]	; (8002af8 <main+0x1b68>)
 8002a24:	f004 f805 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8002a28:	e057      	b.n	8002ada <main+0x1b4a>



				case 'p':
					sprintf(Menu, "Frequency of Sawtooth Wave :%.1f\r\n",Freq_Square);
 8002a2a:	4b34      	ldr	r3, [pc, #208]	; (8002afc <main+0x1b6c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd fd92 	bl	8000558 <__aeabi_f2d>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4931      	ldr	r1, [pc, #196]	; (8002b00 <main+0x1b70>)
 8002a3a:	482e      	ldr	r0, [pc, #184]	; (8002af4 <main+0x1b64>)
 8002a3c:	f005 fab0 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002a40:	482c      	ldr	r0, [pc, #176]	; (8002af4 <main+0x1b64>)
 8002a42:	f7fd fbcd 	bl	80001e0 <strlen>
 8002a46:	4603      	mov	r3, r0
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4e:	4929      	ldr	r1, [pc, #164]	; (8002af4 <main+0x1b64>)
 8002a50:	4829      	ldr	r0, [pc, #164]	; (8002af8 <main+0x1b68>)
 8002a52:	f003 ffee 	bl	8006a32 <HAL_UART_Transmit>
					sprintf(Menu, "V High :%.1f\r\n",VHigh_Square);
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <main+0x1b5c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fd7c 	bl	8000558 <__aeabi_f2d>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4927      	ldr	r1, [pc, #156]	; (8002b04 <main+0x1b74>)
 8002a66:	4823      	ldr	r0, [pc, #140]	; (8002af4 <main+0x1b64>)
 8002a68:	f005 fa9a 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002a6c:	4821      	ldr	r0, [pc, #132]	; (8002af4 <main+0x1b64>)
 8002a6e:	f7fd fbb7 	bl	80001e0 <strlen>
 8002a72:	4603      	mov	r3, r0
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7a:	491e      	ldr	r1, [pc, #120]	; (8002af4 <main+0x1b64>)
 8002a7c:	481e      	ldr	r0, [pc, #120]	; (8002af8 <main+0x1b68>)
 8002a7e:	f003 ffd8 	bl	8006a32 <HAL_UART_Transmit>
					sprintf(Menu, "V Low :%.1f\r\n",VLow_Square);
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <main+0x1b58>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fd66 	bl	8000558 <__aeabi_f2d>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4917      	ldr	r1, [pc, #92]	; (8002af0 <main+0x1b60>)
 8002a92:	4818      	ldr	r0, [pc, #96]	; (8002af4 <main+0x1b64>)
 8002a94:	f005 fa84 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002a98:	4816      	ldr	r0, [pc, #88]	; (8002af4 <main+0x1b64>)
 8002a9a:	f7fd fba1 	bl	80001e0 <strlen>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa6:	4913      	ldr	r1, [pc, #76]	; (8002af4 <main+0x1b64>)
 8002aa8:	4813      	ldr	r0, [pc, #76]	; (8002af8 <main+0x1b68>)
 8002aaa:	f003 ffc2 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8002aae:	e014      	b.n	8002ada <main+0x1b4a>



				case 'x':
					State = Start_Menu;
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <main+0x1b78>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
					break;
 8002ab6:	e010      	b.n	8002ada <main+0x1b4a>
				default:
					sprintf(Menu, "Error!\r\n");
 8002ab8:	4914      	ldr	r1, [pc, #80]	; (8002b0c <main+0x1b7c>)
 8002aba:	480e      	ldr	r0, [pc, #56]	; (8002af4 <main+0x1b64>)
 8002abc:	f005 fa70 	bl	8007fa0 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), 1000);
 8002ac0:	480c      	ldr	r0, [pc, #48]	; (8002af4 <main+0x1b64>)
 8002ac2:	f7fd fb8d 	bl	80001e0 <strlen>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ace:	4909      	ldr	r1, [pc, #36]	; (8002af4 <main+0x1b64>)
 8002ad0:	4809      	ldr	r0, [pc, #36]	; (8002af8 <main+0x1b68>)
 8002ad2:	f003 ffae 	bl	8006a32 <HAL_UART_Transmit>
					break;
 8002ad6:	e000      	b.n	8002ada <main+0x1b4a>
					break;
 8002ad8:	bf00      	nop
					}
				break;
 8002ada:	bf00      	nop
	{
 8002adc:	f7fe ba7f 	b.w	8000fde <main+0x4e>
 8002ae0:	9999999a 	.word	0x9999999a
 8002ae4:	3fb99999 	.word	0x3fb99999
 8002ae8:	2000022c 	.word	0x2000022c
 8002aec:	20000014 	.word	0x20000014
 8002af0:	0800b638 	.word	0x0800b638
 8002af4:	20000288 	.word	0x20000288
 8002af8:	20000818 	.word	0x20000818
 8002afc:	2000000c 	.word	0x2000000c
 8002b00:	0800b604 	.word	0x0800b604
 8002b04:	0800b628 	.word	0x0800b628
 8002b08:	20000001 	.word	0x20000001
 8002b0c:	0800b648 	.word	0x0800b648

08002b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b094      	sub	sp, #80	; 0x50
 8002b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b16:	f107 0320 	add.w	r3, r7, #32
 8002b1a:	2230      	movs	r2, #48	; 0x30
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 fdcc 	bl	80076bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <SystemClock_Config+0xc8>)
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <SystemClock_Config+0xc8>)
 8002b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b42:	6413      	str	r3, [r2, #64]	; 0x40
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <SystemClock_Config+0xc8>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b50:	2300      	movs	r3, #0
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <SystemClock_Config+0xcc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a20      	ldr	r2, [pc, #128]	; (8002bdc <SystemClock_Config+0xcc>)
 8002b5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <SystemClock_Config+0xcc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b70:	2301      	movs	r3, #1
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b74:	2310      	movs	r3, #16
 8002b76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b80:	2308      	movs	r3, #8
 8002b82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002b84:	2364      	movs	r3, #100	; 0x64
 8002b86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b90:	f107 0320 	add.w	r3, r7, #32
 8002b94:	4618      	mov	r0, r3
 8002b96:	f002 fa4b 	bl	8005030 <HAL_RCC_OscConfig>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ba0:	f000 fac6 	bl	8003130 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ba4:	230f      	movs	r3, #15
 8002ba6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002bba:	f107 030c 	add.w	r3, r7, #12
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fcad 	bl	8005520 <HAL_RCC_ClockConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002bcc:	f000 fab0 	bl	8003130 <Error_Handler>
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	3750      	adds	r7, #80	; 0x50
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40007000 	.word	0x40007000

08002be0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002be6:	463b      	mov	r3, r7
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002bf4:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <MX_ADC1_Init+0xa0>)
 8002bf6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002bf8:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002bfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c00:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002c1a:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002c24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c44:	480d      	ldr	r0, [pc, #52]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002c46:	f000 fdd3 	bl	80037f0 <HAL_ADC_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002c50:	f000 fa6e 	bl	8003130 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c60:	463b      	mov	r3, r7
 8002c62:	4619      	mov	r1, r3
 8002c64:	4805      	ldr	r0, [pc, #20]	; (8002c7c <MX_ADC1_Init+0x9c>)
 8002c66:	f001 f85f 	bl	8003d28 <HAL_ADC_ConfigChannel>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002c70:	f000 fa5e 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000728 	.word	0x20000728
 8002c80:	40012000 	.word	0x40012000

08002c84 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <MX_SPI3_Init+0x68>)
 8002c8a:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <MX_SPI3_Init+0x6c>)
 8002c8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002c8e:	4b17      	ldr	r3, [pc, #92]	; (8002cec <MX_SPI3_Init+0x68>)
 8002c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c94:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <MX_SPI3_Init+0x68>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <MX_SPI3_Init+0x68>)
 8002c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ca2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <MX_SPI3_Init+0x68>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <MX_SPI3_Init+0x68>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <MX_SPI3_Init+0x68>)
 8002cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <MX_SPI3_Init+0x68>)
 8002cba:	2208      	movs	r2, #8
 8002cbc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <MX_SPI3_Init+0x68>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <MX_SPI3_Init+0x68>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <MX_SPI3_Init+0x68>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <MX_SPI3_Init+0x68>)
 8002cd2:	220a      	movs	r2, #10
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002cd6:	4805      	ldr	r0, [pc, #20]	; (8002cec <MX_SPI3_Init+0x68>)
 8002cd8:	f002 fe1e 	bl	8005918 <HAL_SPI_Init>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8002ce2:	f000 fa25 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200006d0 	.word	0x200006d0
 8002cf0:	40003c00 	.word	0x40003c00

08002cf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cfa:	f107 0308 	add.w	r3, r7, #8
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d08:	463b      	mov	r3, r7
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d10:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <MX_TIM3_Init+0x90>)
 8002d12:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <MX_TIM3_Init+0x94>)
 8002d14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <MX_TIM3_Init+0x90>)
 8002d18:	2263      	movs	r2, #99	; 0x63
 8002d1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <MX_TIM3_Init+0x90>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <MX_TIM3_Init+0x90>)
 8002d24:	2264      	movs	r2, #100	; 0x64
 8002d26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <MX_TIM3_Init+0x90>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <MX_TIM3_Init+0x90>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d34:	4813      	ldr	r0, [pc, #76]	; (8002d84 <MX_TIM3_Init+0x90>)
 8002d36:	f003 f993 	bl	8006060 <HAL_TIM_Base_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002d40:	f000 f9f6 	bl	8003130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d4a:	f107 0308 	add.w	r3, r7, #8
 8002d4e:	4619      	mov	r1, r3
 8002d50:	480c      	ldr	r0, [pc, #48]	; (8002d84 <MX_TIM3_Init+0x90>)
 8002d52:	f003 fb99 	bl	8006488 <HAL_TIM_ConfigClockSource>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002d5c:	f000 f9e8 	bl	8003130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d60:	2320      	movs	r3, #32
 8002d62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d68:	463b      	mov	r3, r7
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4805      	ldr	r0, [pc, #20]	; (8002d84 <MX_TIM3_Init+0x90>)
 8002d6e:	f003 fd91 	bl	8006894 <HAL_TIMEx_MasterConfigSynchronization>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002d78:	f000 f9da 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d7c:	bf00      	nop
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000688 	.word	0x20000688
 8002d88:	40000400 	.word	0x40000400

08002d8c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <MX_TIM11_Init+0x40>)
 8002d92:	4a0f      	ldr	r2, [pc, #60]	; (8002dd0 <MX_TIM11_Init+0x44>)
 8002d94:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002d96:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <MX_TIM11_Init+0x40>)
 8002d98:	2263      	movs	r2, #99	; 0x63
 8002d9a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <MX_TIM11_Init+0x40>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <MX_TIM11_Init+0x40>)
 8002da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002da8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <MX_TIM11_Init+0x40>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <MX_TIM11_Init+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002db6:	4805      	ldr	r0, [pc, #20]	; (8002dcc <MX_TIM11_Init+0x40>)
 8002db8:	f003 f952 	bl	8006060 <HAL_TIM_Base_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002dc2:	f000 f9b5 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000770 	.word	0x20000770
 8002dd0:	40014800 	.word	0x40014800

08002dd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002dda:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <MX_USART2_UART_Init+0x50>)
 8002ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002dfa:	220c      	movs	r2, #12
 8002dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e0a:	4805      	ldr	r0, [pc, #20]	; (8002e20 <MX_USART2_UART_Init+0x4c>)
 8002e0c:	f003 fdc4 	bl	8006998 <HAL_UART_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e16:	f000 f98b 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000818 	.word	0x20000818
 8002e24:	40004400 	.word	0x40004400

08002e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <MX_DMA_Init+0x3c>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <MX_DMA_Init+0x3c>)
 8002e38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <MX_DMA_Init+0x3c>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2038      	movs	r0, #56	; 0x38
 8002e50:	f001 faff 	bl	8004452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002e54:	2038      	movs	r0, #56	; 0x38
 8002e56:	f001 fb18 	bl	800448a <HAL_NVIC_EnableIRQ>

}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800

08002e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	4b44      	ldr	r3, [pc, #272]	; (8002f94 <MX_GPIO_Init+0x12c>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a43      	ldr	r2, [pc, #268]	; (8002f94 <MX_GPIO_Init+0x12c>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <MX_GPIO_Init+0x12c>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <MX_GPIO_Init+0x12c>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a3c      	ldr	r2, [pc, #240]	; (8002f94 <MX_GPIO_Init+0x12c>)
 8002ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <MX_GPIO_Init+0x12c>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <MX_GPIO_Init+0x12c>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a35      	ldr	r2, [pc, #212]	; (8002f94 <MX_GPIO_Init+0x12c>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <MX_GPIO_Init+0x12c>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	607b      	str	r3, [r7, #4]
 8002ed6:	4b2f      	ldr	r3, [pc, #188]	; (8002f94 <MX_GPIO_Init+0x12c>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a2e      	ldr	r2, [pc, #184]	; (8002f94 <MX_GPIO_Init+0x12c>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <MX_GPIO_Init+0x12c>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	607b      	str	r3, [r7, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2120      	movs	r1, #32
 8002ef2:	4829      	ldr	r0, [pc, #164]	; (8002f98 <MX_GPIO_Init+0x130>)
 8002ef4:	f002 f882 	bl	8004ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002efe:	4827      	ldr	r0, [pc, #156]	; (8002f9c <MX_GPIO_Init+0x134>)
 8002f00:	f002 f87c 	bl	8004ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8002f04:	2201      	movs	r2, #1
 8002f06:	2180      	movs	r1, #128	; 0x80
 8002f08:	4825      	ldr	r0, [pc, #148]	; (8002fa0 <MX_GPIO_Init+0x138>)
 8002f0a:	f002 f877 	bl	8004ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f14:	4820      	ldr	r0, [pc, #128]	; (8002f98 <MX_GPIO_Init+0x130>)
 8002f16:	f002 f871 	bl	8004ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <MX_GPIO_Init+0x13c>)
 8002f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	481c      	ldr	r0, [pc, #112]	; (8002fa0 <MX_GPIO_Init+0x138>)
 8002f30:	f001 fec8 	bl	8004cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8002f34:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4812      	ldr	r0, [pc, #72]	; (8002f98 <MX_GPIO_Init+0x130>)
 8002f4e:	f001 feb9 	bl	8004cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8002f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	4619      	mov	r1, r3
 8002f6a:	480c      	ldr	r0, [pc, #48]	; (8002f9c <MX_GPIO_Init+0x134>)
 8002f6c:	f001 feaa 	bl	8004cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f74:	2301      	movs	r3, #1
 8002f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8002f80:	f107 0314 	add.w	r3, r7, #20
 8002f84:	4619      	mov	r1, r3
 8002f86:	4806      	ldr	r0, [pc, #24]	; (8002fa0 <MX_GPIO_Init+0x138>)
 8002f88:	f001 fe9c 	bl	8004cc4 <HAL_GPIO_Init>

}
 8002f8c:	bf00      	nop
 8002f8e:	3728      	adds	r7, #40	; 0x28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020000 	.word	0x40020000
 8002f9c:	40020400 	.word	0x40020400
 8002fa0:	40020800 	.word	0x40020800
 8002fa4:	10210000 	.word	0x10210000

08002fa8 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	460a      	mov	r2, r1
 8002fb2:	71fb      	strb	r3, [r7, #7]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8002fb8:	88bb      	ldrh	r3, [r7, #4]
 8002fba:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	031b      	lsls	r3, r3, #12
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fce:	4807      	ldr	r0, [pc, #28]	; (8002fec <MCP4922SetOutput+0x44>)
 8002fd0:	f002 f814 	bl	8004ffc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4804      	ldr	r0, [pc, #16]	; (8002ff0 <MCP4922SetOutput+0x48>)
 8002fde:	f002 fd25 	bl	8005a2c <HAL_SPI_Transmit_IT>
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	200006d0 	.word	0x200006d0

08002ff4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a06      	ldr	r2, [pc, #24]	; (8003018 <HAL_SPI_TxCpltCallback+0x24>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d105      	bne.n	8003010 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8003004:	2201      	movs	r2, #1
 8003006:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800300a:	4804      	ldr	r0, [pc, #16]	; (800301c <HAL_SPI_TxCpltCallback+0x28>)
 800300c:	f001 fff6 	bl	8004ffc <HAL_GPIO_WritePin>
	}
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	200006d0 	.word	0x200006d0
 800301c:	40020400 	.word	0x40020400

08003020 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b4b0      	push	{r4, r5, r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a0a      	ldr	r2, [pc, #40]	; (8003054 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d10c      	bne.n	800304a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800303a:	f04f 0100 	mov.w	r1, #0
 800303e:	1814      	adds	r4, r2, r0
 8003040:	eb43 0501 	adc.w	r5, r3, r1
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003046:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bcb0      	pop	{r4, r5, r7}
 8003052:	4770      	bx	lr
 8003054:	20000770 	.word	0x20000770
 8003058:	20000220 	.word	0x20000220

0800305c <micros>:

inline uint64_t micros()
{
 800305c:	b4b0      	push	{r4, r5, r7}
 800305e:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <micros+0x2c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	4618      	mov	r0, r3
 8003068:	f04f 0100 	mov.w	r1, #0
 800306c:	4b07      	ldr	r3, [pc, #28]	; (800308c <micros+0x30>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	1884      	adds	r4, r0, r2
 8003074:	eb41 0503 	adc.w	r5, r1, r3
 8003078:	4622      	mov	r2, r4
 800307a:	462b      	mov	r3, r5
}
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	bcb0      	pop	{r4, r5, r7}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000770 	.word	0x20000770
 800308c:	20000220 	.word	0x20000220

08003090 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8003096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800309a:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <UARTRecieveIT+0x54>)
 800309e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <UARTRecieveIT+0x54>)
 80030a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <UARTRecieveIT+0x58>)
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d010      	beq.n	80030d4 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <UARTRecieveIT+0x58>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <UARTRecieveIT+0x5c>)
 80030b8:	5cd3      	ldrb	r3, [r2, r3]
 80030ba:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <UARTRecieveIT+0x58>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <UARTRecieveIT+0x54>)
 80030c4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80030c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80030ca:	fb02 f201 	mul.w	r2, r2, r1
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	4a05      	ldr	r2, [pc, #20]	; (80030e8 <UARTRecieveIT+0x58>)
 80030d2:	6013      	str	r3, [r2, #0]
	}
	return data;
 80030d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	20000818 	.word	0x20000818
 80030e8:	20000678 	.word	0x20000678
 80030ec:	20000268 	.word	0x20000268

080030f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 80030f8:	4a09      	ldr	r2, [pc, #36]	; (8003120 <HAL_UART_RxCpltCallback+0x30>)
 80030fa:	490a      	ldr	r1, [pc, #40]	; (8003124 <HAL_UART_RxCpltCallback+0x34>)
 80030fc:	480a      	ldr	r0, [pc, #40]	; (8003128 <HAL_UART_RxCpltCallback+0x38>)
 80030fe:	f004 ff4f 	bl	8007fa0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8003102:	4809      	ldr	r0, [pc, #36]	; (8003128 <HAL_UART_RxCpltCallback+0x38>)
 8003104:	f7fd f86c 	bl	80001e0 <strlen>
 8003108:	4603      	mov	r3, r0
 800310a:	b29a      	uxth	r2, r3
 800310c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003110:	4905      	ldr	r1, [pc, #20]	; (8003128 <HAL_UART_RxCpltCallback+0x38>)
 8003112:	4806      	ldr	r0, [pc, #24]	; (800312c <HAL_UART_RxCpltCallback+0x3c>)
 8003114:	f003 fc8d 	bl	8006a32 <HAL_UART_Transmit>
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000268 	.word	0x20000268
 8003124:	0800b838 	.word	0x0800b838
 8003128:	20000248 	.word	0x20000248
 800312c:	20000818 	.word	0x20000818

08003130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003134:	b672      	cpsid	i
}
 8003136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003138:	e7fe      	b.n	8003138 <Error_Handler+0x8>
	...

0800313c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_MspInit+0x4c>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	4a0f      	ldr	r2, [pc, #60]	; (8003188 <HAL_MspInit+0x4c>)
 800314c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003150:	6453      	str	r3, [r2, #68]	; 0x44
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <HAL_MspInit+0x4c>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_MspInit+0x4c>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	4a08      	ldr	r2, [pc, #32]	; (8003188 <HAL_MspInit+0x4c>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316c:	6413      	str	r3, [r2, #64]	; 0x40
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_MspInit+0x4c>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800317a:	2007      	movs	r0, #7
 800317c:	f001 f95e 	bl	800443c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800

0800318c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a33      	ldr	r2, [pc, #204]	; (8003278 <HAL_ADC_MspInit+0xec>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d15f      	bne.n	800326e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	4b32      	ldr	r3, [pc, #200]	; (800327c <HAL_ADC_MspInit+0xf0>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	4a31      	ldr	r2, [pc, #196]	; (800327c <HAL_ADC_MspInit+0xf0>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	6453      	str	r3, [r2, #68]	; 0x44
 80031be:	4b2f      	ldr	r3, [pc, #188]	; (800327c <HAL_ADC_MspInit+0xf0>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b2b      	ldr	r3, [pc, #172]	; (800327c <HAL_ADC_MspInit+0xf0>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a2a      	ldr	r2, [pc, #168]	; (800327c <HAL_ADC_MspInit+0xf0>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b28      	ldr	r3, [pc, #160]	; (800327c <HAL_ADC_MspInit+0xf0>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031e6:	2301      	movs	r3, #1
 80031e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ea:	2303      	movs	r3, #3
 80031ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f2:	f107 0314 	add.w	r3, r7, #20
 80031f6:	4619      	mov	r1, r3
 80031f8:	4821      	ldr	r0, [pc, #132]	; (8003280 <HAL_ADC_MspInit+0xf4>)
 80031fa:	f001 fd63 	bl	8004cc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80031fe:	4b21      	ldr	r3, [pc, #132]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 8003200:	4a21      	ldr	r2, [pc, #132]	; (8003288 <HAL_ADC_MspInit+0xfc>)
 8003202:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003204:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 8003206:	2200      	movs	r2, #0
 8003208:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800320a:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003210:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003216:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 8003218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800321c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800321e:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 8003220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003224:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003226:	4b17      	ldr	r3, [pc, #92]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 8003228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800322c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 8003230:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003234:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003236:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 8003238:	2200      	movs	r2, #0
 800323a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800323c:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 800323e:	2200      	movs	r2, #0
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003242:	4810      	ldr	r0, [pc, #64]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 8003244:	f001 f93c 	bl	80044c0 <HAL_DMA_Init>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800324e:	f7ff ff6f 	bl	8003130 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
 8003258:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <HAL_ADC_MspInit+0xf8>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800325e:	2200      	movs	r2, #0
 8003260:	2100      	movs	r1, #0
 8003262:	2012      	movs	r0, #18
 8003264:	f001 f8f5 	bl	8004452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003268:	2012      	movs	r0, #18
 800326a:	f001 f90e 	bl	800448a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800326e:	bf00      	nop
 8003270:	3728      	adds	r7, #40	; 0x28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40012000 	.word	0x40012000
 800327c:	40023800 	.word	0x40023800
 8003280:	40020000 	.word	0x40020000
 8003284:	200007b8 	.word	0x200007b8
 8003288:	40026410 	.word	0x40026410

0800328c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <HAL_SPI_MspInit+0x94>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d133      	bne.n	8003316 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_SPI_MspInit+0x98>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <HAL_SPI_MspInit+0x98>)
 80032b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
 80032be:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_SPI_MspInit+0x98>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <HAL_SPI_MspInit+0x98>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a14      	ldr	r2, [pc, #80]	; (8003324 <HAL_SPI_MspInit+0x98>)
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b12      	ldr	r3, [pc, #72]	; (8003324 <HAL_SPI_MspInit+0x98>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80032e6:	2338      	movs	r3, #56	; 0x38
 80032e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ea:	2302      	movs	r3, #2
 80032ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f2:	2303      	movs	r3, #3
 80032f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80032f6:	2306      	movs	r3, #6
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fa:	f107 0314 	add.w	r3, r7, #20
 80032fe:	4619      	mov	r1, r3
 8003300:	4809      	ldr	r0, [pc, #36]	; (8003328 <HAL_SPI_MspInit+0x9c>)
 8003302:	f001 fcdf 	bl	8004cc4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003306:	2200      	movs	r2, #0
 8003308:	2100      	movs	r1, #0
 800330a:	2033      	movs	r0, #51	; 0x33
 800330c:	f001 f8a1 	bl	8004452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003310:	2033      	movs	r0, #51	; 0x33
 8003312:	f001 f8ba 	bl	800448a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003316:	bf00      	nop
 8003318:	3728      	adds	r7, #40	; 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40003c00 	.word	0x40003c00
 8003324:	40023800 	.word	0x40023800
 8003328:	40020400 	.word	0x40020400

0800332c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a18      	ldr	r2, [pc, #96]	; (800339c <HAL_TIM_Base_MspInit+0x70>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10e      	bne.n	800335c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <HAL_TIM_Base_MspInit+0x74>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <HAL_TIM_Base_MspInit+0x74>)
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	6413      	str	r3, [r2, #64]	; 0x40
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <HAL_TIM_Base_MspInit+0x74>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800335a:	e01a      	b.n	8003392 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <HAL_TIM_Base_MspInit+0x78>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d115      	bne.n	8003392 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <HAL_TIM_Base_MspInit+0x74>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <HAL_TIM_Base_MspInit+0x74>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003374:	6453      	str	r3, [r2, #68]	; 0x44
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_TIM_Base_MspInit+0x74>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	2100      	movs	r1, #0
 8003386:	201a      	movs	r0, #26
 8003388:	f001 f863 	bl	8004452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800338c:	201a      	movs	r0, #26
 800338e:	f001 f87c 	bl	800448a <HAL_NVIC_EnableIRQ>
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40000400 	.word	0x40000400
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40014800 	.word	0x40014800

080033a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b0:	f107 0314 	add.w	r3, r7, #20
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	; (800343c <HAL_UART_MspInit+0x94>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d133      	bne.n	8003432 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <HAL_UART_MspInit+0x98>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <HAL_UART_MspInit+0x98>)
 80033d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d8:	6413      	str	r3, [r2, #64]	; 0x40
 80033da:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_UART_MspInit+0x98>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_UART_MspInit+0x98>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_UART_MspInit+0x98>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_UART_MspInit+0x98>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003402:	230c      	movs	r3, #12
 8003404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003406:	2302      	movs	r3, #2
 8003408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340e:	2303      	movs	r3, #3
 8003410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003412:	2307      	movs	r3, #7
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003416:	f107 0314 	add.w	r3, r7, #20
 800341a:	4619      	mov	r1, r3
 800341c:	4809      	ldr	r0, [pc, #36]	; (8003444 <HAL_UART_MspInit+0x9c>)
 800341e:	f001 fc51 	bl	8004cc4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003422:	2200      	movs	r2, #0
 8003424:	2100      	movs	r1, #0
 8003426:	2026      	movs	r0, #38	; 0x26
 8003428:	f001 f813 	bl	8004452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800342c:	2026      	movs	r0, #38	; 0x26
 800342e:	f001 f82c 	bl	800448a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003432:	bf00      	nop
 8003434:	3728      	adds	r7, #40	; 0x28
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40004400 	.word	0x40004400
 8003440:	40023800 	.word	0x40023800
 8003444:	40020000 	.word	0x40020000

08003448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800344c:	e7fe      	b.n	800344c <NMI_Handler+0x4>

0800344e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003452:	e7fe      	b.n	8003452 <HardFault_Handler+0x4>

08003454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003458:	e7fe      	b.n	8003458 <MemManage_Handler+0x4>

0800345a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800345a:	b480      	push	{r7}
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800345e:	e7fe      	b.n	800345e <BusFault_Handler+0x4>

08003460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003464:	e7fe      	b.n	8003464 <UsageFault_Handler+0x4>

08003466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003466:	b480      	push	{r7}
 8003468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003494:	f000 f98c 	bl	80037b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003498:	bf00      	nop
 800349a:	bd80      	pop	{r7, pc}

0800349c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <ADC_IRQHandler+0x10>)
 80034a2:	f000 f9e8 	bl	8003876 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000728 	.word	0x20000728

080034b0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80034b6:	f002 fedf 	bl	8006278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000770 	.word	0x20000770

080034c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034c8:	4802      	ldr	r0, [pc, #8]	; (80034d4 <USART2_IRQHandler+0x10>)
 80034ca:	f003 fb75 	bl	8006bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000818 	.word	0x20000818

080034d8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80034dc:	4802      	ldr	r0, [pc, #8]	; (80034e8 <SPI3_IRQHandler+0x10>)
 80034de:	f002 fb2f 	bl	8005b40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200006d0 	.word	0x200006d0

080034ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034f0:	4802      	ldr	r0, [pc, #8]	; (80034fc <DMA2_Stream0_IRQHandler+0x10>)
 80034f2:	f001 f97d 	bl	80047f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200007b8 	.word	0x200007b8

08003500 <_getpid>:
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
 8003504:	2301      	movs	r3, #1
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <_kill>:
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	f004 f8a5 	bl	8007668 <__errno>
 800351e:	4603      	mov	r3, r0
 8003520:	2216      	movs	r2, #22
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <_exit>:
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	f04f 31ff 	mov.w	r1, #4294967295
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ffe7 	bl	8003510 <_kill>
 8003542:	e7fe      	b.n	8003542 <_exit+0x12>

08003544 <_read>:
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e00a      	b.n	800356c <_read+0x28>
 8003556:	f3af 8000 	nop.w
 800355a:	4601      	mov	r1, r0
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	60ba      	str	r2, [r7, #8]
 8003562:	b2ca      	uxtb	r2, r1
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	dbf0      	blt.n	8003556 <_read+0x12>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_write>:
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e009      	b.n	80035a4 <_write+0x26>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	60ba      	str	r2, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f3af 8000 	nop.w
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3301      	adds	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	dbf1      	blt.n	8003590 <_write+0x12>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_close>:
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <_fstat>:
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035de:	605a      	str	r2, [r3, #4]
 80035e0:	2300      	movs	r3, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <_isatty>:
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	2301      	movs	r3, #1
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <_lseek>:
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	2300      	movs	r3, #0
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <_sbrk>:
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	4a14      	ldr	r2, [pc, #80]	; (800367c <_sbrk+0x5c>)
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <_sbrk+0x60>)
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	4b13      	ldr	r3, [pc, #76]	; (8003684 <_sbrk+0x64>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <_sbrk+0x22>
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <_sbrk+0x64>)
 800363e:	4a12      	ldr	r2, [pc, #72]	; (8003688 <_sbrk+0x68>)
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <_sbrk+0x64>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	429a      	cmp	r2, r3
 800364e:	d207      	bcs.n	8003660 <_sbrk+0x40>
 8003650:	f004 f80a 	bl	8007668 <__errno>
 8003654:	4603      	mov	r3, r0
 8003656:	220c      	movs	r2, #12
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f04f 33ff 	mov.w	r3, #4294967295
 800365e:	e009      	b.n	8003674 <_sbrk+0x54>
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <_sbrk+0x64>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <_sbrk+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	4a05      	ldr	r2, [pc, #20]	; (8003684 <_sbrk+0x64>)
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20020000 	.word	0x20020000
 8003680:	00000400 	.word	0x00000400
 8003684:	2000067c 	.word	0x2000067c
 8003688:	20000870 	.word	0x20000870

0800368c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003690:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <SystemInit+0x28>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <SystemInit+0x28>)
 8003698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800369c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <SystemInit+0x28>)
 80036a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036a6:	609a      	str	r2, [r3, #8]
#endif
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <Reset_Handler>:
 80036b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036f0 <LoopFillZerobss+0x14>
 80036bc:	2100      	movs	r1, #0
 80036be:	e003      	b.n	80036c8 <LoopCopyDataInit>

080036c0 <CopyDataInit>:
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <LoopFillZerobss+0x18>)
 80036c2:	585b      	ldr	r3, [r3, r1]
 80036c4:	5043      	str	r3, [r0, r1]
 80036c6:	3104      	adds	r1, #4

080036c8 <LoopCopyDataInit>:
 80036c8:	480b      	ldr	r0, [pc, #44]	; (80036f8 <LoopFillZerobss+0x1c>)
 80036ca:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <LoopFillZerobss+0x20>)
 80036cc:	1842      	adds	r2, r0, r1
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d3f6      	bcc.n	80036c0 <CopyDataInit>
 80036d2:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <LoopFillZerobss+0x24>)
 80036d4:	e002      	b.n	80036dc <LoopFillZerobss>

080036d6 <FillZerobss>:
 80036d6:	2300      	movs	r3, #0
 80036d8:	f842 3b04 	str.w	r3, [r2], #4

080036dc <LoopFillZerobss>:
 80036dc:	4b09      	ldr	r3, [pc, #36]	; (8003704 <LoopFillZerobss+0x28>)
 80036de:	429a      	cmp	r2, r3
 80036e0:	d3f9      	bcc.n	80036d6 <FillZerobss>
 80036e2:	f7ff ffd3 	bl	800368c <SystemInit>
 80036e6:	f003 ffc5 	bl	8007674 <__libc_init_array>
 80036ea:	f7fd fc51 	bl	8000f90 <main>
 80036ee:	4770      	bx	lr
 80036f0:	20020000 	.word	0x20020000
 80036f4:	0800be38 	.word	0x0800be38
 80036f8:	20000000 	.word	0x20000000
 80036fc:	200001f8 	.word	0x200001f8
 8003700:	200001f8 	.word	0x200001f8
 8003704:	20000870 	.word	0x20000870

08003708 <DMA1_Stream0_IRQHandler>:
 8003708:	e7fe      	b.n	8003708 <DMA1_Stream0_IRQHandler>
	...

0800370c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <HAL_Init+0x40>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0d      	ldr	r2, [pc, #52]	; (800374c <HAL_Init+0x40>)
 8003716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800371a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_Init+0x40>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0a      	ldr	r2, [pc, #40]	; (800374c <HAL_Init+0x40>)
 8003722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <HAL_Init+0x40>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a07      	ldr	r2, [pc, #28]	; (800374c <HAL_Init+0x40>)
 800372e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003734:	2003      	movs	r0, #3
 8003736:	f000 fe81 	bl	800443c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800373a:	2000      	movs	r0, #0
 800373c:	f000 f808 	bl	8003750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003740:	f7ff fcfc 	bl	800313c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023c00 	.word	0x40023c00

08003750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_InitTick+0x54>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_InitTick+0x58>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	4619      	mov	r1, r3
 8003762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003766:	fbb3 f3f1 	udiv	r3, r3, r1
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fe99 	bl	80044a6 <HAL_SYSTICK_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e00e      	b.n	800379c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b0f      	cmp	r3, #15
 8003782:	d80a      	bhi.n	800379a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003784:	2200      	movs	r2, #0
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	f000 fe61 	bl	8004452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003790:	4a06      	ldr	r2, [pc, #24]	; (80037ac <HAL_InitTick+0x5c>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	2000001c 	.word	0x2000001c
 80037a8:	20000024 	.word	0x20000024
 80037ac:	20000020 	.word	0x20000020

080037b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_IncTick+0x20>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_IncTick+0x24>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4413      	add	r3, r2
 80037c0:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <HAL_IncTick+0x24>)
 80037c2:	6013      	str	r3, [r2, #0]
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000024 	.word	0x20000024
 80037d4:	2000085c 	.word	0x2000085c

080037d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return uwTick;
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <HAL_GetTick+0x14>)
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	2000085c 	.word	0x2000085c

080037f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e033      	b.n	800386e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff fcbc 	bl	800318c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d118      	bne.n	8003860 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003836:	f023 0302 	bic.w	r3, r3, #2
 800383a:	f043 0202 	orr.w	r2, r3, #2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fba2 	bl	8003f8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
 800385e:	e001      	b.n	8003864 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b02      	cmp	r3, #2
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d049      	beq.n	800394c <HAL_ADC_IRQHandler+0xd6>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d046      	beq.n	800394c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d12b      	bne.n	800393c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d127      	bne.n	800393c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d006      	beq.n	8003908 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003904:	2b00      	cmp	r3, #0
 8003906:	d119      	bne.n	800393c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0220 	bic.w	r2, r2, #32
 8003916:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f9cb 	bl	8003cd8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f06f 0212 	mvn.w	r2, #18
 800394a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b04      	cmp	r3, #4
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d057      	beq.n	8003a2e <HAL_ADC_IRQHandler+0x1b8>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d054      	beq.n	8003a2e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	d105      	bne.n	800399c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d139      	bne.n	8003a1e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d006      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d12b      	bne.n	8003a1e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d124      	bne.n	8003a1e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d11d      	bne.n	8003a1e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d119      	bne.n	8003a1e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d105      	bne.n	8003a1e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f043 0201 	orr.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fc32 	bl	8004288 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 020c 	mvn.w	r2, #12
 8003a2c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	bf0c      	ite	eq
 8003a52:	2301      	moveq	r3, #1
 8003a54:	2300      	movne	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d017      	beq.n	8003a90 <HAL_ADC_IRQHandler+0x21a>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d014      	beq.n	8003a90 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d10d      	bne.n	8003a90 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f93d 	bl	8003d00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0201 	mvn.w	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d015      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x27a>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d012      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f043 0202 	orr.w	r2, r3, #2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f06f 0220 	mvn.w	r2, #32
 8003ade:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f917 	bl	8003d14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f06f 0220 	mvn.w	r2, #32
 8003aee:	601a      	str	r2, [r3, #0]
  }
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_Start_DMA+0x1e>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e0ce      	b.n	8003cb4 <HAL_ADC_Start_DMA+0x1bc>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d018      	beq.n	8003b5e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b3c:	4b5f      	ldr	r3, [pc, #380]	; (8003cbc <HAL_ADC_Start_DMA+0x1c4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a5f      	ldr	r2, [pc, #380]	; (8003cc0 <HAL_ADC_Start_DMA+0x1c8>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	0c9a      	lsrs	r2, r3, #18
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003b50:	e002      	b.n	8003b58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f9      	bne.n	8003b52 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6c:	d107      	bne.n	8003b7e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f040 8086 	bne.w	8003c9a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bcc:	d106      	bne.n	8003bdc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f023 0206 	bic.w	r2, r3, #6
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
 8003bda:	e002      	b.n	8003be2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bea:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <HAL_ADC_Start_DMA+0x1cc>)
 8003bec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	4a35      	ldr	r2, [pc, #212]	; (8003cc8 <HAL_ADC_Start_DMA+0x1d0>)
 8003bf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	4a34      	ldr	r2, [pc, #208]	; (8003ccc <HAL_ADC_Start_DMA+0x1d4>)
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	4a33      	ldr	r2, [pc, #204]	; (8003cd0 <HAL_ADC_Start_DMA+0x1d8>)
 8003c04:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c1e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c2e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	334c      	adds	r3, #76	; 0x4c
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f000 fcec 	bl	800461c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10f      	bne.n	8003c70 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d129      	bne.n	8003cb2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	e020      	b.n	8003cb2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <HAL_ADC_Start_DMA+0x1dc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d11b      	bne.n	8003cb2 <HAL_ADC_Start_DMA+0x1ba>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d114      	bne.n	8003cb2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	e00b      	b.n	8003cb2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0210 	orr.w	r2, r3, #16
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	2000001c 	.word	0x2000001c
 8003cc0:	431bde83 	.word	0x431bde83
 8003cc4:	40012300 	.word	0x40012300
 8003cc8:	08004185 	.word	0x08004185
 8003ccc:	0800423f 	.word	0x0800423f
 8003cd0:	0800425b 	.word	0x0800425b
 8003cd4:	40012000 	.word	0x40012000

08003cd8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x1c>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e113      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x244>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b09      	cmp	r3, #9
 8003d52:	d925      	bls.n	8003da0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68d9      	ldr	r1, [r3, #12]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	4613      	mov	r3, r2
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	4413      	add	r3, r2
 8003d68:	3b1e      	subs	r3, #30
 8003d6a:	2207      	movs	r2, #7
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43da      	mvns	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	400a      	ands	r2, r1
 8003d78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68d9      	ldr	r1, [r3, #12]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4403      	add	r3, r0
 8003d92:	3b1e      	subs	r3, #30
 8003d94:	409a      	lsls	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	60da      	str	r2, [r3, #12]
 8003d9e:	e022      	b.n	8003de6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6919      	ldr	r1, [r3, #16]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	4613      	mov	r3, r2
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4413      	add	r3, r2
 8003db4:	2207      	movs	r2, #7
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6919      	ldr	r1, [r3, #16]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	4403      	add	r3, r0
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b06      	cmp	r3, #6
 8003dec:	d824      	bhi.n	8003e38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3b05      	subs	r3, #5
 8003e00:	221f      	movs	r2, #31
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43da      	mvns	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	400a      	ands	r2, r1
 8003e0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	3b05      	subs	r3, #5
 8003e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	635a      	str	r2, [r3, #52]	; 0x34
 8003e36:	e04c      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b0c      	cmp	r3, #12
 8003e3e:	d824      	bhi.n	8003e8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	3b23      	subs	r3, #35	; 0x23
 8003e52:	221f      	movs	r2, #31
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43da      	mvns	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	400a      	ands	r2, r1
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	4618      	mov	r0, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	3b23      	subs	r3, #35	; 0x23
 8003e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
 8003e88:	e023      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	3b41      	subs	r3, #65	; 0x41
 8003e9c:	221f      	movs	r2, #31
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43da      	mvns	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	4618      	mov	r0, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3b41      	subs	r3, #65	; 0x41
 8003ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ed2:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <HAL_ADC_ConfigChannel+0x250>)
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a28      	ldr	r2, [pc, #160]	; (8003f7c <HAL_ADC_ConfigChannel+0x254>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10f      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x1d8>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b12      	cmp	r3, #18
 8003ee6:	d10b      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_ADC_ConfigChannel+0x254>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d12b      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x23a>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1c      	ldr	r2, [pc, #112]	; (8003f80 <HAL_ADC_ConfigChannel+0x258>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <HAL_ADC_ConfigChannel+0x1f4>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b11      	cmp	r3, #17
 8003f1a:	d122      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a11      	ldr	r2, [pc, #68]	; (8003f80 <HAL_ADC_ConfigChannel+0x258>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d111      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <HAL_ADC_ConfigChannel+0x25c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <HAL_ADC_ConfigChannel+0x260>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	0c9a      	lsrs	r2, r3, #18
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f54:	e002      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f9      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40012300 	.word	0x40012300
 8003f7c:	40012000 	.word	0x40012000
 8003f80:	10000012 	.word	0x10000012
 8003f84:	2000001c 	.word	0x2000001c
 8003f88:	431bde83 	.word	0x431bde83

08003f8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f94:	4b79      	ldr	r3, [pc, #484]	; (800417c <ADC_Init+0x1f0>)
 8003f96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	021a      	lsls	r2, r3, #8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004006:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6899      	ldr	r1, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	4a58      	ldr	r2, [pc, #352]	; (8004180 <ADC_Init+0x1f4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d022      	beq.n	800406a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004032:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6899      	ldr	r1, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004054:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6899      	ldr	r1, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	e00f      	b.n	800408a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004088:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0202 	bic.w	r2, r2, #2
 8004098:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6899      	ldr	r1, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	7e1b      	ldrb	r3, [r3, #24]
 80040a4:	005a      	lsls	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01b      	beq.n	80040f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6859      	ldr	r1, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	3b01      	subs	r3, #1
 80040e4:	035a      	lsls	r2, r3, #13
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	e007      	b.n	8004100 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800410e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	3b01      	subs	r3, #1
 800411c:	051a      	lsls	r2, r3, #20
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004134:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6899      	ldr	r1, [r3, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004142:	025a      	lsls	r2, r3, #9
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6899      	ldr	r1, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	029a      	lsls	r2, r3, #10
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40012300 	.word	0x40012300
 8004180:	0f000001 	.word	0x0f000001

08004184 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800419a:	2b00      	cmp	r3, #0
 800419c:	d13c      	bne.n	8004218 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d12b      	bne.n	8004210 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d127      	bne.n	8004210 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d006      	beq.n	80041dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d119      	bne.n	8004210 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0220 	bic.w	r2, r2, #32
 80041ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f043 0201 	orr.w	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff fd61 	bl	8003cd8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004216:	e00e      	b.n	8004236 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff fd75 	bl	8003d14 <HAL_ADC_ErrorCallback>
}
 800422a:	e004      	b.n	8004236 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff fd4d 	bl	8003cec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2240      	movs	r2, #64	; 0x40
 800426c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f043 0204 	orr.w	r2, r3, #4
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff fd4a 	bl	8003d14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <__NVIC_SetPriorityGrouping+0x44>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042b8:	4013      	ands	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ce:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <__NVIC_SetPriorityGrouping+0x44>)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	60d3      	str	r3, [r2, #12]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	e000ed00 	.word	0xe000ed00

080042e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042e8:	4b04      	ldr	r3, [pc, #16]	; (80042fc <__NVIC_GetPriorityGrouping+0x18>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	0a1b      	lsrs	r3, r3, #8
 80042ee:	f003 0307 	and.w	r3, r3, #7
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	e000ed00 	.word	0xe000ed00

08004300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	2b00      	cmp	r3, #0
 8004310:	db0b      	blt.n	800432a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	f003 021f 	and.w	r2, r3, #31
 8004318:	4907      	ldr	r1, [pc, #28]	; (8004338 <__NVIC_EnableIRQ+0x38>)
 800431a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2001      	movs	r0, #1
 8004322:	fa00 f202 	lsl.w	r2, r0, r2
 8004326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	e000e100 	.word	0xe000e100

0800433c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	6039      	str	r1, [r7, #0]
 8004346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434c:	2b00      	cmp	r3, #0
 800434e:	db0a      	blt.n	8004366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	b2da      	uxtb	r2, r3
 8004354:	490c      	ldr	r1, [pc, #48]	; (8004388 <__NVIC_SetPriority+0x4c>)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	0112      	lsls	r2, r2, #4
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	440b      	add	r3, r1
 8004360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004364:	e00a      	b.n	800437c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	4908      	ldr	r1, [pc, #32]	; (800438c <__NVIC_SetPriority+0x50>)
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	3b04      	subs	r3, #4
 8004374:	0112      	lsls	r2, r2, #4
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	440b      	add	r3, r1
 800437a:	761a      	strb	r2, [r3, #24]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	e000e100 	.word	0xe000e100
 800438c:	e000ed00 	.word	0xe000ed00

08004390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004390:	b480      	push	{r7}
 8004392:	b089      	sub	sp, #36	; 0x24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f1c3 0307 	rsb	r3, r3, #7
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	bf28      	it	cs
 80043ae:	2304      	movcs	r3, #4
 80043b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3304      	adds	r3, #4
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d902      	bls.n	80043c0 <NVIC_EncodePriority+0x30>
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3b03      	subs	r3, #3
 80043be:	e000      	b.n	80043c2 <NVIC_EncodePriority+0x32>
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c4:	f04f 32ff 	mov.w	r2, #4294967295
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43da      	mvns	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	401a      	ands	r2, r3
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043d8:	f04f 31ff 	mov.w	r1, #4294967295
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	fa01 f303 	lsl.w	r3, r1, r3
 80043e2:	43d9      	mvns	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e8:	4313      	orrs	r3, r2
         );
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3724      	adds	r7, #36	; 0x24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
	...

080043f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3b01      	subs	r3, #1
 8004404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004408:	d301      	bcc.n	800440e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800440a:	2301      	movs	r3, #1
 800440c:	e00f      	b.n	800442e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <SysTick_Config+0x40>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3b01      	subs	r3, #1
 8004414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004416:	210f      	movs	r1, #15
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	f7ff ff8e 	bl	800433c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <SysTick_Config+0x40>)
 8004422:	2200      	movs	r2, #0
 8004424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004426:	4b04      	ldr	r3, [pc, #16]	; (8004438 <SysTick_Config+0x40>)
 8004428:	2207      	movs	r2, #7
 800442a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	e000e010 	.word	0xe000e010

0800443c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ff29 	bl	800429c <__NVIC_SetPriorityGrouping>
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004464:	f7ff ff3e 	bl	80042e4 <__NVIC_GetPriorityGrouping>
 8004468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	6978      	ldr	r0, [r7, #20]
 8004470:	f7ff ff8e 	bl	8004390 <NVIC_EncodePriority>
 8004474:	4602      	mov	r2, r0
 8004476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff5d 	bl	800433c <__NVIC_SetPriority>
}
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	4603      	mov	r3, r0
 8004492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff ff31 	bl	8004300 <__NVIC_EnableIRQ>
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff ffa2 	bl	80043f8 <SysTick_Config>
 80044b4:	4603      	mov	r3, r0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044cc:	f7ff f984 	bl	80037d8 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e099      	b.n	8004610 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044fc:	e00f      	b.n	800451e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044fe:	f7ff f96b 	bl	80037d8 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b05      	cmp	r3, #5
 800450a:	d908      	bls.n	800451e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2203      	movs	r2, #3
 8004516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e078      	b.n	8004610 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e8      	bne.n	80044fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4b38      	ldr	r3, [pc, #224]	; (8004618 <HAL_DMA_Init+0x158>)
 8004538:	4013      	ands	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800454a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2b04      	cmp	r3, #4
 8004576:	d107      	bne.n	8004588 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	4313      	orrs	r3, r2
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f023 0307 	bic.w	r3, r3, #7
 800459e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d117      	bne.n	80045e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00e      	beq.n	80045e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fb01 	bl	8004bcc <DMA_CheckFifoParam>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2240      	movs	r2, #64	; 0x40
 80045d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045de:	2301      	movs	r3, #1
 80045e0:	e016      	b.n	8004610 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fab8 	bl	8004b60 <DMA_CalcBaseAndBitshift>
 80045f0:	4603      	mov	r3, r0
 80045f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f8:	223f      	movs	r2, #63	; 0x3f
 80045fa:	409a      	lsls	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	f010803f 	.word	0xf010803f

0800461c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_DMA_Start_IT+0x26>
 800463e:	2302      	movs	r3, #2
 8004640:	e040      	b.n	80046c4 <HAL_DMA_Start_IT+0xa8>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d12f      	bne.n	80046b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2202      	movs	r2, #2
 800465a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fa4a 	bl	8004b04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	223f      	movs	r2, #63	; 0x3f
 8004676:	409a      	lsls	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0216 	orr.w	r2, r2, #22
 800468a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0208 	orr.w	r2, r2, #8
 80046a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e005      	b.n	80046c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046be:	2302      	movs	r3, #2
 80046c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046da:	f7ff f87d 	bl	80037d8 <HAL_GetTick>
 80046de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d008      	beq.n	80046fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2280      	movs	r2, #128	; 0x80
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e052      	b.n	80047a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0216 	bic.w	r2, r2, #22
 800470c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800471c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <HAL_DMA_Abort+0x62>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0208 	bic.w	r2, r2, #8
 800473c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800474e:	e013      	b.n	8004778 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004750:	f7ff f842 	bl	80037d8 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b05      	cmp	r3, #5
 800475c:	d90c      	bls.n	8004778 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2203      	movs	r2, #3
 8004770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e015      	b.n	80047a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e4      	bne.n	8004750 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478a:	223f      	movs	r2, #63	; 0x3f
 800478c:	409a      	lsls	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d004      	beq.n	80047ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2280      	movs	r2, #128	; 0x80
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e00c      	b.n	80047e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2205      	movs	r2, #5
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047fc:	4b92      	ldr	r3, [pc, #584]	; (8004a48 <HAL_DMA_IRQHandler+0x258>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a92      	ldr	r2, [pc, #584]	; (8004a4c <HAL_DMA_IRQHandler+0x25c>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	0a9b      	lsrs	r3, r3, #10
 8004808:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	2208      	movs	r2, #8
 800481c:	409a      	lsls	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01a      	beq.n	800485c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d013      	beq.n	800485c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0204 	bic.w	r2, r2, #4
 8004842:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	2208      	movs	r2, #8
 800484a:	409a      	lsls	r2, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004854:	f043 0201 	orr.w	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	2201      	movs	r2, #1
 8004862:	409a      	lsls	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d012      	beq.n	8004892 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487e:	2201      	movs	r2, #1
 8004880:	409a      	lsls	r2, r3
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488a:	f043 0202 	orr.w	r2, r3, #2
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	2204      	movs	r2, #4
 8004898:	409a      	lsls	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4013      	ands	r3, r2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d012      	beq.n	80048c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	2204      	movs	r2, #4
 80048b6:	409a      	lsls	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	f043 0204 	orr.w	r2, r3, #4
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048cc:	2210      	movs	r2, #16
 80048ce:	409a      	lsls	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d043      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d03c      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	2210      	movs	r2, #16
 80048ec:	409a      	lsls	r2, r3
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d018      	beq.n	8004932 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d024      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	4798      	blx	r3
 800491e:	e01f      	b.n	8004960 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01b      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4798      	blx	r3
 8004930:	e016      	b.n	8004960 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d107      	bne.n	8004950 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0208 	bic.w	r2, r2, #8
 800494e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	2220      	movs	r2, #32
 8004966:	409a      	lsls	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 808e 	beq.w	8004a8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8086 	beq.w	8004a8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004986:	2220      	movs	r2, #32
 8004988:	409a      	lsls	r2, r3
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b05      	cmp	r3, #5
 8004998:	d136      	bne.n	8004a08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0216 	bic.w	r2, r2, #22
 80049a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695a      	ldr	r2, [r3, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <HAL_DMA_IRQHandler+0x1da>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0208 	bic.w	r2, r2, #8
 80049d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	223f      	movs	r2, #63	; 0x3f
 80049e0:	409a      	lsls	r2, r3
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d07d      	beq.n	8004afa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
        }
        return;
 8004a06:	e078      	b.n	8004afa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01c      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d108      	bne.n	8004a36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d030      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	4798      	blx	r3
 8004a34:	e02b      	b.n	8004a8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d027      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	4798      	blx	r3
 8004a46:	e022      	b.n	8004a8e <HAL_DMA_IRQHandler+0x29e>
 8004a48:	2000001c 	.word	0x2000001c
 8004a4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10f      	bne.n	8004a7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0210 	bic.w	r2, r2, #16
 8004a6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d032      	beq.n	8004afc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d022      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2205      	movs	r2, #5
 8004aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	3301      	adds	r3, #1
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d307      	bcc.n	8004ad6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1f2      	bne.n	8004aba <HAL_DMA_IRQHandler+0x2ca>
 8004ad4:	e000      	b.n	8004ad8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004ad6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	4798      	blx	r3
 8004af8:	e000      	b.n	8004afc <HAL_DMA_IRQHandler+0x30c>
        return;
 8004afa:	bf00      	nop
    }
  }
}
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop

08004b04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d108      	bne.n	8004b44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b42:	e007      	b.n	8004b54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	60da      	str	r2, [r3, #12]
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	3b10      	subs	r3, #16
 8004b70:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <DMA_CalcBaseAndBitshift+0x64>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b7a:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <DMA_CalcBaseAndBitshift+0x68>)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d909      	bls.n	8004ba2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b96:	f023 0303 	bic.w	r3, r3, #3
 8004b9a:	1d1a      	adds	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	659a      	str	r2, [r3, #88]	; 0x58
 8004ba0:	e007      	b.n	8004bb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004baa:	f023 0303 	bic.w	r3, r3, #3
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	aaaaaaab 	.word	0xaaaaaaab
 8004bc8:	0800b860 	.word	0x0800b860

08004bcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11f      	bne.n	8004c26 <DMA_CheckFifoParam+0x5a>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d856      	bhi.n	8004c9a <DMA_CheckFifoParam+0xce>
 8004bec:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <DMA_CheckFifoParam+0x28>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c05 	.word	0x08004c05
 8004bf8:	08004c17 	.word	0x08004c17
 8004bfc:	08004c05 	.word	0x08004c05
 8004c00:	08004c9b 	.word	0x08004c9b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d046      	beq.n	8004c9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c14:	e043      	b.n	8004c9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c1e:	d140      	bne.n	8004ca2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c24:	e03d      	b.n	8004ca2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2e:	d121      	bne.n	8004c74 <DMA_CheckFifoParam+0xa8>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d837      	bhi.n	8004ca6 <DMA_CheckFifoParam+0xda>
 8004c36:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <DMA_CheckFifoParam+0x70>)
 8004c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3c:	08004c4d 	.word	0x08004c4d
 8004c40:	08004c53 	.word	0x08004c53
 8004c44:	08004c4d 	.word	0x08004c4d
 8004c48:	08004c65 	.word	0x08004c65
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c50:	e030      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d025      	beq.n	8004caa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c62:	e022      	b.n	8004caa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c6c:	d11f      	bne.n	8004cae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c72:	e01c      	b.n	8004cae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d903      	bls.n	8004c82 <DMA_CheckFifoParam+0xb6>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d003      	beq.n	8004c88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c80:	e018      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
      break;
 8004c86:	e015      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00e      	beq.n	8004cb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
      break;
 8004c98:	e00b      	b.n	8004cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8004c9a:	bf00      	nop
 8004c9c:	e00a      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8004c9e:	bf00      	nop
 8004ca0:	e008      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e006      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e004      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8004caa:	bf00      	nop
 8004cac:	e002      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cae:	bf00      	nop
 8004cb0:	e000      	b.n	8004cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8004cb2:	bf00      	nop
    }
  } 
  
  return status; 
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop

08004cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b089      	sub	sp, #36	; 0x24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	e159      	b.n	8004f94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	f040 8148 	bne.w	8004f8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d005      	beq.n	8004d16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d130      	bne.n	8004d78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	2203      	movs	r2, #3
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43db      	mvns	r3, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	43db      	mvns	r3, r3
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f003 0201 	and.w	r2, r3, #1
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d017      	beq.n	8004db4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	2203      	movs	r2, #3
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d123      	bne.n	8004e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	08da      	lsrs	r2, r3, #3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3208      	adds	r2, #8
 8004dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	220f      	movs	r2, #15
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	08da      	lsrs	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3208      	adds	r2, #8
 8004e02:	69b9      	ldr	r1, [r7, #24]
 8004e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	2203      	movs	r2, #3
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f003 0203 	and.w	r2, r3, #3
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80a2 	beq.w	8004f8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	4b57      	ldr	r3, [pc, #348]	; (8004fac <HAL_GPIO_Init+0x2e8>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	4a56      	ldr	r2, [pc, #344]	; (8004fac <HAL_GPIO_Init+0x2e8>)
 8004e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e58:	6453      	str	r3, [r2, #68]	; 0x44
 8004e5a:	4b54      	ldr	r3, [pc, #336]	; (8004fac <HAL_GPIO_Init+0x2e8>)
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e66:	4a52      	ldr	r2, [pc, #328]	; (8004fb0 <HAL_GPIO_Init+0x2ec>)
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	220f      	movs	r2, #15
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a49      	ldr	r2, [pc, #292]	; (8004fb4 <HAL_GPIO_Init+0x2f0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d019      	beq.n	8004ec6 <HAL_GPIO_Init+0x202>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a48      	ldr	r2, [pc, #288]	; (8004fb8 <HAL_GPIO_Init+0x2f4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <HAL_GPIO_Init+0x1fe>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a47      	ldr	r2, [pc, #284]	; (8004fbc <HAL_GPIO_Init+0x2f8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00d      	beq.n	8004ebe <HAL_GPIO_Init+0x1fa>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a46      	ldr	r2, [pc, #280]	; (8004fc0 <HAL_GPIO_Init+0x2fc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <HAL_GPIO_Init+0x1f6>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a45      	ldr	r2, [pc, #276]	; (8004fc4 <HAL_GPIO_Init+0x300>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d101      	bne.n	8004eb6 <HAL_GPIO_Init+0x1f2>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	e008      	b.n	8004ec8 <HAL_GPIO_Init+0x204>
 8004eb6:	2307      	movs	r3, #7
 8004eb8:	e006      	b.n	8004ec8 <HAL_GPIO_Init+0x204>
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e004      	b.n	8004ec8 <HAL_GPIO_Init+0x204>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e002      	b.n	8004ec8 <HAL_GPIO_Init+0x204>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <HAL_GPIO_Init+0x204>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	f002 0203 	and.w	r2, r2, #3
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	4093      	lsls	r3, r2
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ed8:	4935      	ldr	r1, [pc, #212]	; (8004fb0 <HAL_GPIO_Init+0x2ec>)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	089b      	lsrs	r3, r3, #2
 8004ede:	3302      	adds	r3, #2
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ee6:	4b38      	ldr	r3, [pc, #224]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f0a:	4a2f      	ldr	r2, [pc, #188]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f10:	4b2d      	ldr	r3, [pc, #180]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f34:	4a24      	ldr	r2, [pc, #144]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f3a:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f5e:	4a1a      	ldr	r2, [pc, #104]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f64:	4b18      	ldr	r3, [pc, #96]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f88:	4a0f      	ldr	r2, [pc, #60]	; (8004fc8 <HAL_GPIO_Init+0x304>)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3301      	adds	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	f67f aea2 	bls.w	8004ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	3724      	adds	r7, #36	; 0x24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	40013800 	.word	0x40013800
 8004fb4:	40020000 	.word	0x40020000
 8004fb8:	40020400 	.word	0x40020400
 8004fbc:	40020800 	.word	0x40020800
 8004fc0:	40020c00 	.word	0x40020c00
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40013c00 	.word	0x40013c00

08004fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	887b      	ldrh	r3, [r7, #2]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	73fb      	strb	r3, [r7, #15]
 8004fe8:	e001      	b.n	8004fee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fea:	2300      	movs	r3, #0
 8004fec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
 8005008:	4613      	mov	r3, r2
 800500a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800500c:	787b      	ldrb	r3, [r7, #1]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005018:	e003      	b.n	8005022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800501a:	887b      	ldrh	r3, [r7, #2]
 800501c:	041a      	lsls	r2, r3, #16
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	619a      	str	r2, [r3, #24]
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e264      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d075      	beq.n	800513a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800504e:	4ba3      	ldr	r3, [pc, #652]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b04      	cmp	r3, #4
 8005058:	d00c      	beq.n	8005074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800505a:	4ba0      	ldr	r3, [pc, #640]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005062:	2b08      	cmp	r3, #8
 8005064:	d112      	bne.n	800508c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005066:	4b9d      	ldr	r3, [pc, #628]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005072:	d10b      	bne.n	800508c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005074:	4b99      	ldr	r3, [pc, #612]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d05b      	beq.n	8005138 <HAL_RCC_OscConfig+0x108>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d157      	bne.n	8005138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e23f      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005094:	d106      	bne.n	80050a4 <HAL_RCC_OscConfig+0x74>
 8005096:	4b91      	ldr	r3, [pc, #580]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a90      	ldr	r2, [pc, #576]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e01d      	b.n	80050e0 <HAL_RCC_OscConfig+0xb0>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x98>
 80050ae:	4b8b      	ldr	r3, [pc, #556]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a8a      	ldr	r2, [pc, #552]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80050b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	4b88      	ldr	r3, [pc, #544]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a87      	ldr	r2, [pc, #540]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80050c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e00b      	b.n	80050e0 <HAL_RCC_OscConfig+0xb0>
 80050c8:	4b84      	ldr	r3, [pc, #528]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a83      	ldr	r2, [pc, #524]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80050ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	4b81      	ldr	r3, [pc, #516]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a80      	ldr	r2, [pc, #512]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80050da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d013      	beq.n	8005110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e8:	f7fe fb76 	bl	80037d8 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050f0:	f7fe fb72 	bl	80037d8 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	; 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e204      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005102:	4b76      	ldr	r3, [pc, #472]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0xc0>
 800510e:	e014      	b.n	800513a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005110:	f7fe fb62 	bl	80037d8 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005118:	f7fe fb5e 	bl	80037d8 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b64      	cmp	r3, #100	; 0x64
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e1f0      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800512a:	4b6c      	ldr	r3, [pc, #432]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0xe8>
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d063      	beq.n	800520e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005146:	4b65      	ldr	r3, [pc, #404]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005152:	4b62      	ldr	r3, [pc, #392]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800515a:	2b08      	cmp	r3, #8
 800515c:	d11c      	bne.n	8005198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515e:	4b5f      	ldr	r3, [pc, #380]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d116      	bne.n	8005198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800516a:	4b5c      	ldr	r3, [pc, #368]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_RCC_OscConfig+0x152>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d001      	beq.n	8005182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e1c4      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005182:	4b56      	ldr	r3, [pc, #344]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4952      	ldr	r1, [pc, #328]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005196:	e03a      	b.n	800520e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d020      	beq.n	80051e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051a0:	4b4f      	ldr	r3, [pc, #316]	; (80052e0 <HAL_RCC_OscConfig+0x2b0>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fe fb17 	bl	80037d8 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ae:	f7fe fb13 	bl	80037d8 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e1a5      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c0:	4b46      	ldr	r3, [pc, #280]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051cc:	4b43      	ldr	r3, [pc, #268]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4940      	ldr	r1, [pc, #256]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	600b      	str	r3, [r1, #0]
 80051e0:	e015      	b.n	800520e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e2:	4b3f      	ldr	r3, [pc, #252]	; (80052e0 <HAL_RCC_OscConfig+0x2b0>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fe faf6 	bl	80037d8 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051f0:	f7fe faf2 	bl	80037d8 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e184      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005202:	4b36      	ldr	r3, [pc, #216]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d030      	beq.n	800527c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d016      	beq.n	8005250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005222:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <HAL_RCC_OscConfig+0x2b4>)
 8005224:	2201      	movs	r2, #1
 8005226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005228:	f7fe fad6 	bl	80037d8 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005230:	f7fe fad2 	bl	80037d8 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e164      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005242:	4b26      	ldr	r3, [pc, #152]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x200>
 800524e:	e015      	b.n	800527c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005250:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <HAL_RCC_OscConfig+0x2b4>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005256:	f7fe fabf 	bl	80037d8 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800525e:	f7fe fabb 	bl	80037d8 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e14d      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005270:	4b1a      	ldr	r3, [pc, #104]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1f0      	bne.n	800525e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80a0 	beq.w	80053ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800528a:	2300      	movs	r3, #0
 800528c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10f      	bne.n	80052ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	4a0e      	ldr	r2, [pc, #56]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a8:	6413      	str	r3, [r2, #64]	; 0x40
 80052aa:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <HAL_RCC_OscConfig+0x2ac>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b6:	2301      	movs	r3, #1
 80052b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ba:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCC_OscConfig+0x2b8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d121      	bne.n	800530a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052c6:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <HAL_RCC_OscConfig+0x2b8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a07      	ldr	r2, [pc, #28]	; (80052e8 <HAL_RCC_OscConfig+0x2b8>)
 80052cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052d2:	f7fe fa81 	bl	80037d8 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d8:	e011      	b.n	80052fe <HAL_RCC_OscConfig+0x2ce>
 80052da:	bf00      	nop
 80052dc:	40023800 	.word	0x40023800
 80052e0:	42470000 	.word	0x42470000
 80052e4:	42470e80 	.word	0x42470e80
 80052e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ec:	f7fe fa74 	bl	80037d8 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e106      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fe:	4b85      	ldr	r3, [pc, #532]	; (8005514 <HAL_RCC_OscConfig+0x4e4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d106      	bne.n	8005320 <HAL_RCC_OscConfig+0x2f0>
 8005312:	4b81      	ldr	r3, [pc, #516]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	4a80      	ldr	r2, [pc, #512]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	6713      	str	r3, [r2, #112]	; 0x70
 800531e:	e01c      	b.n	800535a <HAL_RCC_OscConfig+0x32a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b05      	cmp	r3, #5
 8005326:	d10c      	bne.n	8005342 <HAL_RCC_OscConfig+0x312>
 8005328:	4b7b      	ldr	r3, [pc, #492]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	4a7a      	ldr	r2, [pc, #488]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 800532e:	f043 0304 	orr.w	r3, r3, #4
 8005332:	6713      	str	r3, [r2, #112]	; 0x70
 8005334:	4b78      	ldr	r3, [pc, #480]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 8005336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005338:	4a77      	ldr	r2, [pc, #476]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	6713      	str	r3, [r2, #112]	; 0x70
 8005340:	e00b      	b.n	800535a <HAL_RCC_OscConfig+0x32a>
 8005342:	4b75      	ldr	r3, [pc, #468]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	4a74      	ldr	r2, [pc, #464]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	6713      	str	r3, [r2, #112]	; 0x70
 800534e:	4b72      	ldr	r3, [pc, #456]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	4a71      	ldr	r2, [pc, #452]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 8005354:	f023 0304 	bic.w	r3, r3, #4
 8005358:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d015      	beq.n	800538e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fe fa39 	bl	80037d8 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005368:	e00a      	b.n	8005380 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800536a:	f7fe fa35 	bl	80037d8 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	f241 3288 	movw	r2, #5000	; 0x1388
 8005378:	4293      	cmp	r3, r2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e0c5      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005380:	4b65      	ldr	r3, [pc, #404]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 8005382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0ee      	beq.n	800536a <HAL_RCC_OscConfig+0x33a>
 800538c:	e014      	b.n	80053b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800538e:	f7fe fa23 	bl	80037d8 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005394:	e00a      	b.n	80053ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005396:	f7fe fa1f 	bl	80037d8 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e0af      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ac:	4b5a      	ldr	r3, [pc, #360]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1ee      	bne.n	8005396 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d105      	bne.n	80053ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053be:	4b56      	ldr	r3, [pc, #344]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	4a55      	ldr	r2, [pc, #340]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 80053c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 809b 	beq.w	800550a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053d4:	4b50      	ldr	r3, [pc, #320]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 030c 	and.w	r3, r3, #12
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d05c      	beq.n	800549a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d141      	bne.n	800546c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e8:	4b4c      	ldr	r3, [pc, #304]	; (800551c <HAL_RCC_OscConfig+0x4ec>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ee:	f7fe f9f3 	bl	80037d8 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f6:	f7fe f9ef 	bl	80037d8 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e081      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005408:	4b43      	ldr	r3, [pc, #268]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f0      	bne.n	80053f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	019b      	lsls	r3, r3, #6
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	3b01      	subs	r3, #1
 800542e:	041b      	lsls	r3, r3, #16
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	061b      	lsls	r3, r3, #24
 8005438:	4937      	ldr	r1, [pc, #220]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 800543a:	4313      	orrs	r3, r2
 800543c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800543e:	4b37      	ldr	r3, [pc, #220]	; (800551c <HAL_RCC_OscConfig+0x4ec>)
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005444:	f7fe f9c8 	bl	80037d8 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800544c:	f7fe f9c4 	bl	80037d8 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e056      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800545e:	4b2e      	ldr	r3, [pc, #184]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCC_OscConfig+0x41c>
 800546a:	e04e      	b.n	800550a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546c:	4b2b      	ldr	r3, [pc, #172]	; (800551c <HAL_RCC_OscConfig+0x4ec>)
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005472:	f7fe f9b1 	bl	80037d8 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800547a:	f7fe f9ad 	bl	80037d8 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e03f      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548c:	4b22      	ldr	r3, [pc, #136]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1f0      	bne.n	800547a <HAL_RCC_OscConfig+0x44a>
 8005498:	e037      	b.n	800550a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e032      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054a6:	4b1c      	ldr	r3, [pc, #112]	; (8005518 <HAL_RCC_OscConfig+0x4e8>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d028      	beq.n	8005506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d121      	bne.n	8005506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d11a      	bne.n	8005506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054d6:	4013      	ands	r3, r2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054de:	4293      	cmp	r3, r2
 80054e0:	d111      	bne.n	8005506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	3b01      	subs	r3, #1
 80054f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d107      	bne.n	8005506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005502:	429a      	cmp	r2, r3
 8005504:	d001      	beq.n	800550a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40007000 	.word	0x40007000
 8005518:	40023800 	.word	0x40023800
 800551c:	42470060 	.word	0x42470060

08005520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0cc      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005534:	4b68      	ldr	r3, [pc, #416]	; (80056d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d90c      	bls.n	800555c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005542:	4b65      	ldr	r3, [pc, #404]	; (80056d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	4b63      	ldr	r3, [pc, #396]	; (80056d8 <HAL_RCC_ClockConfig+0x1b8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d001      	beq.n	800555c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0b8      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d020      	beq.n	80055aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005574:	4b59      	ldr	r3, [pc, #356]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4a58      	ldr	r2, [pc, #352]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800557e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800558c:	4b53      	ldr	r3, [pc, #332]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	4a52      	ldr	r2, [pc, #328]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005598:	4b50      	ldr	r3, [pc, #320]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	494d      	ldr	r1, [pc, #308]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d044      	beq.n	8005640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d107      	bne.n	80055ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055be:	4b47      	ldr	r3, [pc, #284]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d119      	bne.n	80055fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e07f      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d003      	beq.n	80055de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d107      	bne.n	80055ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055de:	4b3f      	ldr	r3, [pc, #252]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e06f      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ee:	4b3b      	ldr	r3, [pc, #236]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e067      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055fe:	4b37      	ldr	r3, [pc, #220]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f023 0203 	bic.w	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	4934      	ldr	r1, [pc, #208]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 800560c:	4313      	orrs	r3, r2
 800560e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005610:	f7fe f8e2 	bl	80037d8 <HAL_GetTick>
 8005614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	e00a      	b.n	800562e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005618:	f7fe f8de 	bl	80037d8 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f241 3288 	movw	r2, #5000	; 0x1388
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e04f      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562e:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 020c 	and.w	r2, r3, #12
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	429a      	cmp	r2, r3
 800563e:	d1eb      	bne.n	8005618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005640:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d20c      	bcs.n	8005668 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564e:	4b22      	ldr	r3, [pc, #136]	; (80056d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005656:	4b20      	ldr	r3, [pc, #128]	; (80056d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d001      	beq.n	8005668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e032      	b.n	80056ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005674:	4b19      	ldr	r3, [pc, #100]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	4916      	ldr	r1, [pc, #88]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005682:	4313      	orrs	r3, r2
 8005684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	490e      	ldr	r1, [pc, #56]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056a6:	f000 f821 	bl	80056ec <HAL_RCC_GetSysClockFreq>
 80056aa:	4602      	mov	r2, r0
 80056ac:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_RCC_ClockConfig+0x1bc>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	490a      	ldr	r1, [pc, #40]	; (80056e0 <HAL_RCC_ClockConfig+0x1c0>)
 80056b8:	5ccb      	ldrb	r3, [r1, r3]
 80056ba:	fa22 f303 	lsr.w	r3, r2, r3
 80056be:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <HAL_RCC_ClockConfig+0x1c4>)
 80056c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056c2:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <HAL_RCC_ClockConfig+0x1c8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe f842 	bl	8003750 <HAL_InitTick>

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40023c00 	.word	0x40023c00
 80056dc:	40023800 	.word	0x40023800
 80056e0:	0800b848 	.word	0x0800b848
 80056e4:	2000001c 	.word	0x2000001c
 80056e8:	20000020 	.word	0x20000020

080056ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	607b      	str	r3, [r7, #4]
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	2300      	movs	r3, #0
 80056fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005704:	4b67      	ldr	r3, [pc, #412]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 030c 	and.w	r3, r3, #12
 800570c:	2b08      	cmp	r3, #8
 800570e:	d00d      	beq.n	800572c <HAL_RCC_GetSysClockFreq+0x40>
 8005710:	2b08      	cmp	r3, #8
 8005712:	f200 80bd 	bhi.w	8005890 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_RCC_GetSysClockFreq+0x34>
 800571a:	2b04      	cmp	r3, #4
 800571c:	d003      	beq.n	8005726 <HAL_RCC_GetSysClockFreq+0x3a>
 800571e:	e0b7      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005720:	4b61      	ldr	r3, [pc, #388]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005722:	60bb      	str	r3, [r7, #8]
       break;
 8005724:	e0b7      	b.n	8005896 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005726:	4b61      	ldr	r3, [pc, #388]	; (80058ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005728:	60bb      	str	r3, [r7, #8]
      break;
 800572a:	e0b4      	b.n	8005896 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800572c:	4b5d      	ldr	r3, [pc, #372]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005734:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005736:	4b5b      	ldr	r3, [pc, #364]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d04d      	beq.n	80057de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005742:	4b58      	ldr	r3, [pc, #352]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	099b      	lsrs	r3, r3, #6
 8005748:	461a      	mov	r2, r3
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005752:	f04f 0100 	mov.w	r1, #0
 8005756:	ea02 0800 	and.w	r8, r2, r0
 800575a:	ea03 0901 	and.w	r9, r3, r1
 800575e:	4640      	mov	r0, r8
 8005760:	4649      	mov	r1, r9
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	014b      	lsls	r3, r1, #5
 800576c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005770:	0142      	lsls	r2, r0, #5
 8005772:	4610      	mov	r0, r2
 8005774:	4619      	mov	r1, r3
 8005776:	ebb0 0008 	subs.w	r0, r0, r8
 800577a:	eb61 0109 	sbc.w	r1, r1, r9
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	018b      	lsls	r3, r1, #6
 8005788:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800578c:	0182      	lsls	r2, r0, #6
 800578e:	1a12      	subs	r2, r2, r0
 8005790:	eb63 0301 	sbc.w	r3, r3, r1
 8005794:	f04f 0000 	mov.w	r0, #0
 8005798:	f04f 0100 	mov.w	r1, #0
 800579c:	00d9      	lsls	r1, r3, #3
 800579e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057a2:	00d0      	lsls	r0, r2, #3
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	eb12 0208 	adds.w	r2, r2, r8
 80057ac:	eb43 0309 	adc.w	r3, r3, r9
 80057b0:	f04f 0000 	mov.w	r0, #0
 80057b4:	f04f 0100 	mov.w	r1, #0
 80057b8:	0259      	lsls	r1, r3, #9
 80057ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80057be:	0250      	lsls	r0, r2, #9
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4610      	mov	r0, r2
 80057c6:	4619      	mov	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	f7fb fa62 	bl	8000c98 <__aeabi_uldivmod>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4613      	mov	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	e04a      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057de:	4b31      	ldr	r3, [pc, #196]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	099b      	lsrs	r3, r3, #6
 80057e4:	461a      	mov	r2, r3
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057ee:	f04f 0100 	mov.w	r1, #0
 80057f2:	ea02 0400 	and.w	r4, r2, r0
 80057f6:	ea03 0501 	and.w	r5, r3, r1
 80057fa:	4620      	mov	r0, r4
 80057fc:	4629      	mov	r1, r5
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	014b      	lsls	r3, r1, #5
 8005808:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800580c:	0142      	lsls	r2, r0, #5
 800580e:	4610      	mov	r0, r2
 8005810:	4619      	mov	r1, r3
 8005812:	1b00      	subs	r0, r0, r4
 8005814:	eb61 0105 	sbc.w	r1, r1, r5
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	018b      	lsls	r3, r1, #6
 8005822:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005826:	0182      	lsls	r2, r0, #6
 8005828:	1a12      	subs	r2, r2, r0
 800582a:	eb63 0301 	sbc.w	r3, r3, r1
 800582e:	f04f 0000 	mov.w	r0, #0
 8005832:	f04f 0100 	mov.w	r1, #0
 8005836:	00d9      	lsls	r1, r3, #3
 8005838:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800583c:	00d0      	lsls	r0, r2, #3
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	1912      	adds	r2, r2, r4
 8005844:	eb45 0303 	adc.w	r3, r5, r3
 8005848:	f04f 0000 	mov.w	r0, #0
 800584c:	f04f 0100 	mov.w	r1, #0
 8005850:	0299      	lsls	r1, r3, #10
 8005852:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005856:	0290      	lsls	r0, r2, #10
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4610      	mov	r0, r2
 800585e:	4619      	mov	r1, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	461a      	mov	r2, r3
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	f7fb fa16 	bl	8000c98 <__aeabi_uldivmod>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4613      	mov	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	0c1b      	lsrs	r3, r3, #16
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	3301      	adds	r3, #1
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	fbb2 f3f3 	udiv	r3, r2, r3
 800588c:	60bb      	str	r3, [r7, #8]
      break;
 800588e:	e002      	b.n	8005896 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005892:	60bb      	str	r3, [r7, #8]
      break;
 8005894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005896:	68bb      	ldr	r3, [r7, #8]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80058a2:	bf00      	nop
 80058a4:	40023800 	.word	0x40023800
 80058a8:	00f42400 	.word	0x00f42400
 80058ac:	007a1200 	.word	0x007a1200

080058b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058b4:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058b6:	681b      	ldr	r3, [r3, #0]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	2000001c 	.word	0x2000001c

080058c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058cc:	f7ff fff0 	bl	80058b0 <HAL_RCC_GetHCLKFreq>
 80058d0:	4602      	mov	r2, r0
 80058d2:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	0a9b      	lsrs	r3, r3, #10
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	4903      	ldr	r1, [pc, #12]	; (80058ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80058de:	5ccb      	ldrb	r3, [r1, r3]
 80058e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40023800 	.word	0x40023800
 80058ec:	0800b858 	.word	0x0800b858

080058f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058f4:	f7ff ffdc 	bl	80058b0 <HAL_RCC_GetHCLKFreq>
 80058f8:	4602      	mov	r2, r0
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	0b5b      	lsrs	r3, r3, #13
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	4903      	ldr	r1, [pc, #12]	; (8005914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005906:	5ccb      	ldrb	r3, [r1, r3]
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800590c:	4618      	mov	r0, r3
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40023800 	.word	0x40023800
 8005914:	0800b858 	.word	0x0800b858

08005918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e07b      	b.n	8005a22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b00      	cmp	r3, #0
 8005930:	d108      	bne.n	8005944 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593a:	d009      	beq.n	8005950 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	61da      	str	r2, [r3, #28]
 8005942:	e005      	b.n	8005950 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fd fc8e 	bl	800328c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005986:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005998:	431a      	orrs	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d4:	ea42 0103 	orr.w	r1, r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	0c1b      	lsrs	r3, r3, #16
 80059ee:	f003 0104 	and.w	r1, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	f003 0210 	and.w	r2, r3, #16
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_SPI_Transmit_IT+0x20>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e06f      	b.n	8005b2c <HAL_SPI_Transmit_IT+0x100>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_SPI_Transmit_IT+0x34>
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a64:	e05d      	b.n	8005b22 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
 8005a74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a76:	e054      	b.n	8005b22 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	88fa      	ldrh	r2, [r7, #6]
 8005a96:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a1f      	ldr	r2, [pc, #124]	; (8005b38 <HAL_SPI_Transmit_IT+0x10c>)
 8005abc:	645a      	str	r2, [r3, #68]	; 0x44
 8005abe:	e002      	b.n	8005ac6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <HAL_SPI_Transmit_IT+0x110>)
 8005ac4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ace:	d10f      	bne.n	8005af0 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ade:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005afe:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0a:	2b40      	cmp	r3, #64	; 0x40
 8005b0c:	d008      	beq.n	8005b20 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e000      	b.n	8005b22 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8005b20:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	08005dc3 	.word	0x08005dc3
 8005b3c:	08005d7d 	.word	0x08005d7d

08005b40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	099b      	lsrs	r3, r3, #6
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10f      	bne.n	8005b84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	099b      	lsrs	r3, r3, #6
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d004      	beq.n	8005b84 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	4798      	blx	r3
    return;
 8005b82:	e0d7      	b.n	8005d34 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	085b      	lsrs	r3, r3, #1
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <HAL_SPI_IRQHandler+0x66>
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	09db      	lsrs	r3, r3, #7
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	4798      	blx	r3
    return;
 8005ba4:	e0c6      	b.n	8005d34 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10c      	bne.n	8005bcc <HAL_SPI_IRQHandler+0x8c>
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	099b      	lsrs	r3, r3, #6
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	0a1b      	lsrs	r3, r3, #8
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 80b4 	beq.w	8005d34 <HAL_SPI_IRQHandler+0x1f4>
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	095b      	lsrs	r3, r3, #5
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80ad 	beq.w	8005d34 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	099b      	lsrs	r3, r3, #6
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d023      	beq.n	8005c2e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d011      	beq.n	8005c16 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	f043 0204 	orr.w	r2, r3, #4
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	e00b      	b.n	8005c2e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c16:	2300      	movs	r3, #0
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	693b      	ldr	r3, [r7, #16]
        return;
 8005c2c:	e082      	b.n	8005d34 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d014      	beq.n	8005c64 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3e:	f043 0201 	orr.w	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	0a1b      	lsrs	r3, r3, #8
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00c      	beq.n	8005c8a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c74:	f043 0208 	orr.w	r2, r3, #8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	60bb      	str	r3, [r7, #8]
 8005c88:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d04f      	beq.n	8005d32 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ca0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <HAL_SPI_IRQHandler+0x17e>
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d034      	beq.n	8005d28 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0203 	bic.w	r2, r2, #3
 8005ccc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d011      	beq.n	8005cfa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cda:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <HAL_SPI_IRQHandler+0x1fc>)
 8005cdc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe fd62 	bl	80047ac <HAL_DMA_Abort_IT>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d016      	beq.n	8005d30 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d06:	4a0d      	ldr	r2, [pc, #52]	; (8005d3c <HAL_SPI_IRQHandler+0x1fc>)
 8005d08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe fd4c 	bl	80047ac <HAL_DMA_Abort_IT>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005d26:	e003      	b.n	8005d30 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f809 	bl	8005d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d2e:	e000      	b.n	8005d32 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005d30:	bf00      	nop
    return;
 8005d32:	bf00      	nop
  }
}
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	08005d55 	.word	0x08005d55

08005d40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7ff ffe6 	bl	8005d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f8f1 	bl	8005f9c <SPI_CloseTx_ISR>
  }
}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dce:	881a      	ldrh	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	1c9a      	adds	r2, r3, #2
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f8cf 	bl	8005f9c <SPI_CloseTx_ISR>
  }
}
 8005dfe:	bf00      	nop
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	4613      	mov	r3, r2
 8005e16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e18:	f7fd fcde 	bl	80037d8 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	1a9b      	subs	r3, r3, r2
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	4413      	add	r3, r2
 8005e26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e28:	f7fd fcd6 	bl	80037d8 <HAL_GetTick>
 8005e2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e2e:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	015b      	lsls	r3, r3, #5
 8005e34:	0d1b      	lsrs	r3, r3, #20
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	fb02 f303 	mul.w	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e3e:	e054      	b.n	8005eea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e46:	d050      	beq.n	8005eea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e48:	f7fd fcc6 	bl	80037d8 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d902      	bls.n	8005e5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d13d      	bne.n	8005eda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e76:	d111      	bne.n	8005e9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e80:	d004      	beq.n	8005e8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8a:	d107      	bne.n	8005e9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea4:	d10f      	bne.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ec4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e017      	b.n	8005f0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	bf0c      	ite	eq
 8005efa:	2301      	moveq	r3, #1
 8005efc:	2300      	movne	r3, #0
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d19b      	bne.n	8005e40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	2000001c 	.word	0x2000001c

08005f18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f24:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <SPI_EndRxTxTransaction+0x7c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1b      	ldr	r2, [pc, #108]	; (8005f98 <SPI_EndRxTxTransaction+0x80>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	0d5b      	lsrs	r3, r3, #21
 8005f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f34:	fb02 f303 	mul.w	r3, r2, r3
 8005f38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f42:	d112      	bne.n	8005f6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2180      	movs	r1, #128	; 0x80
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f7ff ff5a 	bl	8005e08 <SPI_WaitFlagStateUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d016      	beq.n	8005f88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5e:	f043 0220 	orr.w	r2, r3, #32
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e00f      	b.n	8005f8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f80:	2b80      	cmp	r3, #128	; 0x80
 8005f82:	d0f2      	beq.n	8005f6a <SPI_EndRxTxTransaction+0x52>
 8005f84:	e000      	b.n	8005f88 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f86:	bf00      	nop
  }

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	2000001c 	.word	0x2000001c
 8005f98:	165e9f81 	.word	0x165e9f81

08005f9c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005fa4:	4b2c      	ldr	r3, [pc, #176]	; (8006058 <SPI_CloseTx_ISR+0xbc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a2c      	ldr	r2, [pc, #176]	; (800605c <SPI_CloseTx_ISR+0xc0>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	0a5b      	lsrs	r3, r3, #9
 8005fb0:	2264      	movs	r2, #100	; 0x64
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fb8:	f7fd fc0e 	bl	80037d8 <HAL_GetTick>
 8005fbc:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d106      	bne.n	8005fd2 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc8:	f043 0220 	orr.w	r2, r3, #32
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fd0:	e009      	b.n	8005fe6 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0eb      	beq.n	8005fbe <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ff4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	2164      	movs	r1, #100	; 0x64
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff ff8c 	bl	8005f18 <SPI_EndRxTxTransaction>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d005      	beq.n	8006012 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600a:	f043 0220 	orr.w	r2, r3, #32
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff fe7d 	bl	8005d40 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006046:	e002      	b.n	800604e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7fc ffd3 	bl	8002ff4 <HAL_SPI_TxCpltCallback>
}
 800604e:	bf00      	nop
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	2000001c 	.word	0x2000001c
 800605c:	057619f1 	.word	0x057619f1

08006060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e041      	b.n	80060f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fd f950 	bl	800332c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3304      	adds	r3, #4
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f000 fade 	bl	8006660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	d001      	beq.n	8006118 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e03c      	b.n	8006192 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1e      	ldr	r2, [pc, #120]	; (80061a0 <HAL_TIM_Base_Start+0xa0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d018      	beq.n	800615c <HAL_TIM_Base_Start+0x5c>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006132:	d013      	beq.n	800615c <HAL_TIM_Base_Start+0x5c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1a      	ldr	r2, [pc, #104]	; (80061a4 <HAL_TIM_Base_Start+0xa4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00e      	beq.n	800615c <HAL_TIM_Base_Start+0x5c>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <HAL_TIM_Base_Start+0xa8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d009      	beq.n	800615c <HAL_TIM_Base_Start+0x5c>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a17      	ldr	r2, [pc, #92]	; (80061ac <HAL_TIM_Base_Start+0xac>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d004      	beq.n	800615c <HAL_TIM_Base_Start+0x5c>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a16      	ldr	r2, [pc, #88]	; (80061b0 <HAL_TIM_Base_Start+0xb0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d111      	bne.n	8006180 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b06      	cmp	r3, #6
 800616c:	d010      	beq.n	8006190 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f042 0201 	orr.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617e:	e007      	b.n	8006190 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40000400 	.word	0x40000400
 80061a8:	40000800 	.word	0x40000800
 80061ac:	40000c00 	.word	0x40000c00
 80061b0:	40014000 	.word	0x40014000

080061b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d001      	beq.n	80061cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e044      	b.n	8006256 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a1e      	ldr	r2, [pc, #120]	; (8006264 <HAL_TIM_Base_Start_IT+0xb0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d018      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x6c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f6:	d013      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x6c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1a      	ldr	r2, [pc, #104]	; (8006268 <HAL_TIM_Base_Start_IT+0xb4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00e      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x6c>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a19      	ldr	r2, [pc, #100]	; (800626c <HAL_TIM_Base_Start_IT+0xb8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d009      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x6c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a17      	ldr	r2, [pc, #92]	; (8006270 <HAL_TIM_Base_Start_IT+0xbc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x6c>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a16      	ldr	r2, [pc, #88]	; (8006274 <HAL_TIM_Base_Start_IT+0xc0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d111      	bne.n	8006244 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b06      	cmp	r3, #6
 8006230:	d010      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0201 	orr.w	r2, r2, #1
 8006240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006242:	e007      	b.n	8006254 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0201 	orr.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40010000 	.word	0x40010000
 8006268:	40000400 	.word	0x40000400
 800626c:	40000800 	.word	0x40000800
 8006270:	40000c00 	.word	0x40000c00
 8006274:	40014000 	.word	0x40014000

08006278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d122      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b02      	cmp	r3, #2
 800629a:	d11b      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0202 	mvn.w	r2, #2
 80062a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f9b2 	bl	8006624 <HAL_TIM_IC_CaptureCallback>
 80062c0:	e005      	b.n	80062ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f9a4 	bl	8006610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f9b5 	bl	8006638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d122      	bne.n	8006328 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d11b      	bne.n	8006328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0204 	mvn.w	r2, #4
 80062f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f988 	bl	8006624 <HAL_TIM_IC_CaptureCallback>
 8006314:	e005      	b.n	8006322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f97a 	bl	8006610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f98b 	bl	8006638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b08      	cmp	r3, #8
 8006334:	d122      	bne.n	800637c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b08      	cmp	r3, #8
 8006342:	d11b      	bne.n	800637c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0208 	mvn.w	r2, #8
 800634c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2204      	movs	r2, #4
 8006352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f95e 	bl	8006624 <HAL_TIM_IC_CaptureCallback>
 8006368:	e005      	b.n	8006376 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f950 	bl	8006610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f961 	bl	8006638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0310 	and.w	r3, r3, #16
 8006386:	2b10      	cmp	r3, #16
 8006388:	d122      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0310 	and.w	r3, r3, #16
 8006394:	2b10      	cmp	r3, #16
 8006396:	d11b      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0210 	mvn.w	r2, #16
 80063a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2208      	movs	r2, #8
 80063a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f934 	bl	8006624 <HAL_TIM_IC_CaptureCallback>
 80063bc:	e005      	b.n	80063ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f926 	bl	8006610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f937 	bl	8006638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d10e      	bne.n	80063fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d107      	bne.n	80063fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0201 	mvn.w	r2, #1
 80063f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fc fe12 	bl	8003020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d10e      	bne.n	8006428 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006414:	2b80      	cmp	r3, #128	; 0x80
 8006416:	d107      	bne.n	8006428 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 faae 	bl	8006984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d10e      	bne.n	8006454 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b40      	cmp	r3, #64	; 0x40
 8006442:	d107      	bne.n	8006454 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800644c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f8fc 	bl	800664c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b20      	cmp	r3, #32
 8006460:	d10e      	bne.n	8006480 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b20      	cmp	r3, #32
 800646e:	d107      	bne.n	8006480 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f06f 0220 	mvn.w	r2, #32
 8006478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa78 	bl	8006970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_TIM_ConfigClockSource+0x18>
 800649c:	2302      	movs	r3, #2
 800649e:	e0b3      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x180>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d8:	d03e      	beq.n	8006558 <HAL_TIM_ConfigClockSource+0xd0>
 80064da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064de:	f200 8087 	bhi.w	80065f0 <HAL_TIM_ConfigClockSource+0x168>
 80064e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e6:	f000 8085 	beq.w	80065f4 <HAL_TIM_ConfigClockSource+0x16c>
 80064ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ee:	d87f      	bhi.n	80065f0 <HAL_TIM_ConfigClockSource+0x168>
 80064f0:	2b70      	cmp	r3, #112	; 0x70
 80064f2:	d01a      	beq.n	800652a <HAL_TIM_ConfigClockSource+0xa2>
 80064f4:	2b70      	cmp	r3, #112	; 0x70
 80064f6:	d87b      	bhi.n	80065f0 <HAL_TIM_ConfigClockSource+0x168>
 80064f8:	2b60      	cmp	r3, #96	; 0x60
 80064fa:	d050      	beq.n	800659e <HAL_TIM_ConfigClockSource+0x116>
 80064fc:	2b60      	cmp	r3, #96	; 0x60
 80064fe:	d877      	bhi.n	80065f0 <HAL_TIM_ConfigClockSource+0x168>
 8006500:	2b50      	cmp	r3, #80	; 0x50
 8006502:	d03c      	beq.n	800657e <HAL_TIM_ConfigClockSource+0xf6>
 8006504:	2b50      	cmp	r3, #80	; 0x50
 8006506:	d873      	bhi.n	80065f0 <HAL_TIM_ConfigClockSource+0x168>
 8006508:	2b40      	cmp	r3, #64	; 0x40
 800650a:	d058      	beq.n	80065be <HAL_TIM_ConfigClockSource+0x136>
 800650c:	2b40      	cmp	r3, #64	; 0x40
 800650e:	d86f      	bhi.n	80065f0 <HAL_TIM_ConfigClockSource+0x168>
 8006510:	2b30      	cmp	r3, #48	; 0x30
 8006512:	d064      	beq.n	80065de <HAL_TIM_ConfigClockSource+0x156>
 8006514:	2b30      	cmp	r3, #48	; 0x30
 8006516:	d86b      	bhi.n	80065f0 <HAL_TIM_ConfigClockSource+0x168>
 8006518:	2b20      	cmp	r3, #32
 800651a:	d060      	beq.n	80065de <HAL_TIM_ConfigClockSource+0x156>
 800651c:	2b20      	cmp	r3, #32
 800651e:	d867      	bhi.n	80065f0 <HAL_TIM_ConfigClockSource+0x168>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d05c      	beq.n	80065de <HAL_TIM_ConfigClockSource+0x156>
 8006524:	2b10      	cmp	r3, #16
 8006526:	d05a      	beq.n	80065de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006528:	e062      	b.n	80065f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6899      	ldr	r1, [r3, #8]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f000 f98b 	bl	8006854 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800654c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	609a      	str	r2, [r3, #8]
      break;
 8006556:	e04e      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	6899      	ldr	r1, [r3, #8]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f000 f974 	bl	8006854 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800657a:	609a      	str	r2, [r3, #8]
      break;
 800657c:	e03b      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6818      	ldr	r0, [r3, #0]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	6859      	ldr	r1, [r3, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	461a      	mov	r2, r3
 800658c:	f000 f8e8 	bl	8006760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2150      	movs	r1, #80	; 0x50
 8006596:	4618      	mov	r0, r3
 8006598:	f000 f941 	bl	800681e <TIM_ITRx_SetConfig>
      break;
 800659c:	e02b      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	6859      	ldr	r1, [r3, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f000 f907 	bl	80067be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2160      	movs	r1, #96	; 0x60
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 f931 	bl	800681e <TIM_ITRx_SetConfig>
      break;
 80065bc:	e01b      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	6859      	ldr	r1, [r3, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	461a      	mov	r2, r3
 80065cc:	f000 f8c8 	bl	8006760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2140      	movs	r1, #64	; 0x40
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 f921 	bl	800681e <TIM_ITRx_SetConfig>
      break;
 80065dc:	e00b      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f000 f918 	bl	800681e <TIM_ITRx_SetConfig>
        break;
 80065ee:	e002      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80065f0:	bf00      	nop
 80065f2:	e000      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80065f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a34      	ldr	r2, [pc, #208]	; (8006744 <TIM_Base_SetConfig+0xe4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00f      	beq.n	8006698 <TIM_Base_SetConfig+0x38>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667e:	d00b      	beq.n	8006698 <TIM_Base_SetConfig+0x38>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a31      	ldr	r2, [pc, #196]	; (8006748 <TIM_Base_SetConfig+0xe8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d007      	beq.n	8006698 <TIM_Base_SetConfig+0x38>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a30      	ldr	r2, [pc, #192]	; (800674c <TIM_Base_SetConfig+0xec>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_Base_SetConfig+0x38>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a2f      	ldr	r2, [pc, #188]	; (8006750 <TIM_Base_SetConfig+0xf0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d108      	bne.n	80066aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a25      	ldr	r2, [pc, #148]	; (8006744 <TIM_Base_SetConfig+0xe4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01b      	beq.n	80066ea <TIM_Base_SetConfig+0x8a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b8:	d017      	beq.n	80066ea <TIM_Base_SetConfig+0x8a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a22      	ldr	r2, [pc, #136]	; (8006748 <TIM_Base_SetConfig+0xe8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d013      	beq.n	80066ea <TIM_Base_SetConfig+0x8a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a21      	ldr	r2, [pc, #132]	; (800674c <TIM_Base_SetConfig+0xec>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00f      	beq.n	80066ea <TIM_Base_SetConfig+0x8a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a20      	ldr	r2, [pc, #128]	; (8006750 <TIM_Base_SetConfig+0xf0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00b      	beq.n	80066ea <TIM_Base_SetConfig+0x8a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a1f      	ldr	r2, [pc, #124]	; (8006754 <TIM_Base_SetConfig+0xf4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <TIM_Base_SetConfig+0x8a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a1e      	ldr	r2, [pc, #120]	; (8006758 <TIM_Base_SetConfig+0xf8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d003      	beq.n	80066ea <TIM_Base_SetConfig+0x8a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a1d      	ldr	r2, [pc, #116]	; (800675c <TIM_Base_SetConfig+0xfc>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d108      	bne.n	80066fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a08      	ldr	r2, [pc, #32]	; (8006744 <TIM_Base_SetConfig+0xe4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d103      	bne.n	8006730 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	615a      	str	r2, [r3, #20]
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40010000 	.word	0x40010000
 8006748:	40000400 	.word	0x40000400
 800674c:	40000800 	.word	0x40000800
 8006750:	40000c00 	.word	0x40000c00
 8006754:	40014000 	.word	0x40014000
 8006758:	40014400 	.word	0x40014400
 800675c:	40014800 	.word	0x40014800

08006760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f023 0201 	bic.w	r2, r3, #1
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800678a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f023 030a 	bic.w	r3, r3, #10
 800679c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067be:	b480      	push	{r7}
 80067c0:	b087      	sub	sp, #28
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f023 0210 	bic.w	r2, r3, #16
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	031b      	lsls	r3, r3, #12
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	f043 0307 	orr.w	r3, r3, #7
 8006840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	bf00      	nop
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800686e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	021a      	lsls	r2, r3, #8
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	431a      	orrs	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4313      	orrs	r3, r2
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	609a      	str	r2, [r3, #8]
}
 8006888:	bf00      	nop
 800688a:	371c      	adds	r7, #28
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d101      	bne.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068a8:	2302      	movs	r3, #2
 80068aa:	e050      	b.n	800694e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1c      	ldr	r2, [pc, #112]	; (800695c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d018      	beq.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f8:	d013      	beq.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a18      	ldr	r2, [pc, #96]	; (8006960 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00e      	beq.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a16      	ldr	r2, [pc, #88]	; (8006964 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d009      	beq.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a15      	ldr	r2, [pc, #84]	; (8006968 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d004      	beq.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a13      	ldr	r2, [pc, #76]	; (800696c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d10c      	bne.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	4313      	orrs	r3, r2
 8006932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40010000 	.word	0x40010000
 8006960:	40000400 	.word	0x40000400
 8006964:	40000800 	.word	0x40000800
 8006968:	40000c00 	.word	0x40000c00
 800696c:	40014000 	.word	0x40014000

08006970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e03f      	b.n	8006a2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fc fcf2 	bl	80033a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2224      	movs	r2, #36	; 0x24
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fc7b 	bl	80072d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	695a      	ldr	r2, [r3, #20]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b08a      	sub	sp, #40	; 0x28
 8006a36:	af02      	add	r7, sp, #8
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d17c      	bne.n	8006b4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <HAL_UART_Transmit+0x2c>
 8006a58:	88fb      	ldrh	r3, [r7, #6]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e075      	b.n	8006b4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_UART_Transmit+0x3e>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e06e      	b.n	8006b4e <HAL_UART_Transmit+0x11c>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2221      	movs	r2, #33	; 0x21
 8006a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a86:	f7fc fea7 	bl	80037d8 <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	88fa      	ldrh	r2, [r7, #6]
 8006a96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa0:	d108      	bne.n	8006ab4 <HAL_UART_Transmit+0x82>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	e003      	b.n	8006abc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006ac4:	e02a      	b.n	8006b1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2200      	movs	r2, #0
 8006ace:	2180      	movs	r1, #128	; 0x80
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 fa3d 	bl	8006f50 <UART_WaitOnFlagUntilTimeout>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e036      	b.n	8006b4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	3302      	adds	r3, #2
 8006afa:	61bb      	str	r3, [r7, #24]
 8006afc:	e007      	b.n	8006b0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	781a      	ldrb	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1cf      	bne.n	8006ac6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2140      	movs	r1, #64	; 0x40
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fa0d 	bl	8006f50 <UART_WaitOnFlagUntilTimeout>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e006      	b.n	8006b4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e000      	b.n	8006b4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b4c:	2302      	movs	r3, #2
  }
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3720      	adds	r7, #32
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	4613      	mov	r3, r2
 8006b62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	d11d      	bne.n	8006bac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <HAL_UART_Receive_IT+0x26>
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e016      	b.n	8006bae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d101      	bne.n	8006b8e <HAL_UART_Receive_IT+0x38>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e00f      	b.n	8006bae <HAL_UART_Receive_IT+0x58>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006b9c:	88fb      	ldrh	r3, [r7, #6]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68b9      	ldr	r1, [r7, #8]
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fa1e 	bl	8006fe4 <UART_Start_Receive_IT>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	e000      	b.n	8006bae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006bac:	2302      	movs	r3, #2
  }
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08a      	sub	sp, #40	; 0x28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10d      	bne.n	8006c0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_UART_IRQHandler+0x52>
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fad1 	bl	80071aa <UART_Receive_IT>
      return;
 8006c08:	e17c      	b.n	8006f04 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 80b1 	beq.w	8006d74 <HAL_UART_IRQHandler+0x1bc>
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d105      	bne.n	8006c28 <HAL_UART_IRQHandler+0x70>
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 80a6 	beq.w	8006d74 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <HAL_UART_IRQHandler+0x90>
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c40:	f043 0201 	orr.w	r2, r3, #1
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <HAL_UART_IRQHandler+0xb0>
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	f043 0202 	orr.w	r2, r3, #2
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <HAL_UART_IRQHandler+0xd0>
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c80:	f043 0204 	orr.w	r2, r3, #4
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00f      	beq.n	8006cb2 <HAL_UART_IRQHandler+0xfa>
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <HAL_UART_IRQHandler+0xee>
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	f043 0208 	orr.w	r2, r3, #8
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 811f 	beq.w	8006efa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d007      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x11e>
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	f003 0320 	and.w	r3, r3, #32
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fa6a 	bl	80071aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce0:	2b40      	cmp	r3, #64	; 0x40
 8006ce2:	bf0c      	ite	eq
 8006ce4:	2301      	moveq	r3, #1
 8006ce6:	2300      	movne	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d102      	bne.n	8006cfe <HAL_UART_IRQHandler+0x146>
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d031      	beq.n	8006d62 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f9aa 	bl	8007058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d123      	bne.n	8006d5a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695a      	ldr	r2, [r3, #20]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d20:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d013      	beq.n	8006d52 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	4a77      	ldr	r2, [pc, #476]	; (8006f0c <HAL_UART_IRQHandler+0x354>)
 8006d30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fd fd38 	bl	80047ac <HAL_DMA_Abort_IT>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d016      	beq.n	8006d70 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d50:	e00e      	b.n	8006d70 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f8e6 	bl	8006f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d58:	e00a      	b.n	8006d70 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f8e2 	bl	8006f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d60:	e006      	b.n	8006d70 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f8de 	bl	8006f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d6e:	e0c4      	b.n	8006efa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d70:	bf00      	nop
    return;
 8006d72:	e0c2      	b.n	8006efa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	f040 80a2 	bne.w	8006ec2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	f003 0310 	and.w	r3, r3, #16
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 809c 	beq.w	8006ec2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8096 	beq.w	8006ec2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	d14f      	bne.n	8006e5a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006dc4:	8a3b      	ldrh	r3, [r7, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 8099 	beq.w	8006efe <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dd0:	8a3a      	ldrh	r2, [r7, #16]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	f080 8093 	bcs.w	8006efe <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8a3a      	ldrh	r2, [r7, #16]
 8006ddc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de8:	d02b      	beq.n	8006e42 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006df8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	695a      	ldr	r2, [r3, #20]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0201 	bic.w	r2, r2, #1
 8006e08:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695a      	ldr	r2, [r3, #20]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e18:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0210 	bic.w	r2, r2, #16
 8006e36:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fd fc45 	bl	80046cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f870 	bl	8006f38 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e58:	e051      	b.n	8006efe <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d047      	beq.n	8006f02 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006e72:	8a7b      	ldrh	r3, [r7, #18]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d044      	beq.n	8006f02 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e86:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695a      	ldr	r2, [r3, #20]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0201 	bic.w	r2, r2, #1
 8006e96:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0210 	bic.w	r2, r2, #16
 8006eb4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006eb6:	8a7b      	ldrh	r3, [r7, #18]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f83c 	bl	8006f38 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ec0:	e01f      	b.n	8006f02 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <HAL_UART_IRQHandler+0x326>
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f8ff 	bl	80070da <UART_Transmit_IT>
    return;
 8006edc:	e012      	b.n	8006f04 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00d      	beq.n	8006f04 <HAL_UART_IRQHandler+0x34c>
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d008      	beq.n	8006f04 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f941 	bl	800717a <UART_EndTransmit_IT>
    return;
 8006ef8:	e004      	b.n	8006f04 <HAL_UART_IRQHandler+0x34c>
    return;
 8006efa:	bf00      	nop
 8006efc:	e002      	b.n	8006f04 <HAL_UART_IRQHandler+0x34c>
      return;
 8006efe:	bf00      	nop
 8006f00:	e000      	b.n	8006f04 <HAL_UART_IRQHandler+0x34c>
      return;
 8006f02:	bf00      	nop
  }
}
 8006f04:	3728      	adds	r7, #40	; 0x28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	080070b3 	.word	0x080070b3

08006f10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f60:	e02c      	b.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f68:	d028      	beq.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f70:	f7fc fc32 	bl	80037d8 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d21d      	bcs.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695a      	ldr	r2, [r3, #20]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0201 	bic.w	r2, r2, #1
 8006f9e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e00f      	b.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	bf0c      	ite	eq
 8006fcc:	2301      	moveq	r3, #1
 8006fce:	2300      	movne	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d0c3      	beq.n	8006f62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	88fa      	ldrh	r2, [r7, #6]
 8006ffc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	88fa      	ldrh	r2, [r7, #6]
 8007002:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2222      	movs	r2, #34	; 0x22
 800700e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007028:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695a      	ldr	r2, [r3, #20]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0201 	orr.w	r2, r2, #1
 8007038:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0220 	orr.w	r2, r2, #32
 8007048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800706e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	695a      	ldr	r2, [r3, #20]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0201 	bic.w	r2, r2, #1
 800707e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	2b01      	cmp	r3, #1
 8007086:	d107      	bne.n	8007098 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 0210 	bic.w	r2, r2, #16
 8007096:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2220      	movs	r2, #32
 800709c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff ff29 	bl	8006f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b21      	cmp	r3, #33	; 0x21
 80070ec:	d13e      	bne.n	800716c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f6:	d114      	bne.n	8007122 <UART_Transmit_IT+0x48>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d110      	bne.n	8007122 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007114:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	1c9a      	adds	r2, r3, #2
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	621a      	str	r2, [r3, #32]
 8007120:	e008      	b.n	8007134 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	1c59      	adds	r1, r3, #1
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6211      	str	r1, [r2, #32]
 800712c:	781a      	ldrb	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29b      	uxth	r3, r3
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	4619      	mov	r1, r3
 8007142:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10f      	bne.n	8007168 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007156:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007166:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	e000      	b.n	800716e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800716c:	2302      	movs	r3, #2
  }
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007190:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2220      	movs	r2, #32
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff feb8 	bl	8006f10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b084      	sub	sp, #16
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b22      	cmp	r3, #34	; 0x22
 80071bc:	f040 8087 	bne.w	80072ce <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c8:	d117      	bne.n	80071fa <UART_Receive_IT+0x50>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d113      	bne.n	80071fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	1c9a      	adds	r2, r3, #2
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	629a      	str	r2, [r3, #40]	; 0x28
 80071f8:	e026      	b.n	8007248 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fe:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007200:	2300      	movs	r3, #0
 8007202:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800720c:	d007      	beq.n	800721e <UART_Receive_IT+0x74>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10a      	bne.n	800722c <UART_Receive_IT+0x82>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	b2da      	uxtb	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	e008      	b.n	800723e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b29b      	uxth	r3, r3
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	4619      	mov	r1, r3
 8007256:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007258:	2b00      	cmp	r3, #0
 800725a:	d136      	bne.n	80072ca <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0220 	bic.w	r2, r2, #32
 800726a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800727a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695a      	ldr	r2, [r3, #20]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0201 	bic.w	r2, r2, #1
 800728a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2220      	movs	r2, #32
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007298:	2b01      	cmp	r3, #1
 800729a:	d10e      	bne.n	80072ba <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0210 	bic.w	r2, r2, #16
 80072aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff fe40 	bl	8006f38 <HAL_UARTEx_RxEventCallback>
 80072b8:	e002      	b.n	80072c0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fb ff18 	bl	80030f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e002      	b.n	80072d0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e000      	b.n	80072d0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80072ce:	2302      	movs	r3, #2
  }
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	b09f      	sub	sp, #124	; 0x7c
 80072de:	af00      	add	r7, sp, #0
 80072e0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ee:	68d9      	ldr	r1, [r3, #12]
 80072f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	ea40 0301 	orr.w	r3, r0, r1
 80072f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	431a      	orrs	r2, r3
 8007304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	431a      	orrs	r2, r3
 800730a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	4313      	orrs	r3, r2
 8007310:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800731c:	f021 010c 	bic.w	r1, r1, #12
 8007320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007326:	430b      	orrs	r3, r1
 8007328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800732a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007336:	6999      	ldr	r1, [r3, #24]
 8007338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	ea40 0301 	orr.w	r3, r0, r1
 8007340:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	4bc5      	ldr	r3, [pc, #788]	; (800765c <UART_SetConfig+0x384>)
 8007348:	429a      	cmp	r2, r3
 800734a:	d004      	beq.n	8007356 <UART_SetConfig+0x7e>
 800734c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	4bc3      	ldr	r3, [pc, #780]	; (8007660 <UART_SetConfig+0x388>)
 8007352:	429a      	cmp	r2, r3
 8007354:	d103      	bne.n	800735e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007356:	f7fe facb 	bl	80058f0 <HAL_RCC_GetPCLK2Freq>
 800735a:	6778      	str	r0, [r7, #116]	; 0x74
 800735c:	e002      	b.n	8007364 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800735e:	f7fe fab3 	bl	80058c8 <HAL_RCC_GetPCLK1Freq>
 8007362:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800736c:	f040 80b6 	bne.w	80074dc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007372:	461c      	mov	r4, r3
 8007374:	f04f 0500 	mov.w	r5, #0
 8007378:	4622      	mov	r2, r4
 800737a:	462b      	mov	r3, r5
 800737c:	1891      	adds	r1, r2, r2
 800737e:	6439      	str	r1, [r7, #64]	; 0x40
 8007380:	415b      	adcs	r3, r3
 8007382:	647b      	str	r3, [r7, #68]	; 0x44
 8007384:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007388:	1912      	adds	r2, r2, r4
 800738a:	eb45 0303 	adc.w	r3, r5, r3
 800738e:	f04f 0000 	mov.w	r0, #0
 8007392:	f04f 0100 	mov.w	r1, #0
 8007396:	00d9      	lsls	r1, r3, #3
 8007398:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800739c:	00d0      	lsls	r0, r2, #3
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	1911      	adds	r1, r2, r4
 80073a4:	6639      	str	r1, [r7, #96]	; 0x60
 80073a6:	416b      	adcs	r3, r5
 80073a8:	667b      	str	r3, [r7, #100]	; 0x64
 80073aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	1891      	adds	r1, r2, r2
 80073b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80073b8:	415b      	adcs	r3, r3
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80073c4:	f7f9 fc68 	bl	8000c98 <__aeabi_uldivmod>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4ba5      	ldr	r3, [pc, #660]	; (8007664 <UART_SetConfig+0x38c>)
 80073ce:	fba3 2302 	umull	r2, r3, r3, r2
 80073d2:	095b      	lsrs	r3, r3, #5
 80073d4:	011e      	lsls	r6, r3, #4
 80073d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d8:	461c      	mov	r4, r3
 80073da:	f04f 0500 	mov.w	r5, #0
 80073de:	4622      	mov	r2, r4
 80073e0:	462b      	mov	r3, r5
 80073e2:	1891      	adds	r1, r2, r2
 80073e4:	6339      	str	r1, [r7, #48]	; 0x30
 80073e6:	415b      	adcs	r3, r3
 80073e8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80073ee:	1912      	adds	r2, r2, r4
 80073f0:	eb45 0303 	adc.w	r3, r5, r3
 80073f4:	f04f 0000 	mov.w	r0, #0
 80073f8:	f04f 0100 	mov.w	r1, #0
 80073fc:	00d9      	lsls	r1, r3, #3
 80073fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007402:	00d0      	lsls	r0, r2, #3
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	1911      	adds	r1, r2, r4
 800740a:	65b9      	str	r1, [r7, #88]	; 0x58
 800740c:	416b      	adcs	r3, r5
 800740e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	461a      	mov	r2, r3
 8007416:	f04f 0300 	mov.w	r3, #0
 800741a:	1891      	adds	r1, r2, r2
 800741c:	62b9      	str	r1, [r7, #40]	; 0x28
 800741e:	415b      	adcs	r3, r3
 8007420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007426:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800742a:	f7f9 fc35 	bl	8000c98 <__aeabi_uldivmod>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4b8c      	ldr	r3, [pc, #560]	; (8007664 <UART_SetConfig+0x38c>)
 8007434:	fba3 1302 	umull	r1, r3, r3, r2
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	2164      	movs	r1, #100	; 0x64
 800743c:	fb01 f303 	mul.w	r3, r1, r3
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	3332      	adds	r3, #50	; 0x32
 8007446:	4a87      	ldr	r2, [pc, #540]	; (8007664 <UART_SetConfig+0x38c>)
 8007448:	fba2 2303 	umull	r2, r3, r2, r3
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007454:	441e      	add	r6, r3
 8007456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007458:	4618      	mov	r0, r3
 800745a:	f04f 0100 	mov.w	r1, #0
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	1894      	adds	r4, r2, r2
 8007464:	623c      	str	r4, [r7, #32]
 8007466:	415b      	adcs	r3, r3
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
 800746a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800746e:	1812      	adds	r2, r2, r0
 8007470:	eb41 0303 	adc.w	r3, r1, r3
 8007474:	f04f 0400 	mov.w	r4, #0
 8007478:	f04f 0500 	mov.w	r5, #0
 800747c:	00dd      	lsls	r5, r3, #3
 800747e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007482:	00d4      	lsls	r4, r2, #3
 8007484:	4622      	mov	r2, r4
 8007486:	462b      	mov	r3, r5
 8007488:	1814      	adds	r4, r2, r0
 800748a:	653c      	str	r4, [r7, #80]	; 0x50
 800748c:	414b      	adcs	r3, r1
 800748e:	657b      	str	r3, [r7, #84]	; 0x54
 8007490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	461a      	mov	r2, r3
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	1891      	adds	r1, r2, r2
 800749c:	61b9      	str	r1, [r7, #24]
 800749e:	415b      	adcs	r3, r3
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80074aa:	f7f9 fbf5 	bl	8000c98 <__aeabi_uldivmod>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4b6c      	ldr	r3, [pc, #432]	; (8007664 <UART_SetConfig+0x38c>)
 80074b4:	fba3 1302 	umull	r1, r3, r3, r2
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	2164      	movs	r1, #100	; 0x64
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	3332      	adds	r3, #50	; 0x32
 80074c6:	4a67      	ldr	r2, [pc, #412]	; (8007664 <UART_SetConfig+0x38c>)
 80074c8:	fba2 2303 	umull	r2, r3, r2, r3
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	f003 0207 	and.w	r2, r3, #7
 80074d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4432      	add	r2, r6
 80074d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074da:	e0b9      	b.n	8007650 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074de:	461c      	mov	r4, r3
 80074e0:	f04f 0500 	mov.w	r5, #0
 80074e4:	4622      	mov	r2, r4
 80074e6:	462b      	mov	r3, r5
 80074e8:	1891      	adds	r1, r2, r2
 80074ea:	6139      	str	r1, [r7, #16]
 80074ec:	415b      	adcs	r3, r3
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80074f4:	1912      	adds	r2, r2, r4
 80074f6:	eb45 0303 	adc.w	r3, r5, r3
 80074fa:	f04f 0000 	mov.w	r0, #0
 80074fe:	f04f 0100 	mov.w	r1, #0
 8007502:	00d9      	lsls	r1, r3, #3
 8007504:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007508:	00d0      	lsls	r0, r2, #3
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	eb12 0804 	adds.w	r8, r2, r4
 8007512:	eb43 0905 	adc.w	r9, r3, r5
 8007516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	4618      	mov	r0, r3
 800751c:	f04f 0100 	mov.w	r1, #0
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	f04f 0300 	mov.w	r3, #0
 8007528:	008b      	lsls	r3, r1, #2
 800752a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800752e:	0082      	lsls	r2, r0, #2
 8007530:	4640      	mov	r0, r8
 8007532:	4649      	mov	r1, r9
 8007534:	f7f9 fbb0 	bl	8000c98 <__aeabi_uldivmod>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4b49      	ldr	r3, [pc, #292]	; (8007664 <UART_SetConfig+0x38c>)
 800753e:	fba3 2302 	umull	r2, r3, r3, r2
 8007542:	095b      	lsrs	r3, r3, #5
 8007544:	011e      	lsls	r6, r3, #4
 8007546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007548:	4618      	mov	r0, r3
 800754a:	f04f 0100 	mov.w	r1, #0
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	1894      	adds	r4, r2, r2
 8007554:	60bc      	str	r4, [r7, #8]
 8007556:	415b      	adcs	r3, r3
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800755e:	1812      	adds	r2, r2, r0
 8007560:	eb41 0303 	adc.w	r3, r1, r3
 8007564:	f04f 0400 	mov.w	r4, #0
 8007568:	f04f 0500 	mov.w	r5, #0
 800756c:	00dd      	lsls	r5, r3, #3
 800756e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007572:	00d4      	lsls	r4, r2, #3
 8007574:	4622      	mov	r2, r4
 8007576:	462b      	mov	r3, r5
 8007578:	1814      	adds	r4, r2, r0
 800757a:	64bc      	str	r4, [r7, #72]	; 0x48
 800757c:	414b      	adcs	r3, r1
 800757e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4618      	mov	r0, r3
 8007586:	f04f 0100 	mov.w	r1, #0
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	f04f 0300 	mov.w	r3, #0
 8007592:	008b      	lsls	r3, r1, #2
 8007594:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007598:	0082      	lsls	r2, r0, #2
 800759a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800759e:	f7f9 fb7b 	bl	8000c98 <__aeabi_uldivmod>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4b2f      	ldr	r3, [pc, #188]	; (8007664 <UART_SetConfig+0x38c>)
 80075a8:	fba3 1302 	umull	r1, r3, r3, r2
 80075ac:	095b      	lsrs	r3, r3, #5
 80075ae:	2164      	movs	r1, #100	; 0x64
 80075b0:	fb01 f303 	mul.w	r3, r1, r3
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	3332      	adds	r3, #50	; 0x32
 80075ba:	4a2a      	ldr	r2, [pc, #168]	; (8007664 <UART_SetConfig+0x38c>)
 80075bc:	fba2 2303 	umull	r2, r3, r2, r3
 80075c0:	095b      	lsrs	r3, r3, #5
 80075c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075c6:	441e      	add	r6, r3
 80075c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075ca:	4618      	mov	r0, r3
 80075cc:	f04f 0100 	mov.w	r1, #0
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	1894      	adds	r4, r2, r2
 80075d6:	603c      	str	r4, [r7, #0]
 80075d8:	415b      	adcs	r3, r3
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e0:	1812      	adds	r2, r2, r0
 80075e2:	eb41 0303 	adc.w	r3, r1, r3
 80075e6:	f04f 0400 	mov.w	r4, #0
 80075ea:	f04f 0500 	mov.w	r5, #0
 80075ee:	00dd      	lsls	r5, r3, #3
 80075f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075f4:	00d4      	lsls	r4, r2, #3
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	eb12 0a00 	adds.w	sl, r2, r0
 80075fe:	eb43 0b01 	adc.w	fp, r3, r1
 8007602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	4618      	mov	r0, r3
 8007608:	f04f 0100 	mov.w	r1, #0
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	008b      	lsls	r3, r1, #2
 8007616:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800761a:	0082      	lsls	r2, r0, #2
 800761c:	4650      	mov	r0, sl
 800761e:	4659      	mov	r1, fp
 8007620:	f7f9 fb3a 	bl	8000c98 <__aeabi_uldivmod>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4b0e      	ldr	r3, [pc, #56]	; (8007664 <UART_SetConfig+0x38c>)
 800762a:	fba3 1302 	umull	r1, r3, r3, r2
 800762e:	095b      	lsrs	r3, r3, #5
 8007630:	2164      	movs	r1, #100	; 0x64
 8007632:	fb01 f303 	mul.w	r3, r1, r3
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	3332      	adds	r3, #50	; 0x32
 800763c:	4a09      	ldr	r2, [pc, #36]	; (8007664 <UART_SetConfig+0x38c>)
 800763e:	fba2 2303 	umull	r2, r3, r2, r3
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	f003 020f 	and.w	r2, r3, #15
 8007648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4432      	add	r2, r6
 800764e:	609a      	str	r2, [r3, #8]
}
 8007650:	bf00      	nop
 8007652:	377c      	adds	r7, #124	; 0x7c
 8007654:	46bd      	mov	sp, r7
 8007656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765a:	bf00      	nop
 800765c:	40011000 	.word	0x40011000
 8007660:	40011400 	.word	0x40011400
 8007664:	51eb851f 	.word	0x51eb851f

08007668 <__errno>:
 8007668:	4b01      	ldr	r3, [pc, #4]	; (8007670 <__errno+0x8>)
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	20000028 	.word	0x20000028

08007674 <__libc_init_array>:
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	4d0d      	ldr	r5, [pc, #52]	; (80076ac <__libc_init_array+0x38>)
 8007678:	4c0d      	ldr	r4, [pc, #52]	; (80076b0 <__libc_init_array+0x3c>)
 800767a:	1b64      	subs	r4, r4, r5
 800767c:	10a4      	asrs	r4, r4, #2
 800767e:	2600      	movs	r6, #0
 8007680:	42a6      	cmp	r6, r4
 8007682:	d109      	bne.n	8007698 <__libc_init_array+0x24>
 8007684:	4d0b      	ldr	r5, [pc, #44]	; (80076b4 <__libc_init_array+0x40>)
 8007686:	4c0c      	ldr	r4, [pc, #48]	; (80076b8 <__libc_init_array+0x44>)
 8007688:	f003 feec 	bl	800b464 <_init>
 800768c:	1b64      	subs	r4, r4, r5
 800768e:	10a4      	asrs	r4, r4, #2
 8007690:	2600      	movs	r6, #0
 8007692:	42a6      	cmp	r6, r4
 8007694:	d105      	bne.n	80076a2 <__libc_init_array+0x2e>
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	f855 3b04 	ldr.w	r3, [r5], #4
 800769c:	4798      	blx	r3
 800769e:	3601      	adds	r6, #1
 80076a0:	e7ee      	b.n	8007680 <__libc_init_array+0xc>
 80076a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a6:	4798      	blx	r3
 80076a8:	3601      	adds	r6, #1
 80076aa:	e7f2      	b.n	8007692 <__libc_init_array+0x1e>
 80076ac:	0800be30 	.word	0x0800be30
 80076b0:	0800be30 	.word	0x0800be30
 80076b4:	0800be30 	.word	0x0800be30
 80076b8:	0800be34 	.word	0x0800be34

080076bc <memset>:
 80076bc:	4402      	add	r2, r0
 80076be:	4603      	mov	r3, r0
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d100      	bne.n	80076c6 <memset+0xa>
 80076c4:	4770      	bx	lr
 80076c6:	f803 1b01 	strb.w	r1, [r3], #1
 80076ca:	e7f9      	b.n	80076c0 <memset+0x4>

080076cc <__cvt>:
 80076cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d0:	ec55 4b10 	vmov	r4, r5, d0
 80076d4:	2d00      	cmp	r5, #0
 80076d6:	460e      	mov	r6, r1
 80076d8:	4619      	mov	r1, r3
 80076da:	462b      	mov	r3, r5
 80076dc:	bfbb      	ittet	lt
 80076de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076e2:	461d      	movlt	r5, r3
 80076e4:	2300      	movge	r3, #0
 80076e6:	232d      	movlt	r3, #45	; 0x2d
 80076e8:	700b      	strb	r3, [r1, #0]
 80076ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076f0:	4691      	mov	r9, r2
 80076f2:	f023 0820 	bic.w	r8, r3, #32
 80076f6:	bfbc      	itt	lt
 80076f8:	4622      	movlt	r2, r4
 80076fa:	4614      	movlt	r4, r2
 80076fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007700:	d005      	beq.n	800770e <__cvt+0x42>
 8007702:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007706:	d100      	bne.n	800770a <__cvt+0x3e>
 8007708:	3601      	adds	r6, #1
 800770a:	2102      	movs	r1, #2
 800770c:	e000      	b.n	8007710 <__cvt+0x44>
 800770e:	2103      	movs	r1, #3
 8007710:	ab03      	add	r3, sp, #12
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	ab02      	add	r3, sp, #8
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	ec45 4b10 	vmov	d0, r4, r5
 800771c:	4653      	mov	r3, sl
 800771e:	4632      	mov	r2, r6
 8007720:	f000 fcea 	bl	80080f8 <_dtoa_r>
 8007724:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007728:	4607      	mov	r7, r0
 800772a:	d102      	bne.n	8007732 <__cvt+0x66>
 800772c:	f019 0f01 	tst.w	r9, #1
 8007730:	d022      	beq.n	8007778 <__cvt+0xac>
 8007732:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007736:	eb07 0906 	add.w	r9, r7, r6
 800773a:	d110      	bne.n	800775e <__cvt+0x92>
 800773c:	783b      	ldrb	r3, [r7, #0]
 800773e:	2b30      	cmp	r3, #48	; 0x30
 8007740:	d10a      	bne.n	8007758 <__cvt+0x8c>
 8007742:	2200      	movs	r2, #0
 8007744:	2300      	movs	r3, #0
 8007746:	4620      	mov	r0, r4
 8007748:	4629      	mov	r1, r5
 800774a:	f7f9 f9c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800774e:	b918      	cbnz	r0, 8007758 <__cvt+0x8c>
 8007750:	f1c6 0601 	rsb	r6, r6, #1
 8007754:	f8ca 6000 	str.w	r6, [sl]
 8007758:	f8da 3000 	ldr.w	r3, [sl]
 800775c:	4499      	add	r9, r3
 800775e:	2200      	movs	r2, #0
 8007760:	2300      	movs	r3, #0
 8007762:	4620      	mov	r0, r4
 8007764:	4629      	mov	r1, r5
 8007766:	f7f9 f9b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800776a:	b108      	cbz	r0, 8007770 <__cvt+0xa4>
 800776c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007770:	2230      	movs	r2, #48	; 0x30
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	454b      	cmp	r3, r9
 8007776:	d307      	bcc.n	8007788 <__cvt+0xbc>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800777c:	1bdb      	subs	r3, r3, r7
 800777e:	4638      	mov	r0, r7
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	b004      	add	sp, #16
 8007784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007788:	1c59      	adds	r1, r3, #1
 800778a:	9103      	str	r1, [sp, #12]
 800778c:	701a      	strb	r2, [r3, #0]
 800778e:	e7f0      	b.n	8007772 <__cvt+0xa6>

08007790 <__exponent>:
 8007790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007792:	4603      	mov	r3, r0
 8007794:	2900      	cmp	r1, #0
 8007796:	bfb8      	it	lt
 8007798:	4249      	neglt	r1, r1
 800779a:	f803 2b02 	strb.w	r2, [r3], #2
 800779e:	bfb4      	ite	lt
 80077a0:	222d      	movlt	r2, #45	; 0x2d
 80077a2:	222b      	movge	r2, #43	; 0x2b
 80077a4:	2909      	cmp	r1, #9
 80077a6:	7042      	strb	r2, [r0, #1]
 80077a8:	dd2a      	ble.n	8007800 <__exponent+0x70>
 80077aa:	f10d 0407 	add.w	r4, sp, #7
 80077ae:	46a4      	mov	ip, r4
 80077b0:	270a      	movs	r7, #10
 80077b2:	46a6      	mov	lr, r4
 80077b4:	460a      	mov	r2, r1
 80077b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80077ba:	fb07 1516 	mls	r5, r7, r6, r1
 80077be:	3530      	adds	r5, #48	; 0x30
 80077c0:	2a63      	cmp	r2, #99	; 0x63
 80077c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80077c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077ca:	4631      	mov	r1, r6
 80077cc:	dcf1      	bgt.n	80077b2 <__exponent+0x22>
 80077ce:	3130      	adds	r1, #48	; 0x30
 80077d0:	f1ae 0502 	sub.w	r5, lr, #2
 80077d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077d8:	1c44      	adds	r4, r0, #1
 80077da:	4629      	mov	r1, r5
 80077dc:	4561      	cmp	r1, ip
 80077de:	d30a      	bcc.n	80077f6 <__exponent+0x66>
 80077e0:	f10d 0209 	add.w	r2, sp, #9
 80077e4:	eba2 020e 	sub.w	r2, r2, lr
 80077e8:	4565      	cmp	r5, ip
 80077ea:	bf88      	it	hi
 80077ec:	2200      	movhi	r2, #0
 80077ee:	4413      	add	r3, r2
 80077f0:	1a18      	subs	r0, r3, r0
 80077f2:	b003      	add	sp, #12
 80077f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077fe:	e7ed      	b.n	80077dc <__exponent+0x4c>
 8007800:	2330      	movs	r3, #48	; 0x30
 8007802:	3130      	adds	r1, #48	; 0x30
 8007804:	7083      	strb	r3, [r0, #2]
 8007806:	70c1      	strb	r1, [r0, #3]
 8007808:	1d03      	adds	r3, r0, #4
 800780a:	e7f1      	b.n	80077f0 <__exponent+0x60>

0800780c <_printf_float>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	ed2d 8b02 	vpush	{d8}
 8007814:	b08d      	sub	sp, #52	; 0x34
 8007816:	460c      	mov	r4, r1
 8007818:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800781c:	4616      	mov	r6, r2
 800781e:	461f      	mov	r7, r3
 8007820:	4605      	mov	r5, r0
 8007822:	f001 fa55 	bl	8008cd0 <_localeconv_r>
 8007826:	f8d0 a000 	ldr.w	sl, [r0]
 800782a:	4650      	mov	r0, sl
 800782c:	f7f8 fcd8 	bl	80001e0 <strlen>
 8007830:	2300      	movs	r3, #0
 8007832:	930a      	str	r3, [sp, #40]	; 0x28
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	9305      	str	r3, [sp, #20]
 8007838:	f8d8 3000 	ldr.w	r3, [r8]
 800783c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007840:	3307      	adds	r3, #7
 8007842:	f023 0307 	bic.w	r3, r3, #7
 8007846:	f103 0208 	add.w	r2, r3, #8
 800784a:	f8c8 2000 	str.w	r2, [r8]
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007856:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800785a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800785e:	9307      	str	r3, [sp, #28]
 8007860:	f8cd 8018 	str.w	r8, [sp, #24]
 8007864:	ee08 0a10 	vmov	s16, r0
 8007868:	4b9f      	ldr	r3, [pc, #636]	; (8007ae8 <_printf_float+0x2dc>)
 800786a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800786e:	f04f 32ff 	mov.w	r2, #4294967295
 8007872:	f7f9 f963 	bl	8000b3c <__aeabi_dcmpun>
 8007876:	bb88      	cbnz	r0, 80078dc <_printf_float+0xd0>
 8007878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800787c:	4b9a      	ldr	r3, [pc, #616]	; (8007ae8 <_printf_float+0x2dc>)
 800787e:	f04f 32ff 	mov.w	r2, #4294967295
 8007882:	f7f9 f93d 	bl	8000b00 <__aeabi_dcmple>
 8007886:	bb48      	cbnz	r0, 80078dc <_printf_float+0xd0>
 8007888:	2200      	movs	r2, #0
 800788a:	2300      	movs	r3, #0
 800788c:	4640      	mov	r0, r8
 800788e:	4649      	mov	r1, r9
 8007890:	f7f9 f92c 	bl	8000aec <__aeabi_dcmplt>
 8007894:	b110      	cbz	r0, 800789c <_printf_float+0x90>
 8007896:	232d      	movs	r3, #45	; 0x2d
 8007898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800789c:	4b93      	ldr	r3, [pc, #588]	; (8007aec <_printf_float+0x2e0>)
 800789e:	4894      	ldr	r0, [pc, #592]	; (8007af0 <_printf_float+0x2e4>)
 80078a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80078a4:	bf94      	ite	ls
 80078a6:	4698      	movls	r8, r3
 80078a8:	4680      	movhi	r8, r0
 80078aa:	2303      	movs	r3, #3
 80078ac:	6123      	str	r3, [r4, #16]
 80078ae:	9b05      	ldr	r3, [sp, #20]
 80078b0:	f023 0204 	bic.w	r2, r3, #4
 80078b4:	6022      	str	r2, [r4, #0]
 80078b6:	f04f 0900 	mov.w	r9, #0
 80078ba:	9700      	str	r7, [sp, #0]
 80078bc:	4633      	mov	r3, r6
 80078be:	aa0b      	add	r2, sp, #44	; 0x2c
 80078c0:	4621      	mov	r1, r4
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f9d8 	bl	8007c78 <_printf_common>
 80078c8:	3001      	adds	r0, #1
 80078ca:	f040 8090 	bne.w	80079ee <_printf_float+0x1e2>
 80078ce:	f04f 30ff 	mov.w	r0, #4294967295
 80078d2:	b00d      	add	sp, #52	; 0x34
 80078d4:	ecbd 8b02 	vpop	{d8}
 80078d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078dc:	4642      	mov	r2, r8
 80078de:	464b      	mov	r3, r9
 80078e0:	4640      	mov	r0, r8
 80078e2:	4649      	mov	r1, r9
 80078e4:	f7f9 f92a 	bl	8000b3c <__aeabi_dcmpun>
 80078e8:	b140      	cbz	r0, 80078fc <_printf_float+0xf0>
 80078ea:	464b      	mov	r3, r9
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bfbc      	itt	lt
 80078f0:	232d      	movlt	r3, #45	; 0x2d
 80078f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078f6:	487f      	ldr	r0, [pc, #508]	; (8007af4 <_printf_float+0x2e8>)
 80078f8:	4b7f      	ldr	r3, [pc, #508]	; (8007af8 <_printf_float+0x2ec>)
 80078fa:	e7d1      	b.n	80078a0 <_printf_float+0x94>
 80078fc:	6863      	ldr	r3, [r4, #4]
 80078fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007902:	9206      	str	r2, [sp, #24]
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	d13f      	bne.n	8007988 <_printf_float+0x17c>
 8007908:	2306      	movs	r3, #6
 800790a:	6063      	str	r3, [r4, #4]
 800790c:	9b05      	ldr	r3, [sp, #20]
 800790e:	6861      	ldr	r1, [r4, #4]
 8007910:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007914:	2300      	movs	r3, #0
 8007916:	9303      	str	r3, [sp, #12]
 8007918:	ab0a      	add	r3, sp, #40	; 0x28
 800791a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800791e:	ab09      	add	r3, sp, #36	; 0x24
 8007920:	ec49 8b10 	vmov	d0, r8, r9
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	6022      	str	r2, [r4, #0]
 8007928:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800792c:	4628      	mov	r0, r5
 800792e:	f7ff fecd 	bl	80076cc <__cvt>
 8007932:	9b06      	ldr	r3, [sp, #24]
 8007934:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007936:	2b47      	cmp	r3, #71	; 0x47
 8007938:	4680      	mov	r8, r0
 800793a:	d108      	bne.n	800794e <_printf_float+0x142>
 800793c:	1cc8      	adds	r0, r1, #3
 800793e:	db02      	blt.n	8007946 <_printf_float+0x13a>
 8007940:	6863      	ldr	r3, [r4, #4]
 8007942:	4299      	cmp	r1, r3
 8007944:	dd41      	ble.n	80079ca <_printf_float+0x1be>
 8007946:	f1ab 0b02 	sub.w	fp, fp, #2
 800794a:	fa5f fb8b 	uxtb.w	fp, fp
 800794e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007952:	d820      	bhi.n	8007996 <_printf_float+0x18a>
 8007954:	3901      	subs	r1, #1
 8007956:	465a      	mov	r2, fp
 8007958:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800795c:	9109      	str	r1, [sp, #36]	; 0x24
 800795e:	f7ff ff17 	bl	8007790 <__exponent>
 8007962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007964:	1813      	adds	r3, r2, r0
 8007966:	2a01      	cmp	r2, #1
 8007968:	4681      	mov	r9, r0
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	dc02      	bgt.n	8007974 <_printf_float+0x168>
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	07d2      	lsls	r2, r2, #31
 8007972:	d501      	bpl.n	8007978 <_printf_float+0x16c>
 8007974:	3301      	adds	r3, #1
 8007976:	6123      	str	r3, [r4, #16]
 8007978:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800797c:	2b00      	cmp	r3, #0
 800797e:	d09c      	beq.n	80078ba <_printf_float+0xae>
 8007980:	232d      	movs	r3, #45	; 0x2d
 8007982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007986:	e798      	b.n	80078ba <_printf_float+0xae>
 8007988:	9a06      	ldr	r2, [sp, #24]
 800798a:	2a47      	cmp	r2, #71	; 0x47
 800798c:	d1be      	bne.n	800790c <_printf_float+0x100>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1bc      	bne.n	800790c <_printf_float+0x100>
 8007992:	2301      	movs	r3, #1
 8007994:	e7b9      	b.n	800790a <_printf_float+0xfe>
 8007996:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800799a:	d118      	bne.n	80079ce <_printf_float+0x1c2>
 800799c:	2900      	cmp	r1, #0
 800799e:	6863      	ldr	r3, [r4, #4]
 80079a0:	dd0b      	ble.n	80079ba <_printf_float+0x1ae>
 80079a2:	6121      	str	r1, [r4, #16]
 80079a4:	b913      	cbnz	r3, 80079ac <_printf_float+0x1a0>
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	07d0      	lsls	r0, r2, #31
 80079aa:	d502      	bpl.n	80079b2 <_printf_float+0x1a6>
 80079ac:	3301      	adds	r3, #1
 80079ae:	440b      	add	r3, r1
 80079b0:	6123      	str	r3, [r4, #16]
 80079b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80079b4:	f04f 0900 	mov.w	r9, #0
 80079b8:	e7de      	b.n	8007978 <_printf_float+0x16c>
 80079ba:	b913      	cbnz	r3, 80079c2 <_printf_float+0x1b6>
 80079bc:	6822      	ldr	r2, [r4, #0]
 80079be:	07d2      	lsls	r2, r2, #31
 80079c0:	d501      	bpl.n	80079c6 <_printf_float+0x1ba>
 80079c2:	3302      	adds	r3, #2
 80079c4:	e7f4      	b.n	80079b0 <_printf_float+0x1a4>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e7f2      	b.n	80079b0 <_printf_float+0x1a4>
 80079ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d0:	4299      	cmp	r1, r3
 80079d2:	db05      	blt.n	80079e0 <_printf_float+0x1d4>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	6121      	str	r1, [r4, #16]
 80079d8:	07d8      	lsls	r0, r3, #31
 80079da:	d5ea      	bpl.n	80079b2 <_printf_float+0x1a6>
 80079dc:	1c4b      	adds	r3, r1, #1
 80079de:	e7e7      	b.n	80079b0 <_printf_float+0x1a4>
 80079e0:	2900      	cmp	r1, #0
 80079e2:	bfd4      	ite	le
 80079e4:	f1c1 0202 	rsble	r2, r1, #2
 80079e8:	2201      	movgt	r2, #1
 80079ea:	4413      	add	r3, r2
 80079ec:	e7e0      	b.n	80079b0 <_printf_float+0x1a4>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	055a      	lsls	r2, r3, #21
 80079f2:	d407      	bmi.n	8007a04 <_printf_float+0x1f8>
 80079f4:	6923      	ldr	r3, [r4, #16]
 80079f6:	4642      	mov	r2, r8
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	47b8      	blx	r7
 80079fe:	3001      	adds	r0, #1
 8007a00:	d12c      	bne.n	8007a5c <_printf_float+0x250>
 8007a02:	e764      	b.n	80078ce <_printf_float+0xc2>
 8007a04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a08:	f240 80e0 	bls.w	8007bcc <_printf_float+0x3c0>
 8007a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a10:	2200      	movs	r2, #0
 8007a12:	2300      	movs	r3, #0
 8007a14:	f7f9 f860 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d034      	beq.n	8007a86 <_printf_float+0x27a>
 8007a1c:	4a37      	ldr	r2, [pc, #220]	; (8007afc <_printf_float+0x2f0>)
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4631      	mov	r1, r6
 8007a22:	4628      	mov	r0, r5
 8007a24:	47b8      	blx	r7
 8007a26:	3001      	adds	r0, #1
 8007a28:	f43f af51 	beq.w	80078ce <_printf_float+0xc2>
 8007a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a30:	429a      	cmp	r2, r3
 8007a32:	db02      	blt.n	8007a3a <_printf_float+0x22e>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	07d8      	lsls	r0, r3, #31
 8007a38:	d510      	bpl.n	8007a5c <_printf_float+0x250>
 8007a3a:	ee18 3a10 	vmov	r3, s16
 8007a3e:	4652      	mov	r2, sl
 8007a40:	4631      	mov	r1, r6
 8007a42:	4628      	mov	r0, r5
 8007a44:	47b8      	blx	r7
 8007a46:	3001      	adds	r0, #1
 8007a48:	f43f af41 	beq.w	80078ce <_printf_float+0xc2>
 8007a4c:	f04f 0800 	mov.w	r8, #0
 8007a50:	f104 091a 	add.w	r9, r4, #26
 8007a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a56:	3b01      	subs	r3, #1
 8007a58:	4543      	cmp	r3, r8
 8007a5a:	dc09      	bgt.n	8007a70 <_printf_float+0x264>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	079b      	lsls	r3, r3, #30
 8007a60:	f100 8105 	bmi.w	8007c6e <_printf_float+0x462>
 8007a64:	68e0      	ldr	r0, [r4, #12]
 8007a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a68:	4298      	cmp	r0, r3
 8007a6a:	bfb8      	it	lt
 8007a6c:	4618      	movlt	r0, r3
 8007a6e:	e730      	b.n	80078d2 <_printf_float+0xc6>
 8007a70:	2301      	movs	r3, #1
 8007a72:	464a      	mov	r2, r9
 8007a74:	4631      	mov	r1, r6
 8007a76:	4628      	mov	r0, r5
 8007a78:	47b8      	blx	r7
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	f43f af27 	beq.w	80078ce <_printf_float+0xc2>
 8007a80:	f108 0801 	add.w	r8, r8, #1
 8007a84:	e7e6      	b.n	8007a54 <_printf_float+0x248>
 8007a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dc39      	bgt.n	8007b00 <_printf_float+0x2f4>
 8007a8c:	4a1b      	ldr	r2, [pc, #108]	; (8007afc <_printf_float+0x2f0>)
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4631      	mov	r1, r6
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b8      	blx	r7
 8007a96:	3001      	adds	r0, #1
 8007a98:	f43f af19 	beq.w	80078ce <_printf_float+0xc2>
 8007a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	d102      	bne.n	8007aaa <_printf_float+0x29e>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	07d9      	lsls	r1, r3, #31
 8007aa8:	d5d8      	bpl.n	8007a5c <_printf_float+0x250>
 8007aaa:	ee18 3a10 	vmov	r3, s16
 8007aae:	4652      	mov	r2, sl
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	47b8      	blx	r7
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f43f af09 	beq.w	80078ce <_printf_float+0xc2>
 8007abc:	f04f 0900 	mov.w	r9, #0
 8007ac0:	f104 0a1a 	add.w	sl, r4, #26
 8007ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac6:	425b      	negs	r3, r3
 8007ac8:	454b      	cmp	r3, r9
 8007aca:	dc01      	bgt.n	8007ad0 <_printf_float+0x2c4>
 8007acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ace:	e792      	b.n	80079f6 <_printf_float+0x1ea>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	4652      	mov	r2, sl
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	47b8      	blx	r7
 8007ada:	3001      	adds	r0, #1
 8007adc:	f43f aef7 	beq.w	80078ce <_printf_float+0xc2>
 8007ae0:	f109 0901 	add.w	r9, r9, #1
 8007ae4:	e7ee      	b.n	8007ac4 <_printf_float+0x2b8>
 8007ae6:	bf00      	nop
 8007ae8:	7fefffff 	.word	0x7fefffff
 8007aec:	0800b86c 	.word	0x0800b86c
 8007af0:	0800b870 	.word	0x0800b870
 8007af4:	0800b878 	.word	0x0800b878
 8007af8:	0800b874 	.word	0x0800b874
 8007afc:	0800b87c 	.word	0x0800b87c
 8007b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b04:	429a      	cmp	r2, r3
 8007b06:	bfa8      	it	ge
 8007b08:	461a      	movge	r2, r3
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	4691      	mov	r9, r2
 8007b0e:	dc37      	bgt.n	8007b80 <_printf_float+0x374>
 8007b10:	f04f 0b00 	mov.w	fp, #0
 8007b14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b18:	f104 021a 	add.w	r2, r4, #26
 8007b1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b1e:	9305      	str	r3, [sp, #20]
 8007b20:	eba3 0309 	sub.w	r3, r3, r9
 8007b24:	455b      	cmp	r3, fp
 8007b26:	dc33      	bgt.n	8007b90 <_printf_float+0x384>
 8007b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	db3b      	blt.n	8007ba8 <_printf_float+0x39c>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	07da      	lsls	r2, r3, #31
 8007b34:	d438      	bmi.n	8007ba8 <_printf_float+0x39c>
 8007b36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b38:	9b05      	ldr	r3, [sp, #20]
 8007b3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	eba2 0901 	sub.w	r9, r2, r1
 8007b42:	4599      	cmp	r9, r3
 8007b44:	bfa8      	it	ge
 8007b46:	4699      	movge	r9, r3
 8007b48:	f1b9 0f00 	cmp.w	r9, #0
 8007b4c:	dc35      	bgt.n	8007bba <_printf_float+0x3ae>
 8007b4e:	f04f 0800 	mov.w	r8, #0
 8007b52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b56:	f104 0a1a 	add.w	sl, r4, #26
 8007b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b5e:	1a9b      	subs	r3, r3, r2
 8007b60:	eba3 0309 	sub.w	r3, r3, r9
 8007b64:	4543      	cmp	r3, r8
 8007b66:	f77f af79 	ble.w	8007a5c <_printf_float+0x250>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4652      	mov	r2, sl
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b8      	blx	r7
 8007b74:	3001      	adds	r0, #1
 8007b76:	f43f aeaa 	beq.w	80078ce <_printf_float+0xc2>
 8007b7a:	f108 0801 	add.w	r8, r8, #1
 8007b7e:	e7ec      	b.n	8007b5a <_printf_float+0x34e>
 8007b80:	4613      	mov	r3, r2
 8007b82:	4631      	mov	r1, r6
 8007b84:	4642      	mov	r2, r8
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b8      	blx	r7
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d1c0      	bne.n	8007b10 <_printf_float+0x304>
 8007b8e:	e69e      	b.n	80078ce <_printf_float+0xc2>
 8007b90:	2301      	movs	r3, #1
 8007b92:	4631      	mov	r1, r6
 8007b94:	4628      	mov	r0, r5
 8007b96:	9205      	str	r2, [sp, #20]
 8007b98:	47b8      	blx	r7
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	f43f ae97 	beq.w	80078ce <_printf_float+0xc2>
 8007ba0:	9a05      	ldr	r2, [sp, #20]
 8007ba2:	f10b 0b01 	add.w	fp, fp, #1
 8007ba6:	e7b9      	b.n	8007b1c <_printf_float+0x310>
 8007ba8:	ee18 3a10 	vmov	r3, s16
 8007bac:	4652      	mov	r2, sl
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b8      	blx	r7
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	d1be      	bne.n	8007b36 <_printf_float+0x32a>
 8007bb8:	e689      	b.n	80078ce <_printf_float+0xc2>
 8007bba:	9a05      	ldr	r2, [sp, #20]
 8007bbc:	464b      	mov	r3, r9
 8007bbe:	4442      	add	r2, r8
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	d1c1      	bne.n	8007b4e <_printf_float+0x342>
 8007bca:	e680      	b.n	80078ce <_printf_float+0xc2>
 8007bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bce:	2a01      	cmp	r2, #1
 8007bd0:	dc01      	bgt.n	8007bd6 <_printf_float+0x3ca>
 8007bd2:	07db      	lsls	r3, r3, #31
 8007bd4:	d538      	bpl.n	8007c48 <_printf_float+0x43c>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4642      	mov	r2, r8
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	f43f ae74 	beq.w	80078ce <_printf_float+0xc2>
 8007be6:	ee18 3a10 	vmov	r3, s16
 8007bea:	4652      	mov	r2, sl
 8007bec:	4631      	mov	r1, r6
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b8      	blx	r7
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	f43f ae6b 	beq.w	80078ce <_printf_float+0xc2>
 8007bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f7f8 ff6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c04:	b9d8      	cbnz	r0, 8007c3e <_printf_float+0x432>
 8007c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c08:	f108 0201 	add.w	r2, r8, #1
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b8      	blx	r7
 8007c14:	3001      	adds	r0, #1
 8007c16:	d10e      	bne.n	8007c36 <_printf_float+0x42a>
 8007c18:	e659      	b.n	80078ce <_printf_float+0xc2>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4628      	mov	r0, r5
 8007c22:	47b8      	blx	r7
 8007c24:	3001      	adds	r0, #1
 8007c26:	f43f ae52 	beq.w	80078ce <_printf_float+0xc2>
 8007c2a:	f108 0801 	add.w	r8, r8, #1
 8007c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c30:	3b01      	subs	r3, #1
 8007c32:	4543      	cmp	r3, r8
 8007c34:	dcf1      	bgt.n	8007c1a <_printf_float+0x40e>
 8007c36:	464b      	mov	r3, r9
 8007c38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c3c:	e6dc      	b.n	80079f8 <_printf_float+0x1ec>
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	f104 0a1a 	add.w	sl, r4, #26
 8007c46:	e7f2      	b.n	8007c2e <_printf_float+0x422>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	4642      	mov	r2, r8
 8007c4c:	e7df      	b.n	8007c0e <_printf_float+0x402>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	464a      	mov	r2, r9
 8007c52:	4631      	mov	r1, r6
 8007c54:	4628      	mov	r0, r5
 8007c56:	47b8      	blx	r7
 8007c58:	3001      	adds	r0, #1
 8007c5a:	f43f ae38 	beq.w	80078ce <_printf_float+0xc2>
 8007c5e:	f108 0801 	add.w	r8, r8, #1
 8007c62:	68e3      	ldr	r3, [r4, #12]
 8007c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c66:	1a5b      	subs	r3, r3, r1
 8007c68:	4543      	cmp	r3, r8
 8007c6a:	dcf0      	bgt.n	8007c4e <_printf_float+0x442>
 8007c6c:	e6fa      	b.n	8007a64 <_printf_float+0x258>
 8007c6e:	f04f 0800 	mov.w	r8, #0
 8007c72:	f104 0919 	add.w	r9, r4, #25
 8007c76:	e7f4      	b.n	8007c62 <_printf_float+0x456>

08007c78 <_printf_common>:
 8007c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c7c:	4616      	mov	r6, r2
 8007c7e:	4699      	mov	r9, r3
 8007c80:	688a      	ldr	r2, [r1, #8]
 8007c82:	690b      	ldr	r3, [r1, #16]
 8007c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	bfb8      	it	lt
 8007c8c:	4613      	movlt	r3, r2
 8007c8e:	6033      	str	r3, [r6, #0]
 8007c90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c94:	4607      	mov	r7, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	b10a      	cbz	r2, 8007c9e <_printf_common+0x26>
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	6033      	str	r3, [r6, #0]
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	0699      	lsls	r1, r3, #26
 8007ca2:	bf42      	ittt	mi
 8007ca4:	6833      	ldrmi	r3, [r6, #0]
 8007ca6:	3302      	addmi	r3, #2
 8007ca8:	6033      	strmi	r3, [r6, #0]
 8007caa:	6825      	ldr	r5, [r4, #0]
 8007cac:	f015 0506 	ands.w	r5, r5, #6
 8007cb0:	d106      	bne.n	8007cc0 <_printf_common+0x48>
 8007cb2:	f104 0a19 	add.w	sl, r4, #25
 8007cb6:	68e3      	ldr	r3, [r4, #12]
 8007cb8:	6832      	ldr	r2, [r6, #0]
 8007cba:	1a9b      	subs	r3, r3, r2
 8007cbc:	42ab      	cmp	r3, r5
 8007cbe:	dc26      	bgt.n	8007d0e <_printf_common+0x96>
 8007cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cc4:	1e13      	subs	r3, r2, #0
 8007cc6:	6822      	ldr	r2, [r4, #0]
 8007cc8:	bf18      	it	ne
 8007cca:	2301      	movne	r3, #1
 8007ccc:	0692      	lsls	r2, r2, #26
 8007cce:	d42b      	bmi.n	8007d28 <_printf_common+0xb0>
 8007cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	47c0      	blx	r8
 8007cda:	3001      	adds	r0, #1
 8007cdc:	d01e      	beq.n	8007d1c <_printf_common+0xa4>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	68e5      	ldr	r5, [r4, #12]
 8007ce2:	6832      	ldr	r2, [r6, #0]
 8007ce4:	f003 0306 	and.w	r3, r3, #6
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	bf08      	it	eq
 8007cec:	1aad      	subeq	r5, r5, r2
 8007cee:	68a3      	ldr	r3, [r4, #8]
 8007cf0:	6922      	ldr	r2, [r4, #16]
 8007cf2:	bf0c      	ite	eq
 8007cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cf8:	2500      	movne	r5, #0
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	bfc4      	itt	gt
 8007cfe:	1a9b      	subgt	r3, r3, r2
 8007d00:	18ed      	addgt	r5, r5, r3
 8007d02:	2600      	movs	r6, #0
 8007d04:	341a      	adds	r4, #26
 8007d06:	42b5      	cmp	r5, r6
 8007d08:	d11a      	bne.n	8007d40 <_printf_common+0xc8>
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	e008      	b.n	8007d20 <_printf_common+0xa8>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4652      	mov	r2, sl
 8007d12:	4649      	mov	r1, r9
 8007d14:	4638      	mov	r0, r7
 8007d16:	47c0      	blx	r8
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d103      	bne.n	8007d24 <_printf_common+0xac>
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d24:	3501      	adds	r5, #1
 8007d26:	e7c6      	b.n	8007cb6 <_printf_common+0x3e>
 8007d28:	18e1      	adds	r1, r4, r3
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	2030      	movs	r0, #48	; 0x30
 8007d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d32:	4422      	add	r2, r4
 8007d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	e7c7      	b.n	8007cd0 <_printf_common+0x58>
 8007d40:	2301      	movs	r3, #1
 8007d42:	4622      	mov	r2, r4
 8007d44:	4649      	mov	r1, r9
 8007d46:	4638      	mov	r0, r7
 8007d48:	47c0      	blx	r8
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d0e6      	beq.n	8007d1c <_printf_common+0xa4>
 8007d4e:	3601      	adds	r6, #1
 8007d50:	e7d9      	b.n	8007d06 <_printf_common+0x8e>
	...

08007d54 <_printf_i>:
 8007d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d58:	460c      	mov	r4, r1
 8007d5a:	4691      	mov	r9, r2
 8007d5c:	7e27      	ldrb	r7, [r4, #24]
 8007d5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d60:	2f78      	cmp	r7, #120	; 0x78
 8007d62:	4680      	mov	r8, r0
 8007d64:	469a      	mov	sl, r3
 8007d66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d6a:	d807      	bhi.n	8007d7c <_printf_i+0x28>
 8007d6c:	2f62      	cmp	r7, #98	; 0x62
 8007d6e:	d80a      	bhi.n	8007d86 <_printf_i+0x32>
 8007d70:	2f00      	cmp	r7, #0
 8007d72:	f000 80d8 	beq.w	8007f26 <_printf_i+0x1d2>
 8007d76:	2f58      	cmp	r7, #88	; 0x58
 8007d78:	f000 80a3 	beq.w	8007ec2 <_printf_i+0x16e>
 8007d7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d84:	e03a      	b.n	8007dfc <_printf_i+0xa8>
 8007d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d8a:	2b15      	cmp	r3, #21
 8007d8c:	d8f6      	bhi.n	8007d7c <_printf_i+0x28>
 8007d8e:	a001      	add	r0, pc, #4	; (adr r0, 8007d94 <_printf_i+0x40>)
 8007d90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d94:	08007ded 	.word	0x08007ded
 8007d98:	08007e01 	.word	0x08007e01
 8007d9c:	08007d7d 	.word	0x08007d7d
 8007da0:	08007d7d 	.word	0x08007d7d
 8007da4:	08007d7d 	.word	0x08007d7d
 8007da8:	08007d7d 	.word	0x08007d7d
 8007dac:	08007e01 	.word	0x08007e01
 8007db0:	08007d7d 	.word	0x08007d7d
 8007db4:	08007d7d 	.word	0x08007d7d
 8007db8:	08007d7d 	.word	0x08007d7d
 8007dbc:	08007d7d 	.word	0x08007d7d
 8007dc0:	08007f0d 	.word	0x08007f0d
 8007dc4:	08007e31 	.word	0x08007e31
 8007dc8:	08007eef 	.word	0x08007eef
 8007dcc:	08007d7d 	.word	0x08007d7d
 8007dd0:	08007d7d 	.word	0x08007d7d
 8007dd4:	08007f2f 	.word	0x08007f2f
 8007dd8:	08007d7d 	.word	0x08007d7d
 8007ddc:	08007e31 	.word	0x08007e31
 8007de0:	08007d7d 	.word	0x08007d7d
 8007de4:	08007d7d 	.word	0x08007d7d
 8007de8:	08007ef7 	.word	0x08007ef7
 8007dec:	680b      	ldr	r3, [r1, #0]
 8007dee:	1d1a      	adds	r2, r3, #4
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	600a      	str	r2, [r1, #0]
 8007df4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e0a3      	b.n	8007f48 <_printf_i+0x1f4>
 8007e00:	6825      	ldr	r5, [r4, #0]
 8007e02:	6808      	ldr	r0, [r1, #0]
 8007e04:	062e      	lsls	r6, r5, #24
 8007e06:	f100 0304 	add.w	r3, r0, #4
 8007e0a:	d50a      	bpl.n	8007e22 <_printf_i+0xce>
 8007e0c:	6805      	ldr	r5, [r0, #0]
 8007e0e:	600b      	str	r3, [r1, #0]
 8007e10:	2d00      	cmp	r5, #0
 8007e12:	da03      	bge.n	8007e1c <_printf_i+0xc8>
 8007e14:	232d      	movs	r3, #45	; 0x2d
 8007e16:	426d      	negs	r5, r5
 8007e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e1c:	485e      	ldr	r0, [pc, #376]	; (8007f98 <_printf_i+0x244>)
 8007e1e:	230a      	movs	r3, #10
 8007e20:	e019      	b.n	8007e56 <_printf_i+0x102>
 8007e22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e26:	6805      	ldr	r5, [r0, #0]
 8007e28:	600b      	str	r3, [r1, #0]
 8007e2a:	bf18      	it	ne
 8007e2c:	b22d      	sxthne	r5, r5
 8007e2e:	e7ef      	b.n	8007e10 <_printf_i+0xbc>
 8007e30:	680b      	ldr	r3, [r1, #0]
 8007e32:	6825      	ldr	r5, [r4, #0]
 8007e34:	1d18      	adds	r0, r3, #4
 8007e36:	6008      	str	r0, [r1, #0]
 8007e38:	0628      	lsls	r0, r5, #24
 8007e3a:	d501      	bpl.n	8007e40 <_printf_i+0xec>
 8007e3c:	681d      	ldr	r5, [r3, #0]
 8007e3e:	e002      	b.n	8007e46 <_printf_i+0xf2>
 8007e40:	0669      	lsls	r1, r5, #25
 8007e42:	d5fb      	bpl.n	8007e3c <_printf_i+0xe8>
 8007e44:	881d      	ldrh	r5, [r3, #0]
 8007e46:	4854      	ldr	r0, [pc, #336]	; (8007f98 <_printf_i+0x244>)
 8007e48:	2f6f      	cmp	r7, #111	; 0x6f
 8007e4a:	bf0c      	ite	eq
 8007e4c:	2308      	moveq	r3, #8
 8007e4e:	230a      	movne	r3, #10
 8007e50:	2100      	movs	r1, #0
 8007e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e56:	6866      	ldr	r6, [r4, #4]
 8007e58:	60a6      	str	r6, [r4, #8]
 8007e5a:	2e00      	cmp	r6, #0
 8007e5c:	bfa2      	ittt	ge
 8007e5e:	6821      	ldrge	r1, [r4, #0]
 8007e60:	f021 0104 	bicge.w	r1, r1, #4
 8007e64:	6021      	strge	r1, [r4, #0]
 8007e66:	b90d      	cbnz	r5, 8007e6c <_printf_i+0x118>
 8007e68:	2e00      	cmp	r6, #0
 8007e6a:	d04d      	beq.n	8007f08 <_printf_i+0x1b4>
 8007e6c:	4616      	mov	r6, r2
 8007e6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e72:	fb03 5711 	mls	r7, r3, r1, r5
 8007e76:	5dc7      	ldrb	r7, [r0, r7]
 8007e78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e7c:	462f      	mov	r7, r5
 8007e7e:	42bb      	cmp	r3, r7
 8007e80:	460d      	mov	r5, r1
 8007e82:	d9f4      	bls.n	8007e6e <_printf_i+0x11a>
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d10b      	bne.n	8007ea0 <_printf_i+0x14c>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	07df      	lsls	r7, r3, #31
 8007e8c:	d508      	bpl.n	8007ea0 <_printf_i+0x14c>
 8007e8e:	6923      	ldr	r3, [r4, #16]
 8007e90:	6861      	ldr	r1, [r4, #4]
 8007e92:	4299      	cmp	r1, r3
 8007e94:	bfde      	ittt	le
 8007e96:	2330      	movle	r3, #48	; 0x30
 8007e98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ea0:	1b92      	subs	r2, r2, r6
 8007ea2:	6122      	str	r2, [r4, #16]
 8007ea4:	f8cd a000 	str.w	sl, [sp]
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	aa03      	add	r2, sp, #12
 8007eac:	4621      	mov	r1, r4
 8007eae:	4640      	mov	r0, r8
 8007eb0:	f7ff fee2 	bl	8007c78 <_printf_common>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d14c      	bne.n	8007f52 <_printf_i+0x1fe>
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	b004      	add	sp, #16
 8007ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec2:	4835      	ldr	r0, [pc, #212]	; (8007f98 <_printf_i+0x244>)
 8007ec4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	680e      	ldr	r6, [r1, #0]
 8007ecc:	061f      	lsls	r7, r3, #24
 8007ece:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ed2:	600e      	str	r6, [r1, #0]
 8007ed4:	d514      	bpl.n	8007f00 <_printf_i+0x1ac>
 8007ed6:	07d9      	lsls	r1, r3, #31
 8007ed8:	bf44      	itt	mi
 8007eda:	f043 0320 	orrmi.w	r3, r3, #32
 8007ede:	6023      	strmi	r3, [r4, #0]
 8007ee0:	b91d      	cbnz	r5, 8007eea <_printf_i+0x196>
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	f023 0320 	bic.w	r3, r3, #32
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	2310      	movs	r3, #16
 8007eec:	e7b0      	b.n	8007e50 <_printf_i+0xfc>
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	f043 0320 	orr.w	r3, r3, #32
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	2378      	movs	r3, #120	; 0x78
 8007ef8:	4828      	ldr	r0, [pc, #160]	; (8007f9c <_printf_i+0x248>)
 8007efa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007efe:	e7e3      	b.n	8007ec8 <_printf_i+0x174>
 8007f00:	065e      	lsls	r6, r3, #25
 8007f02:	bf48      	it	mi
 8007f04:	b2ad      	uxthmi	r5, r5
 8007f06:	e7e6      	b.n	8007ed6 <_printf_i+0x182>
 8007f08:	4616      	mov	r6, r2
 8007f0a:	e7bb      	b.n	8007e84 <_printf_i+0x130>
 8007f0c:	680b      	ldr	r3, [r1, #0]
 8007f0e:	6826      	ldr	r6, [r4, #0]
 8007f10:	6960      	ldr	r0, [r4, #20]
 8007f12:	1d1d      	adds	r5, r3, #4
 8007f14:	600d      	str	r5, [r1, #0]
 8007f16:	0635      	lsls	r5, r6, #24
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	d501      	bpl.n	8007f20 <_printf_i+0x1cc>
 8007f1c:	6018      	str	r0, [r3, #0]
 8007f1e:	e002      	b.n	8007f26 <_printf_i+0x1d2>
 8007f20:	0671      	lsls	r1, r6, #25
 8007f22:	d5fb      	bpl.n	8007f1c <_printf_i+0x1c8>
 8007f24:	8018      	strh	r0, [r3, #0]
 8007f26:	2300      	movs	r3, #0
 8007f28:	6123      	str	r3, [r4, #16]
 8007f2a:	4616      	mov	r6, r2
 8007f2c:	e7ba      	b.n	8007ea4 <_printf_i+0x150>
 8007f2e:	680b      	ldr	r3, [r1, #0]
 8007f30:	1d1a      	adds	r2, r3, #4
 8007f32:	600a      	str	r2, [r1, #0]
 8007f34:	681e      	ldr	r6, [r3, #0]
 8007f36:	6862      	ldr	r2, [r4, #4]
 8007f38:	2100      	movs	r1, #0
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7f8 f958 	bl	80001f0 <memchr>
 8007f40:	b108      	cbz	r0, 8007f46 <_printf_i+0x1f2>
 8007f42:	1b80      	subs	r0, r0, r6
 8007f44:	6060      	str	r0, [r4, #4]
 8007f46:	6863      	ldr	r3, [r4, #4]
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f50:	e7a8      	b.n	8007ea4 <_printf_i+0x150>
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	4632      	mov	r2, r6
 8007f56:	4649      	mov	r1, r9
 8007f58:	4640      	mov	r0, r8
 8007f5a:	47d0      	blx	sl
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d0ab      	beq.n	8007eb8 <_printf_i+0x164>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	079b      	lsls	r3, r3, #30
 8007f64:	d413      	bmi.n	8007f8e <_printf_i+0x23a>
 8007f66:	68e0      	ldr	r0, [r4, #12]
 8007f68:	9b03      	ldr	r3, [sp, #12]
 8007f6a:	4298      	cmp	r0, r3
 8007f6c:	bfb8      	it	lt
 8007f6e:	4618      	movlt	r0, r3
 8007f70:	e7a4      	b.n	8007ebc <_printf_i+0x168>
 8007f72:	2301      	movs	r3, #1
 8007f74:	4632      	mov	r2, r6
 8007f76:	4649      	mov	r1, r9
 8007f78:	4640      	mov	r0, r8
 8007f7a:	47d0      	blx	sl
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d09b      	beq.n	8007eb8 <_printf_i+0x164>
 8007f80:	3501      	adds	r5, #1
 8007f82:	68e3      	ldr	r3, [r4, #12]
 8007f84:	9903      	ldr	r1, [sp, #12]
 8007f86:	1a5b      	subs	r3, r3, r1
 8007f88:	42ab      	cmp	r3, r5
 8007f8a:	dcf2      	bgt.n	8007f72 <_printf_i+0x21e>
 8007f8c:	e7eb      	b.n	8007f66 <_printf_i+0x212>
 8007f8e:	2500      	movs	r5, #0
 8007f90:	f104 0619 	add.w	r6, r4, #25
 8007f94:	e7f5      	b.n	8007f82 <_printf_i+0x22e>
 8007f96:	bf00      	nop
 8007f98:	0800b87e 	.word	0x0800b87e
 8007f9c:	0800b88f 	.word	0x0800b88f

08007fa0 <siprintf>:
 8007fa0:	b40e      	push	{r1, r2, r3}
 8007fa2:	b500      	push	{lr}
 8007fa4:	b09c      	sub	sp, #112	; 0x70
 8007fa6:	ab1d      	add	r3, sp, #116	; 0x74
 8007fa8:	9002      	str	r0, [sp, #8]
 8007faa:	9006      	str	r0, [sp, #24]
 8007fac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fb0:	4809      	ldr	r0, [pc, #36]	; (8007fd8 <siprintf+0x38>)
 8007fb2:	9107      	str	r1, [sp, #28]
 8007fb4:	9104      	str	r1, [sp, #16]
 8007fb6:	4909      	ldr	r1, [pc, #36]	; (8007fdc <siprintf+0x3c>)
 8007fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fbc:	9105      	str	r1, [sp, #20]
 8007fbe:	6800      	ldr	r0, [r0, #0]
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	a902      	add	r1, sp, #8
 8007fc4:	f001 fb32 	bl	800962c <_svfiprintf_r>
 8007fc8:	9b02      	ldr	r3, [sp, #8]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	b01c      	add	sp, #112	; 0x70
 8007fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fd4:	b003      	add	sp, #12
 8007fd6:	4770      	bx	lr
 8007fd8:	20000028 	.word	0x20000028
 8007fdc:	ffff0208 	.word	0xffff0208

08007fe0 <quorem>:
 8007fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	6903      	ldr	r3, [r0, #16]
 8007fe6:	690c      	ldr	r4, [r1, #16]
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	4607      	mov	r7, r0
 8007fec:	f2c0 8081 	blt.w	80080f2 <quorem+0x112>
 8007ff0:	3c01      	subs	r4, #1
 8007ff2:	f101 0814 	add.w	r8, r1, #20
 8007ff6:	f100 0514 	add.w	r5, r0, #20
 8007ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ffe:	9301      	str	r3, [sp, #4]
 8008000:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008008:	3301      	adds	r3, #1
 800800a:	429a      	cmp	r2, r3
 800800c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008010:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008014:	fbb2 f6f3 	udiv	r6, r2, r3
 8008018:	d331      	bcc.n	800807e <quorem+0x9e>
 800801a:	f04f 0e00 	mov.w	lr, #0
 800801e:	4640      	mov	r0, r8
 8008020:	46ac      	mov	ip, r5
 8008022:	46f2      	mov	sl, lr
 8008024:	f850 2b04 	ldr.w	r2, [r0], #4
 8008028:	b293      	uxth	r3, r2
 800802a:	fb06 e303 	mla	r3, r6, r3, lr
 800802e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008032:	b29b      	uxth	r3, r3
 8008034:	ebaa 0303 	sub.w	r3, sl, r3
 8008038:	0c12      	lsrs	r2, r2, #16
 800803a:	f8dc a000 	ldr.w	sl, [ip]
 800803e:	fb06 e202 	mla	r2, r6, r2, lr
 8008042:	fa13 f38a 	uxtah	r3, r3, sl
 8008046:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800804a:	fa1f fa82 	uxth.w	sl, r2
 800804e:	f8dc 2000 	ldr.w	r2, [ip]
 8008052:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008056:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800805a:	b29b      	uxth	r3, r3
 800805c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008060:	4581      	cmp	r9, r0
 8008062:	f84c 3b04 	str.w	r3, [ip], #4
 8008066:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800806a:	d2db      	bcs.n	8008024 <quorem+0x44>
 800806c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008070:	b92b      	cbnz	r3, 800807e <quorem+0x9e>
 8008072:	9b01      	ldr	r3, [sp, #4]
 8008074:	3b04      	subs	r3, #4
 8008076:	429d      	cmp	r5, r3
 8008078:	461a      	mov	r2, r3
 800807a:	d32e      	bcc.n	80080da <quorem+0xfa>
 800807c:	613c      	str	r4, [r7, #16]
 800807e:	4638      	mov	r0, r7
 8008080:	f001 f8be 	bl	8009200 <__mcmp>
 8008084:	2800      	cmp	r0, #0
 8008086:	db24      	blt.n	80080d2 <quorem+0xf2>
 8008088:	3601      	adds	r6, #1
 800808a:	4628      	mov	r0, r5
 800808c:	f04f 0c00 	mov.w	ip, #0
 8008090:	f858 2b04 	ldr.w	r2, [r8], #4
 8008094:	f8d0 e000 	ldr.w	lr, [r0]
 8008098:	b293      	uxth	r3, r2
 800809a:	ebac 0303 	sub.w	r3, ip, r3
 800809e:	0c12      	lsrs	r2, r2, #16
 80080a0:	fa13 f38e 	uxtah	r3, r3, lr
 80080a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080b2:	45c1      	cmp	r9, r8
 80080b4:	f840 3b04 	str.w	r3, [r0], #4
 80080b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080bc:	d2e8      	bcs.n	8008090 <quorem+0xb0>
 80080be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080c6:	b922      	cbnz	r2, 80080d2 <quorem+0xf2>
 80080c8:	3b04      	subs	r3, #4
 80080ca:	429d      	cmp	r5, r3
 80080cc:	461a      	mov	r2, r3
 80080ce:	d30a      	bcc.n	80080e6 <quorem+0x106>
 80080d0:	613c      	str	r4, [r7, #16]
 80080d2:	4630      	mov	r0, r6
 80080d4:	b003      	add	sp, #12
 80080d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080da:	6812      	ldr	r2, [r2, #0]
 80080dc:	3b04      	subs	r3, #4
 80080de:	2a00      	cmp	r2, #0
 80080e0:	d1cc      	bne.n	800807c <quorem+0x9c>
 80080e2:	3c01      	subs	r4, #1
 80080e4:	e7c7      	b.n	8008076 <quorem+0x96>
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	3b04      	subs	r3, #4
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	d1f0      	bne.n	80080d0 <quorem+0xf0>
 80080ee:	3c01      	subs	r4, #1
 80080f0:	e7eb      	b.n	80080ca <quorem+0xea>
 80080f2:	2000      	movs	r0, #0
 80080f4:	e7ee      	b.n	80080d4 <quorem+0xf4>
	...

080080f8 <_dtoa_r>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	ed2d 8b02 	vpush	{d8}
 8008100:	ec57 6b10 	vmov	r6, r7, d0
 8008104:	b095      	sub	sp, #84	; 0x54
 8008106:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008108:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800810c:	9105      	str	r1, [sp, #20]
 800810e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008112:	4604      	mov	r4, r0
 8008114:	9209      	str	r2, [sp, #36]	; 0x24
 8008116:	930f      	str	r3, [sp, #60]	; 0x3c
 8008118:	b975      	cbnz	r5, 8008138 <_dtoa_r+0x40>
 800811a:	2010      	movs	r0, #16
 800811c:	f000 fddc 	bl	8008cd8 <malloc>
 8008120:	4602      	mov	r2, r0
 8008122:	6260      	str	r0, [r4, #36]	; 0x24
 8008124:	b920      	cbnz	r0, 8008130 <_dtoa_r+0x38>
 8008126:	4bb2      	ldr	r3, [pc, #712]	; (80083f0 <_dtoa_r+0x2f8>)
 8008128:	21ea      	movs	r1, #234	; 0xea
 800812a:	48b2      	ldr	r0, [pc, #712]	; (80083f4 <_dtoa_r+0x2fc>)
 800812c:	f001 fb8e 	bl	800984c <__assert_func>
 8008130:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008134:	6005      	str	r5, [r0, #0]
 8008136:	60c5      	str	r5, [r0, #12]
 8008138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800813a:	6819      	ldr	r1, [r3, #0]
 800813c:	b151      	cbz	r1, 8008154 <_dtoa_r+0x5c>
 800813e:	685a      	ldr	r2, [r3, #4]
 8008140:	604a      	str	r2, [r1, #4]
 8008142:	2301      	movs	r3, #1
 8008144:	4093      	lsls	r3, r2
 8008146:	608b      	str	r3, [r1, #8]
 8008148:	4620      	mov	r0, r4
 800814a:	f000 fe1b 	bl	8008d84 <_Bfree>
 800814e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	1e3b      	subs	r3, r7, #0
 8008156:	bfb9      	ittee	lt
 8008158:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800815c:	9303      	strlt	r3, [sp, #12]
 800815e:	2300      	movge	r3, #0
 8008160:	f8c8 3000 	strge.w	r3, [r8]
 8008164:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008168:	4ba3      	ldr	r3, [pc, #652]	; (80083f8 <_dtoa_r+0x300>)
 800816a:	bfbc      	itt	lt
 800816c:	2201      	movlt	r2, #1
 800816e:	f8c8 2000 	strlt.w	r2, [r8]
 8008172:	ea33 0309 	bics.w	r3, r3, r9
 8008176:	d11b      	bne.n	80081b0 <_dtoa_r+0xb8>
 8008178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800817a:	f242 730f 	movw	r3, #9999	; 0x270f
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008184:	4333      	orrs	r3, r6
 8008186:	f000 857a 	beq.w	8008c7e <_dtoa_r+0xb86>
 800818a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800818c:	b963      	cbnz	r3, 80081a8 <_dtoa_r+0xb0>
 800818e:	4b9b      	ldr	r3, [pc, #620]	; (80083fc <_dtoa_r+0x304>)
 8008190:	e024      	b.n	80081dc <_dtoa_r+0xe4>
 8008192:	4b9b      	ldr	r3, [pc, #620]	; (8008400 <_dtoa_r+0x308>)
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	3308      	adds	r3, #8
 8008198:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	9800      	ldr	r0, [sp, #0]
 800819e:	b015      	add	sp, #84	; 0x54
 80081a0:	ecbd 8b02 	vpop	{d8}
 80081a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a8:	4b94      	ldr	r3, [pc, #592]	; (80083fc <_dtoa_r+0x304>)
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	3303      	adds	r3, #3
 80081ae:	e7f3      	b.n	8008198 <_dtoa_r+0xa0>
 80081b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081b4:	2200      	movs	r2, #0
 80081b6:	ec51 0b17 	vmov	r0, r1, d7
 80081ba:	2300      	movs	r3, #0
 80081bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80081c0:	f7f8 fc8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80081c4:	4680      	mov	r8, r0
 80081c6:	b158      	cbz	r0, 80081e0 <_dtoa_r+0xe8>
 80081c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081ca:	2301      	movs	r3, #1
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 8551 	beq.w	8008c78 <_dtoa_r+0xb80>
 80081d6:	488b      	ldr	r0, [pc, #556]	; (8008404 <_dtoa_r+0x30c>)
 80081d8:	6018      	str	r0, [r3, #0]
 80081da:	1e43      	subs	r3, r0, #1
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	e7dd      	b.n	800819c <_dtoa_r+0xa4>
 80081e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80081e4:	aa12      	add	r2, sp, #72	; 0x48
 80081e6:	a913      	add	r1, sp, #76	; 0x4c
 80081e8:	4620      	mov	r0, r4
 80081ea:	f001 f8ad 	bl	8009348 <__d2b>
 80081ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081f2:	4683      	mov	fp, r0
 80081f4:	2d00      	cmp	r5, #0
 80081f6:	d07c      	beq.n	80082f2 <_dtoa_r+0x1fa>
 80081f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80081fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008202:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008206:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800820a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800820e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008212:	4b7d      	ldr	r3, [pc, #500]	; (8008408 <_dtoa_r+0x310>)
 8008214:	2200      	movs	r2, #0
 8008216:	4630      	mov	r0, r6
 8008218:	4639      	mov	r1, r7
 800821a:	f7f8 f83d 	bl	8000298 <__aeabi_dsub>
 800821e:	a36e      	add	r3, pc, #440	; (adr r3, 80083d8 <_dtoa_r+0x2e0>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f8 f9f0 	bl	8000608 <__aeabi_dmul>
 8008228:	a36d      	add	r3, pc, #436	; (adr r3, 80083e0 <_dtoa_r+0x2e8>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f7f8 f835 	bl	800029c <__adddf3>
 8008232:	4606      	mov	r6, r0
 8008234:	4628      	mov	r0, r5
 8008236:	460f      	mov	r7, r1
 8008238:	f7f8 f97c 	bl	8000534 <__aeabi_i2d>
 800823c:	a36a      	add	r3, pc, #424	; (adr r3, 80083e8 <_dtoa_r+0x2f0>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f7f8 f9e1 	bl	8000608 <__aeabi_dmul>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4630      	mov	r0, r6
 800824c:	4639      	mov	r1, r7
 800824e:	f7f8 f825 	bl	800029c <__adddf3>
 8008252:	4606      	mov	r6, r0
 8008254:	460f      	mov	r7, r1
 8008256:	f7f8 fc87 	bl	8000b68 <__aeabi_d2iz>
 800825a:	2200      	movs	r2, #0
 800825c:	4682      	mov	sl, r0
 800825e:	2300      	movs	r3, #0
 8008260:	4630      	mov	r0, r6
 8008262:	4639      	mov	r1, r7
 8008264:	f7f8 fc42 	bl	8000aec <__aeabi_dcmplt>
 8008268:	b148      	cbz	r0, 800827e <_dtoa_r+0x186>
 800826a:	4650      	mov	r0, sl
 800826c:	f7f8 f962 	bl	8000534 <__aeabi_i2d>
 8008270:	4632      	mov	r2, r6
 8008272:	463b      	mov	r3, r7
 8008274:	f7f8 fc30 	bl	8000ad8 <__aeabi_dcmpeq>
 8008278:	b908      	cbnz	r0, 800827e <_dtoa_r+0x186>
 800827a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800827e:	f1ba 0f16 	cmp.w	sl, #22
 8008282:	d854      	bhi.n	800832e <_dtoa_r+0x236>
 8008284:	4b61      	ldr	r3, [pc, #388]	; (800840c <_dtoa_r+0x314>)
 8008286:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008292:	f7f8 fc2b 	bl	8000aec <__aeabi_dcmplt>
 8008296:	2800      	cmp	r0, #0
 8008298:	d04b      	beq.n	8008332 <_dtoa_r+0x23a>
 800829a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800829e:	2300      	movs	r3, #0
 80082a0:	930e      	str	r3, [sp, #56]	; 0x38
 80082a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082a4:	1b5d      	subs	r5, r3, r5
 80082a6:	1e6b      	subs	r3, r5, #1
 80082a8:	9304      	str	r3, [sp, #16]
 80082aa:	bf43      	ittte	mi
 80082ac:	2300      	movmi	r3, #0
 80082ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80082b2:	9304      	strmi	r3, [sp, #16]
 80082b4:	f04f 0800 	movpl.w	r8, #0
 80082b8:	f1ba 0f00 	cmp.w	sl, #0
 80082bc:	db3b      	blt.n	8008336 <_dtoa_r+0x23e>
 80082be:	9b04      	ldr	r3, [sp, #16]
 80082c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80082c4:	4453      	add	r3, sl
 80082c6:	9304      	str	r3, [sp, #16]
 80082c8:	2300      	movs	r3, #0
 80082ca:	9306      	str	r3, [sp, #24]
 80082cc:	9b05      	ldr	r3, [sp, #20]
 80082ce:	2b09      	cmp	r3, #9
 80082d0:	d869      	bhi.n	80083a6 <_dtoa_r+0x2ae>
 80082d2:	2b05      	cmp	r3, #5
 80082d4:	bfc4      	itt	gt
 80082d6:	3b04      	subgt	r3, #4
 80082d8:	9305      	strgt	r3, [sp, #20]
 80082da:	9b05      	ldr	r3, [sp, #20]
 80082dc:	f1a3 0302 	sub.w	r3, r3, #2
 80082e0:	bfcc      	ite	gt
 80082e2:	2500      	movgt	r5, #0
 80082e4:	2501      	movle	r5, #1
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d869      	bhi.n	80083be <_dtoa_r+0x2c6>
 80082ea:	e8df f003 	tbb	[pc, r3]
 80082ee:	4e2c      	.short	0x4e2c
 80082f0:	5a4c      	.short	0x5a4c
 80082f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80082f6:	441d      	add	r5, r3
 80082f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	bfc1      	itttt	gt
 8008300:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008304:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008308:	fa09 f303 	lslgt.w	r3, r9, r3
 800830c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008310:	bfda      	itte	le
 8008312:	f1c3 0320 	rsble	r3, r3, #32
 8008316:	fa06 f003 	lslle.w	r0, r6, r3
 800831a:	4318      	orrgt	r0, r3
 800831c:	f7f8 f8fa 	bl	8000514 <__aeabi_ui2d>
 8008320:	2301      	movs	r3, #1
 8008322:	4606      	mov	r6, r0
 8008324:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008328:	3d01      	subs	r5, #1
 800832a:	9310      	str	r3, [sp, #64]	; 0x40
 800832c:	e771      	b.n	8008212 <_dtoa_r+0x11a>
 800832e:	2301      	movs	r3, #1
 8008330:	e7b6      	b.n	80082a0 <_dtoa_r+0x1a8>
 8008332:	900e      	str	r0, [sp, #56]	; 0x38
 8008334:	e7b5      	b.n	80082a2 <_dtoa_r+0x1aa>
 8008336:	f1ca 0300 	rsb	r3, sl, #0
 800833a:	9306      	str	r3, [sp, #24]
 800833c:	2300      	movs	r3, #0
 800833e:	eba8 080a 	sub.w	r8, r8, sl
 8008342:	930d      	str	r3, [sp, #52]	; 0x34
 8008344:	e7c2      	b.n	80082cc <_dtoa_r+0x1d4>
 8008346:	2300      	movs	r3, #0
 8008348:	9308      	str	r3, [sp, #32]
 800834a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	dc39      	bgt.n	80083c4 <_dtoa_r+0x2cc>
 8008350:	f04f 0901 	mov.w	r9, #1
 8008354:	f8cd 9004 	str.w	r9, [sp, #4]
 8008358:	464b      	mov	r3, r9
 800835a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800835e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008360:	2200      	movs	r2, #0
 8008362:	6042      	str	r2, [r0, #4]
 8008364:	2204      	movs	r2, #4
 8008366:	f102 0614 	add.w	r6, r2, #20
 800836a:	429e      	cmp	r6, r3
 800836c:	6841      	ldr	r1, [r0, #4]
 800836e:	d92f      	bls.n	80083d0 <_dtoa_r+0x2d8>
 8008370:	4620      	mov	r0, r4
 8008372:	f000 fcc7 	bl	8008d04 <_Balloc>
 8008376:	9000      	str	r0, [sp, #0]
 8008378:	2800      	cmp	r0, #0
 800837a:	d14b      	bne.n	8008414 <_dtoa_r+0x31c>
 800837c:	4b24      	ldr	r3, [pc, #144]	; (8008410 <_dtoa_r+0x318>)
 800837e:	4602      	mov	r2, r0
 8008380:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008384:	e6d1      	b.n	800812a <_dtoa_r+0x32>
 8008386:	2301      	movs	r3, #1
 8008388:	e7de      	b.n	8008348 <_dtoa_r+0x250>
 800838a:	2300      	movs	r3, #0
 800838c:	9308      	str	r3, [sp, #32]
 800838e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008390:	eb0a 0903 	add.w	r9, sl, r3
 8008394:	f109 0301 	add.w	r3, r9, #1
 8008398:	2b01      	cmp	r3, #1
 800839a:	9301      	str	r3, [sp, #4]
 800839c:	bfb8      	it	lt
 800839e:	2301      	movlt	r3, #1
 80083a0:	e7dd      	b.n	800835e <_dtoa_r+0x266>
 80083a2:	2301      	movs	r3, #1
 80083a4:	e7f2      	b.n	800838c <_dtoa_r+0x294>
 80083a6:	2501      	movs	r5, #1
 80083a8:	2300      	movs	r3, #0
 80083aa:	9305      	str	r3, [sp, #20]
 80083ac:	9508      	str	r5, [sp, #32]
 80083ae:	f04f 39ff 	mov.w	r9, #4294967295
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80083b8:	2312      	movs	r3, #18
 80083ba:	9209      	str	r2, [sp, #36]	; 0x24
 80083bc:	e7cf      	b.n	800835e <_dtoa_r+0x266>
 80083be:	2301      	movs	r3, #1
 80083c0:	9308      	str	r3, [sp, #32]
 80083c2:	e7f4      	b.n	80083ae <_dtoa_r+0x2b6>
 80083c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80083c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80083cc:	464b      	mov	r3, r9
 80083ce:	e7c6      	b.n	800835e <_dtoa_r+0x266>
 80083d0:	3101      	adds	r1, #1
 80083d2:	6041      	str	r1, [r0, #4]
 80083d4:	0052      	lsls	r2, r2, #1
 80083d6:	e7c6      	b.n	8008366 <_dtoa_r+0x26e>
 80083d8:	636f4361 	.word	0x636f4361
 80083dc:	3fd287a7 	.word	0x3fd287a7
 80083e0:	8b60c8b3 	.word	0x8b60c8b3
 80083e4:	3fc68a28 	.word	0x3fc68a28
 80083e8:	509f79fb 	.word	0x509f79fb
 80083ec:	3fd34413 	.word	0x3fd34413
 80083f0:	0800b8ad 	.word	0x0800b8ad
 80083f4:	0800b8c4 	.word	0x0800b8c4
 80083f8:	7ff00000 	.word	0x7ff00000
 80083fc:	0800b8a9 	.word	0x0800b8a9
 8008400:	0800b8a0 	.word	0x0800b8a0
 8008404:	0800b87d 	.word	0x0800b87d
 8008408:	3ff80000 	.word	0x3ff80000
 800840c:	0800b9c0 	.word	0x0800b9c0
 8008410:	0800b923 	.word	0x0800b923
 8008414:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008416:	9a00      	ldr	r2, [sp, #0]
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	9b01      	ldr	r3, [sp, #4]
 800841c:	2b0e      	cmp	r3, #14
 800841e:	f200 80ad 	bhi.w	800857c <_dtoa_r+0x484>
 8008422:	2d00      	cmp	r5, #0
 8008424:	f000 80aa 	beq.w	800857c <_dtoa_r+0x484>
 8008428:	f1ba 0f00 	cmp.w	sl, #0
 800842c:	dd36      	ble.n	800849c <_dtoa_r+0x3a4>
 800842e:	4ac3      	ldr	r2, [pc, #780]	; (800873c <_dtoa_r+0x644>)
 8008430:	f00a 030f 	and.w	r3, sl, #15
 8008434:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008438:	ed93 7b00 	vldr	d7, [r3]
 800843c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008440:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008444:	eeb0 8a47 	vmov.f32	s16, s14
 8008448:	eef0 8a67 	vmov.f32	s17, s15
 800844c:	d016      	beq.n	800847c <_dtoa_r+0x384>
 800844e:	4bbc      	ldr	r3, [pc, #752]	; (8008740 <_dtoa_r+0x648>)
 8008450:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008454:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008458:	f7f8 fa00 	bl	800085c <__aeabi_ddiv>
 800845c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008460:	f007 070f 	and.w	r7, r7, #15
 8008464:	2503      	movs	r5, #3
 8008466:	4eb6      	ldr	r6, [pc, #728]	; (8008740 <_dtoa_r+0x648>)
 8008468:	b957      	cbnz	r7, 8008480 <_dtoa_r+0x388>
 800846a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800846e:	ec53 2b18 	vmov	r2, r3, d8
 8008472:	f7f8 f9f3 	bl	800085c <__aeabi_ddiv>
 8008476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800847a:	e029      	b.n	80084d0 <_dtoa_r+0x3d8>
 800847c:	2502      	movs	r5, #2
 800847e:	e7f2      	b.n	8008466 <_dtoa_r+0x36e>
 8008480:	07f9      	lsls	r1, r7, #31
 8008482:	d508      	bpl.n	8008496 <_dtoa_r+0x39e>
 8008484:	ec51 0b18 	vmov	r0, r1, d8
 8008488:	e9d6 2300 	ldrd	r2, r3, [r6]
 800848c:	f7f8 f8bc 	bl	8000608 <__aeabi_dmul>
 8008490:	ec41 0b18 	vmov	d8, r0, r1
 8008494:	3501      	adds	r5, #1
 8008496:	107f      	asrs	r7, r7, #1
 8008498:	3608      	adds	r6, #8
 800849a:	e7e5      	b.n	8008468 <_dtoa_r+0x370>
 800849c:	f000 80a6 	beq.w	80085ec <_dtoa_r+0x4f4>
 80084a0:	f1ca 0600 	rsb	r6, sl, #0
 80084a4:	4ba5      	ldr	r3, [pc, #660]	; (800873c <_dtoa_r+0x644>)
 80084a6:	4fa6      	ldr	r7, [pc, #664]	; (8008740 <_dtoa_r+0x648>)
 80084a8:	f006 020f 	and.w	r2, r6, #15
 80084ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084b8:	f7f8 f8a6 	bl	8000608 <__aeabi_dmul>
 80084bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084c0:	1136      	asrs	r6, r6, #4
 80084c2:	2300      	movs	r3, #0
 80084c4:	2502      	movs	r5, #2
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	f040 8085 	bne.w	80085d6 <_dtoa_r+0x4de>
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1d2      	bne.n	8008476 <_dtoa_r+0x37e>
 80084d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 808c 	beq.w	80085f0 <_dtoa_r+0x4f8>
 80084d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084dc:	4b99      	ldr	r3, [pc, #612]	; (8008744 <_dtoa_r+0x64c>)
 80084de:	2200      	movs	r2, #0
 80084e0:	4630      	mov	r0, r6
 80084e2:	4639      	mov	r1, r7
 80084e4:	f7f8 fb02 	bl	8000aec <__aeabi_dcmplt>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	f000 8081 	beq.w	80085f0 <_dtoa_r+0x4f8>
 80084ee:	9b01      	ldr	r3, [sp, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d07d      	beq.n	80085f0 <_dtoa_r+0x4f8>
 80084f4:	f1b9 0f00 	cmp.w	r9, #0
 80084f8:	dd3c      	ble.n	8008574 <_dtoa_r+0x47c>
 80084fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80084fe:	9307      	str	r3, [sp, #28]
 8008500:	2200      	movs	r2, #0
 8008502:	4b91      	ldr	r3, [pc, #580]	; (8008748 <_dtoa_r+0x650>)
 8008504:	4630      	mov	r0, r6
 8008506:	4639      	mov	r1, r7
 8008508:	f7f8 f87e 	bl	8000608 <__aeabi_dmul>
 800850c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008510:	3501      	adds	r5, #1
 8008512:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008516:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800851a:	4628      	mov	r0, r5
 800851c:	f7f8 f80a 	bl	8000534 <__aeabi_i2d>
 8008520:	4632      	mov	r2, r6
 8008522:	463b      	mov	r3, r7
 8008524:	f7f8 f870 	bl	8000608 <__aeabi_dmul>
 8008528:	4b88      	ldr	r3, [pc, #544]	; (800874c <_dtoa_r+0x654>)
 800852a:	2200      	movs	r2, #0
 800852c:	f7f7 feb6 	bl	800029c <__adddf3>
 8008530:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008538:	9303      	str	r3, [sp, #12]
 800853a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800853c:	2b00      	cmp	r3, #0
 800853e:	d15c      	bne.n	80085fa <_dtoa_r+0x502>
 8008540:	4b83      	ldr	r3, [pc, #524]	; (8008750 <_dtoa_r+0x658>)
 8008542:	2200      	movs	r2, #0
 8008544:	4630      	mov	r0, r6
 8008546:	4639      	mov	r1, r7
 8008548:	f7f7 fea6 	bl	8000298 <__aeabi_dsub>
 800854c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008550:	4606      	mov	r6, r0
 8008552:	460f      	mov	r7, r1
 8008554:	f7f8 fae8 	bl	8000b28 <__aeabi_dcmpgt>
 8008558:	2800      	cmp	r0, #0
 800855a:	f040 8296 	bne.w	8008a8a <_dtoa_r+0x992>
 800855e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008562:	4630      	mov	r0, r6
 8008564:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008568:	4639      	mov	r1, r7
 800856a:	f7f8 fabf 	bl	8000aec <__aeabi_dcmplt>
 800856e:	2800      	cmp	r0, #0
 8008570:	f040 8288 	bne.w	8008a84 <_dtoa_r+0x98c>
 8008574:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008578:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800857c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800857e:	2b00      	cmp	r3, #0
 8008580:	f2c0 8158 	blt.w	8008834 <_dtoa_r+0x73c>
 8008584:	f1ba 0f0e 	cmp.w	sl, #14
 8008588:	f300 8154 	bgt.w	8008834 <_dtoa_r+0x73c>
 800858c:	4b6b      	ldr	r3, [pc, #428]	; (800873c <_dtoa_r+0x644>)
 800858e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008592:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	f280 80e3 	bge.w	8008764 <_dtoa_r+0x66c>
 800859e:	9b01      	ldr	r3, [sp, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f300 80df 	bgt.w	8008764 <_dtoa_r+0x66c>
 80085a6:	f040 826d 	bne.w	8008a84 <_dtoa_r+0x98c>
 80085aa:	4b69      	ldr	r3, [pc, #420]	; (8008750 <_dtoa_r+0x658>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	4640      	mov	r0, r8
 80085b0:	4649      	mov	r1, r9
 80085b2:	f7f8 f829 	bl	8000608 <__aeabi_dmul>
 80085b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085ba:	f7f8 faab 	bl	8000b14 <__aeabi_dcmpge>
 80085be:	9e01      	ldr	r6, [sp, #4]
 80085c0:	4637      	mov	r7, r6
 80085c2:	2800      	cmp	r0, #0
 80085c4:	f040 8243 	bne.w	8008a4e <_dtoa_r+0x956>
 80085c8:	9d00      	ldr	r5, [sp, #0]
 80085ca:	2331      	movs	r3, #49	; 0x31
 80085cc:	f805 3b01 	strb.w	r3, [r5], #1
 80085d0:	f10a 0a01 	add.w	sl, sl, #1
 80085d4:	e23f      	b.n	8008a56 <_dtoa_r+0x95e>
 80085d6:	07f2      	lsls	r2, r6, #31
 80085d8:	d505      	bpl.n	80085e6 <_dtoa_r+0x4ee>
 80085da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085de:	f7f8 f813 	bl	8000608 <__aeabi_dmul>
 80085e2:	3501      	adds	r5, #1
 80085e4:	2301      	movs	r3, #1
 80085e6:	1076      	asrs	r6, r6, #1
 80085e8:	3708      	adds	r7, #8
 80085ea:	e76c      	b.n	80084c6 <_dtoa_r+0x3ce>
 80085ec:	2502      	movs	r5, #2
 80085ee:	e76f      	b.n	80084d0 <_dtoa_r+0x3d8>
 80085f0:	9b01      	ldr	r3, [sp, #4]
 80085f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80085f6:	930c      	str	r3, [sp, #48]	; 0x30
 80085f8:	e78d      	b.n	8008516 <_dtoa_r+0x41e>
 80085fa:	9900      	ldr	r1, [sp, #0]
 80085fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80085fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008600:	4b4e      	ldr	r3, [pc, #312]	; (800873c <_dtoa_r+0x644>)
 8008602:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008606:	4401      	add	r1, r0
 8008608:	9102      	str	r1, [sp, #8]
 800860a:	9908      	ldr	r1, [sp, #32]
 800860c:	eeb0 8a47 	vmov.f32	s16, s14
 8008610:	eef0 8a67 	vmov.f32	s17, s15
 8008614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008618:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800861c:	2900      	cmp	r1, #0
 800861e:	d045      	beq.n	80086ac <_dtoa_r+0x5b4>
 8008620:	494c      	ldr	r1, [pc, #304]	; (8008754 <_dtoa_r+0x65c>)
 8008622:	2000      	movs	r0, #0
 8008624:	f7f8 f91a 	bl	800085c <__aeabi_ddiv>
 8008628:	ec53 2b18 	vmov	r2, r3, d8
 800862c:	f7f7 fe34 	bl	8000298 <__aeabi_dsub>
 8008630:	9d00      	ldr	r5, [sp, #0]
 8008632:	ec41 0b18 	vmov	d8, r0, r1
 8008636:	4639      	mov	r1, r7
 8008638:	4630      	mov	r0, r6
 800863a:	f7f8 fa95 	bl	8000b68 <__aeabi_d2iz>
 800863e:	900c      	str	r0, [sp, #48]	; 0x30
 8008640:	f7f7 ff78 	bl	8000534 <__aeabi_i2d>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	4630      	mov	r0, r6
 800864a:	4639      	mov	r1, r7
 800864c:	f7f7 fe24 	bl	8000298 <__aeabi_dsub>
 8008650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008652:	3330      	adds	r3, #48	; 0x30
 8008654:	f805 3b01 	strb.w	r3, [r5], #1
 8008658:	ec53 2b18 	vmov	r2, r3, d8
 800865c:	4606      	mov	r6, r0
 800865e:	460f      	mov	r7, r1
 8008660:	f7f8 fa44 	bl	8000aec <__aeabi_dcmplt>
 8008664:	2800      	cmp	r0, #0
 8008666:	d165      	bne.n	8008734 <_dtoa_r+0x63c>
 8008668:	4632      	mov	r2, r6
 800866a:	463b      	mov	r3, r7
 800866c:	4935      	ldr	r1, [pc, #212]	; (8008744 <_dtoa_r+0x64c>)
 800866e:	2000      	movs	r0, #0
 8008670:	f7f7 fe12 	bl	8000298 <__aeabi_dsub>
 8008674:	ec53 2b18 	vmov	r2, r3, d8
 8008678:	f7f8 fa38 	bl	8000aec <__aeabi_dcmplt>
 800867c:	2800      	cmp	r0, #0
 800867e:	f040 80b9 	bne.w	80087f4 <_dtoa_r+0x6fc>
 8008682:	9b02      	ldr	r3, [sp, #8]
 8008684:	429d      	cmp	r5, r3
 8008686:	f43f af75 	beq.w	8008574 <_dtoa_r+0x47c>
 800868a:	4b2f      	ldr	r3, [pc, #188]	; (8008748 <_dtoa_r+0x650>)
 800868c:	ec51 0b18 	vmov	r0, r1, d8
 8008690:	2200      	movs	r2, #0
 8008692:	f7f7 ffb9 	bl	8000608 <__aeabi_dmul>
 8008696:	4b2c      	ldr	r3, [pc, #176]	; (8008748 <_dtoa_r+0x650>)
 8008698:	ec41 0b18 	vmov	d8, r0, r1
 800869c:	2200      	movs	r2, #0
 800869e:	4630      	mov	r0, r6
 80086a0:	4639      	mov	r1, r7
 80086a2:	f7f7 ffb1 	bl	8000608 <__aeabi_dmul>
 80086a6:	4606      	mov	r6, r0
 80086a8:	460f      	mov	r7, r1
 80086aa:	e7c4      	b.n	8008636 <_dtoa_r+0x53e>
 80086ac:	ec51 0b17 	vmov	r0, r1, d7
 80086b0:	f7f7 ffaa 	bl	8000608 <__aeabi_dmul>
 80086b4:	9b02      	ldr	r3, [sp, #8]
 80086b6:	9d00      	ldr	r5, [sp, #0]
 80086b8:	930c      	str	r3, [sp, #48]	; 0x30
 80086ba:	ec41 0b18 	vmov	d8, r0, r1
 80086be:	4639      	mov	r1, r7
 80086c0:	4630      	mov	r0, r6
 80086c2:	f7f8 fa51 	bl	8000b68 <__aeabi_d2iz>
 80086c6:	9011      	str	r0, [sp, #68]	; 0x44
 80086c8:	f7f7 ff34 	bl	8000534 <__aeabi_i2d>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4630      	mov	r0, r6
 80086d2:	4639      	mov	r1, r7
 80086d4:	f7f7 fde0 	bl	8000298 <__aeabi_dsub>
 80086d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086da:	3330      	adds	r3, #48	; 0x30
 80086dc:	f805 3b01 	strb.w	r3, [r5], #1
 80086e0:	9b02      	ldr	r3, [sp, #8]
 80086e2:	429d      	cmp	r5, r3
 80086e4:	4606      	mov	r6, r0
 80086e6:	460f      	mov	r7, r1
 80086e8:	f04f 0200 	mov.w	r2, #0
 80086ec:	d134      	bne.n	8008758 <_dtoa_r+0x660>
 80086ee:	4b19      	ldr	r3, [pc, #100]	; (8008754 <_dtoa_r+0x65c>)
 80086f0:	ec51 0b18 	vmov	r0, r1, d8
 80086f4:	f7f7 fdd2 	bl	800029c <__adddf3>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	4630      	mov	r0, r6
 80086fe:	4639      	mov	r1, r7
 8008700:	f7f8 fa12 	bl	8000b28 <__aeabi_dcmpgt>
 8008704:	2800      	cmp	r0, #0
 8008706:	d175      	bne.n	80087f4 <_dtoa_r+0x6fc>
 8008708:	ec53 2b18 	vmov	r2, r3, d8
 800870c:	4911      	ldr	r1, [pc, #68]	; (8008754 <_dtoa_r+0x65c>)
 800870e:	2000      	movs	r0, #0
 8008710:	f7f7 fdc2 	bl	8000298 <__aeabi_dsub>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4630      	mov	r0, r6
 800871a:	4639      	mov	r1, r7
 800871c:	f7f8 f9e6 	bl	8000aec <__aeabi_dcmplt>
 8008720:	2800      	cmp	r0, #0
 8008722:	f43f af27 	beq.w	8008574 <_dtoa_r+0x47c>
 8008726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008728:	1e6b      	subs	r3, r5, #1
 800872a:	930c      	str	r3, [sp, #48]	; 0x30
 800872c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008730:	2b30      	cmp	r3, #48	; 0x30
 8008732:	d0f8      	beq.n	8008726 <_dtoa_r+0x62e>
 8008734:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008738:	e04a      	b.n	80087d0 <_dtoa_r+0x6d8>
 800873a:	bf00      	nop
 800873c:	0800b9c0 	.word	0x0800b9c0
 8008740:	0800b998 	.word	0x0800b998
 8008744:	3ff00000 	.word	0x3ff00000
 8008748:	40240000 	.word	0x40240000
 800874c:	401c0000 	.word	0x401c0000
 8008750:	40140000 	.word	0x40140000
 8008754:	3fe00000 	.word	0x3fe00000
 8008758:	4baf      	ldr	r3, [pc, #700]	; (8008a18 <_dtoa_r+0x920>)
 800875a:	f7f7 ff55 	bl	8000608 <__aeabi_dmul>
 800875e:	4606      	mov	r6, r0
 8008760:	460f      	mov	r7, r1
 8008762:	e7ac      	b.n	80086be <_dtoa_r+0x5c6>
 8008764:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008768:	9d00      	ldr	r5, [sp, #0]
 800876a:	4642      	mov	r2, r8
 800876c:	464b      	mov	r3, r9
 800876e:	4630      	mov	r0, r6
 8008770:	4639      	mov	r1, r7
 8008772:	f7f8 f873 	bl	800085c <__aeabi_ddiv>
 8008776:	f7f8 f9f7 	bl	8000b68 <__aeabi_d2iz>
 800877a:	9002      	str	r0, [sp, #8]
 800877c:	f7f7 feda 	bl	8000534 <__aeabi_i2d>
 8008780:	4642      	mov	r2, r8
 8008782:	464b      	mov	r3, r9
 8008784:	f7f7 ff40 	bl	8000608 <__aeabi_dmul>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	4630      	mov	r0, r6
 800878e:	4639      	mov	r1, r7
 8008790:	f7f7 fd82 	bl	8000298 <__aeabi_dsub>
 8008794:	9e02      	ldr	r6, [sp, #8]
 8008796:	9f01      	ldr	r7, [sp, #4]
 8008798:	3630      	adds	r6, #48	; 0x30
 800879a:	f805 6b01 	strb.w	r6, [r5], #1
 800879e:	9e00      	ldr	r6, [sp, #0]
 80087a0:	1bae      	subs	r6, r5, r6
 80087a2:	42b7      	cmp	r7, r6
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	d137      	bne.n	800881a <_dtoa_r+0x722>
 80087aa:	f7f7 fd77 	bl	800029c <__adddf3>
 80087ae:	4642      	mov	r2, r8
 80087b0:	464b      	mov	r3, r9
 80087b2:	4606      	mov	r6, r0
 80087b4:	460f      	mov	r7, r1
 80087b6:	f7f8 f9b7 	bl	8000b28 <__aeabi_dcmpgt>
 80087ba:	b9c8      	cbnz	r0, 80087f0 <_dtoa_r+0x6f8>
 80087bc:	4642      	mov	r2, r8
 80087be:	464b      	mov	r3, r9
 80087c0:	4630      	mov	r0, r6
 80087c2:	4639      	mov	r1, r7
 80087c4:	f7f8 f988 	bl	8000ad8 <__aeabi_dcmpeq>
 80087c8:	b110      	cbz	r0, 80087d0 <_dtoa_r+0x6d8>
 80087ca:	9b02      	ldr	r3, [sp, #8]
 80087cc:	07d9      	lsls	r1, r3, #31
 80087ce:	d40f      	bmi.n	80087f0 <_dtoa_r+0x6f8>
 80087d0:	4620      	mov	r0, r4
 80087d2:	4659      	mov	r1, fp
 80087d4:	f000 fad6 	bl	8008d84 <_Bfree>
 80087d8:	2300      	movs	r3, #0
 80087da:	702b      	strb	r3, [r5, #0]
 80087dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087de:	f10a 0001 	add.w	r0, sl, #1
 80087e2:	6018      	str	r0, [r3, #0]
 80087e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f43f acd8 	beq.w	800819c <_dtoa_r+0xa4>
 80087ec:	601d      	str	r5, [r3, #0]
 80087ee:	e4d5      	b.n	800819c <_dtoa_r+0xa4>
 80087f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80087f4:	462b      	mov	r3, r5
 80087f6:	461d      	mov	r5, r3
 80087f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087fc:	2a39      	cmp	r2, #57	; 0x39
 80087fe:	d108      	bne.n	8008812 <_dtoa_r+0x71a>
 8008800:	9a00      	ldr	r2, [sp, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d1f7      	bne.n	80087f6 <_dtoa_r+0x6fe>
 8008806:	9a07      	ldr	r2, [sp, #28]
 8008808:	9900      	ldr	r1, [sp, #0]
 800880a:	3201      	adds	r2, #1
 800880c:	9207      	str	r2, [sp, #28]
 800880e:	2230      	movs	r2, #48	; 0x30
 8008810:	700a      	strb	r2, [r1, #0]
 8008812:	781a      	ldrb	r2, [r3, #0]
 8008814:	3201      	adds	r2, #1
 8008816:	701a      	strb	r2, [r3, #0]
 8008818:	e78c      	b.n	8008734 <_dtoa_r+0x63c>
 800881a:	4b7f      	ldr	r3, [pc, #508]	; (8008a18 <_dtoa_r+0x920>)
 800881c:	2200      	movs	r2, #0
 800881e:	f7f7 fef3 	bl	8000608 <__aeabi_dmul>
 8008822:	2200      	movs	r2, #0
 8008824:	2300      	movs	r3, #0
 8008826:	4606      	mov	r6, r0
 8008828:	460f      	mov	r7, r1
 800882a:	f7f8 f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800882e:	2800      	cmp	r0, #0
 8008830:	d09b      	beq.n	800876a <_dtoa_r+0x672>
 8008832:	e7cd      	b.n	80087d0 <_dtoa_r+0x6d8>
 8008834:	9a08      	ldr	r2, [sp, #32]
 8008836:	2a00      	cmp	r2, #0
 8008838:	f000 80c4 	beq.w	80089c4 <_dtoa_r+0x8cc>
 800883c:	9a05      	ldr	r2, [sp, #20]
 800883e:	2a01      	cmp	r2, #1
 8008840:	f300 80a8 	bgt.w	8008994 <_dtoa_r+0x89c>
 8008844:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008846:	2a00      	cmp	r2, #0
 8008848:	f000 80a0 	beq.w	800898c <_dtoa_r+0x894>
 800884c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008850:	9e06      	ldr	r6, [sp, #24]
 8008852:	4645      	mov	r5, r8
 8008854:	9a04      	ldr	r2, [sp, #16]
 8008856:	2101      	movs	r1, #1
 8008858:	441a      	add	r2, r3
 800885a:	4620      	mov	r0, r4
 800885c:	4498      	add	r8, r3
 800885e:	9204      	str	r2, [sp, #16]
 8008860:	f000 fb4c 	bl	8008efc <__i2b>
 8008864:	4607      	mov	r7, r0
 8008866:	2d00      	cmp	r5, #0
 8008868:	dd0b      	ble.n	8008882 <_dtoa_r+0x78a>
 800886a:	9b04      	ldr	r3, [sp, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	dd08      	ble.n	8008882 <_dtoa_r+0x78a>
 8008870:	42ab      	cmp	r3, r5
 8008872:	9a04      	ldr	r2, [sp, #16]
 8008874:	bfa8      	it	ge
 8008876:	462b      	movge	r3, r5
 8008878:	eba8 0803 	sub.w	r8, r8, r3
 800887c:	1aed      	subs	r5, r5, r3
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	9304      	str	r3, [sp, #16]
 8008882:	9b06      	ldr	r3, [sp, #24]
 8008884:	b1fb      	cbz	r3, 80088c6 <_dtoa_r+0x7ce>
 8008886:	9b08      	ldr	r3, [sp, #32]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 809f 	beq.w	80089cc <_dtoa_r+0x8d4>
 800888e:	2e00      	cmp	r6, #0
 8008890:	dd11      	ble.n	80088b6 <_dtoa_r+0x7be>
 8008892:	4639      	mov	r1, r7
 8008894:	4632      	mov	r2, r6
 8008896:	4620      	mov	r0, r4
 8008898:	f000 fbec 	bl	8009074 <__pow5mult>
 800889c:	465a      	mov	r2, fp
 800889e:	4601      	mov	r1, r0
 80088a0:	4607      	mov	r7, r0
 80088a2:	4620      	mov	r0, r4
 80088a4:	f000 fb40 	bl	8008f28 <__multiply>
 80088a8:	4659      	mov	r1, fp
 80088aa:	9007      	str	r0, [sp, #28]
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 fa69 	bl	8008d84 <_Bfree>
 80088b2:	9b07      	ldr	r3, [sp, #28]
 80088b4:	469b      	mov	fp, r3
 80088b6:	9b06      	ldr	r3, [sp, #24]
 80088b8:	1b9a      	subs	r2, r3, r6
 80088ba:	d004      	beq.n	80088c6 <_dtoa_r+0x7ce>
 80088bc:	4659      	mov	r1, fp
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 fbd8 	bl	8009074 <__pow5mult>
 80088c4:	4683      	mov	fp, r0
 80088c6:	2101      	movs	r1, #1
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 fb17 	bl	8008efc <__i2b>
 80088ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	4606      	mov	r6, r0
 80088d4:	dd7c      	ble.n	80089d0 <_dtoa_r+0x8d8>
 80088d6:	461a      	mov	r2, r3
 80088d8:	4601      	mov	r1, r0
 80088da:	4620      	mov	r0, r4
 80088dc:	f000 fbca 	bl	8009074 <__pow5mult>
 80088e0:	9b05      	ldr	r3, [sp, #20]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	4606      	mov	r6, r0
 80088e6:	dd76      	ble.n	80089d6 <_dtoa_r+0x8de>
 80088e8:	2300      	movs	r3, #0
 80088ea:	9306      	str	r3, [sp, #24]
 80088ec:	6933      	ldr	r3, [r6, #16]
 80088ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088f2:	6918      	ldr	r0, [r3, #16]
 80088f4:	f000 fab2 	bl	8008e5c <__hi0bits>
 80088f8:	f1c0 0020 	rsb	r0, r0, #32
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	4418      	add	r0, r3
 8008900:	f010 001f 	ands.w	r0, r0, #31
 8008904:	f000 8086 	beq.w	8008a14 <_dtoa_r+0x91c>
 8008908:	f1c0 0320 	rsb	r3, r0, #32
 800890c:	2b04      	cmp	r3, #4
 800890e:	dd7f      	ble.n	8008a10 <_dtoa_r+0x918>
 8008910:	f1c0 001c 	rsb	r0, r0, #28
 8008914:	9b04      	ldr	r3, [sp, #16]
 8008916:	4403      	add	r3, r0
 8008918:	4480      	add	r8, r0
 800891a:	4405      	add	r5, r0
 800891c:	9304      	str	r3, [sp, #16]
 800891e:	f1b8 0f00 	cmp.w	r8, #0
 8008922:	dd05      	ble.n	8008930 <_dtoa_r+0x838>
 8008924:	4659      	mov	r1, fp
 8008926:	4642      	mov	r2, r8
 8008928:	4620      	mov	r0, r4
 800892a:	f000 fbfd 	bl	8009128 <__lshift>
 800892e:	4683      	mov	fp, r0
 8008930:	9b04      	ldr	r3, [sp, #16]
 8008932:	2b00      	cmp	r3, #0
 8008934:	dd05      	ble.n	8008942 <_dtoa_r+0x84a>
 8008936:	4631      	mov	r1, r6
 8008938:	461a      	mov	r2, r3
 800893a:	4620      	mov	r0, r4
 800893c:	f000 fbf4 	bl	8009128 <__lshift>
 8008940:	4606      	mov	r6, r0
 8008942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008944:	2b00      	cmp	r3, #0
 8008946:	d069      	beq.n	8008a1c <_dtoa_r+0x924>
 8008948:	4631      	mov	r1, r6
 800894a:	4658      	mov	r0, fp
 800894c:	f000 fc58 	bl	8009200 <__mcmp>
 8008950:	2800      	cmp	r0, #0
 8008952:	da63      	bge.n	8008a1c <_dtoa_r+0x924>
 8008954:	2300      	movs	r3, #0
 8008956:	4659      	mov	r1, fp
 8008958:	220a      	movs	r2, #10
 800895a:	4620      	mov	r0, r4
 800895c:	f000 fa34 	bl	8008dc8 <__multadd>
 8008960:	9b08      	ldr	r3, [sp, #32]
 8008962:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008966:	4683      	mov	fp, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 818f 	beq.w	8008c8c <_dtoa_r+0xb94>
 800896e:	4639      	mov	r1, r7
 8008970:	2300      	movs	r3, #0
 8008972:	220a      	movs	r2, #10
 8008974:	4620      	mov	r0, r4
 8008976:	f000 fa27 	bl	8008dc8 <__multadd>
 800897a:	f1b9 0f00 	cmp.w	r9, #0
 800897e:	4607      	mov	r7, r0
 8008980:	f300 808e 	bgt.w	8008aa0 <_dtoa_r+0x9a8>
 8008984:	9b05      	ldr	r3, [sp, #20]
 8008986:	2b02      	cmp	r3, #2
 8008988:	dc50      	bgt.n	8008a2c <_dtoa_r+0x934>
 800898a:	e089      	b.n	8008aa0 <_dtoa_r+0x9a8>
 800898c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800898e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008992:	e75d      	b.n	8008850 <_dtoa_r+0x758>
 8008994:	9b01      	ldr	r3, [sp, #4]
 8008996:	1e5e      	subs	r6, r3, #1
 8008998:	9b06      	ldr	r3, [sp, #24]
 800899a:	42b3      	cmp	r3, r6
 800899c:	bfbf      	itttt	lt
 800899e:	9b06      	ldrlt	r3, [sp, #24]
 80089a0:	9606      	strlt	r6, [sp, #24]
 80089a2:	1af2      	sublt	r2, r6, r3
 80089a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80089a6:	bfb6      	itet	lt
 80089a8:	189b      	addlt	r3, r3, r2
 80089aa:	1b9e      	subge	r6, r3, r6
 80089ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80089ae:	9b01      	ldr	r3, [sp, #4]
 80089b0:	bfb8      	it	lt
 80089b2:	2600      	movlt	r6, #0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	bfb5      	itete	lt
 80089b8:	eba8 0503 	sublt.w	r5, r8, r3
 80089bc:	9b01      	ldrge	r3, [sp, #4]
 80089be:	2300      	movlt	r3, #0
 80089c0:	4645      	movge	r5, r8
 80089c2:	e747      	b.n	8008854 <_dtoa_r+0x75c>
 80089c4:	9e06      	ldr	r6, [sp, #24]
 80089c6:	9f08      	ldr	r7, [sp, #32]
 80089c8:	4645      	mov	r5, r8
 80089ca:	e74c      	b.n	8008866 <_dtoa_r+0x76e>
 80089cc:	9a06      	ldr	r2, [sp, #24]
 80089ce:	e775      	b.n	80088bc <_dtoa_r+0x7c4>
 80089d0:	9b05      	ldr	r3, [sp, #20]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	dc18      	bgt.n	8008a08 <_dtoa_r+0x910>
 80089d6:	9b02      	ldr	r3, [sp, #8]
 80089d8:	b9b3      	cbnz	r3, 8008a08 <_dtoa_r+0x910>
 80089da:	9b03      	ldr	r3, [sp, #12]
 80089dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089e0:	b9a3      	cbnz	r3, 8008a0c <_dtoa_r+0x914>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089e8:	0d1b      	lsrs	r3, r3, #20
 80089ea:	051b      	lsls	r3, r3, #20
 80089ec:	b12b      	cbz	r3, 80089fa <_dtoa_r+0x902>
 80089ee:	9b04      	ldr	r3, [sp, #16]
 80089f0:	3301      	adds	r3, #1
 80089f2:	9304      	str	r3, [sp, #16]
 80089f4:	f108 0801 	add.w	r8, r8, #1
 80089f8:	2301      	movs	r3, #1
 80089fa:	9306      	str	r3, [sp, #24]
 80089fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f47f af74 	bne.w	80088ec <_dtoa_r+0x7f4>
 8008a04:	2001      	movs	r0, #1
 8008a06:	e779      	b.n	80088fc <_dtoa_r+0x804>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	e7f6      	b.n	80089fa <_dtoa_r+0x902>
 8008a0c:	9b02      	ldr	r3, [sp, #8]
 8008a0e:	e7f4      	b.n	80089fa <_dtoa_r+0x902>
 8008a10:	d085      	beq.n	800891e <_dtoa_r+0x826>
 8008a12:	4618      	mov	r0, r3
 8008a14:	301c      	adds	r0, #28
 8008a16:	e77d      	b.n	8008914 <_dtoa_r+0x81c>
 8008a18:	40240000 	.word	0x40240000
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dc38      	bgt.n	8008a94 <_dtoa_r+0x99c>
 8008a22:	9b05      	ldr	r3, [sp, #20]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	dd35      	ble.n	8008a94 <_dtoa_r+0x99c>
 8008a28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008a2c:	f1b9 0f00 	cmp.w	r9, #0
 8008a30:	d10d      	bne.n	8008a4e <_dtoa_r+0x956>
 8008a32:	4631      	mov	r1, r6
 8008a34:	464b      	mov	r3, r9
 8008a36:	2205      	movs	r2, #5
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 f9c5 	bl	8008dc8 <__multadd>
 8008a3e:	4601      	mov	r1, r0
 8008a40:	4606      	mov	r6, r0
 8008a42:	4658      	mov	r0, fp
 8008a44:	f000 fbdc 	bl	8009200 <__mcmp>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	f73f adbd 	bgt.w	80085c8 <_dtoa_r+0x4d0>
 8008a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a50:	9d00      	ldr	r5, [sp, #0]
 8008a52:	ea6f 0a03 	mvn.w	sl, r3
 8008a56:	f04f 0800 	mov.w	r8, #0
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 f991 	bl	8008d84 <_Bfree>
 8008a62:	2f00      	cmp	r7, #0
 8008a64:	f43f aeb4 	beq.w	80087d0 <_dtoa_r+0x6d8>
 8008a68:	f1b8 0f00 	cmp.w	r8, #0
 8008a6c:	d005      	beq.n	8008a7a <_dtoa_r+0x982>
 8008a6e:	45b8      	cmp	r8, r7
 8008a70:	d003      	beq.n	8008a7a <_dtoa_r+0x982>
 8008a72:	4641      	mov	r1, r8
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 f985 	bl	8008d84 <_Bfree>
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 f981 	bl	8008d84 <_Bfree>
 8008a82:	e6a5      	b.n	80087d0 <_dtoa_r+0x6d8>
 8008a84:	2600      	movs	r6, #0
 8008a86:	4637      	mov	r7, r6
 8008a88:	e7e1      	b.n	8008a4e <_dtoa_r+0x956>
 8008a8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008a8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008a90:	4637      	mov	r7, r6
 8008a92:	e599      	b.n	80085c8 <_dtoa_r+0x4d0>
 8008a94:	9b08      	ldr	r3, [sp, #32]
 8008a96:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 80fd 	beq.w	8008c9a <_dtoa_r+0xba2>
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	dd05      	ble.n	8008ab0 <_dtoa_r+0x9b8>
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	462a      	mov	r2, r5
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 fb3d 	bl	8009128 <__lshift>
 8008aae:	4607      	mov	r7, r0
 8008ab0:	9b06      	ldr	r3, [sp, #24]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d05c      	beq.n	8008b70 <_dtoa_r+0xa78>
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 f923 	bl	8008d04 <_Balloc>
 8008abe:	4605      	mov	r5, r0
 8008ac0:	b928      	cbnz	r0, 8008ace <_dtoa_r+0x9d6>
 8008ac2:	4b80      	ldr	r3, [pc, #512]	; (8008cc4 <_dtoa_r+0xbcc>)
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008aca:	f7ff bb2e 	b.w	800812a <_dtoa_r+0x32>
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	3202      	adds	r2, #2
 8008ad2:	0092      	lsls	r2, r2, #2
 8008ad4:	f107 010c 	add.w	r1, r7, #12
 8008ad8:	300c      	adds	r0, #12
 8008ada:	f000 f905 	bl	8008ce8 <memcpy>
 8008ade:	2201      	movs	r2, #1
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 fb20 	bl	8009128 <__lshift>
 8008ae8:	9b00      	ldr	r3, [sp, #0]
 8008aea:	3301      	adds	r3, #1
 8008aec:	9301      	str	r3, [sp, #4]
 8008aee:	9b00      	ldr	r3, [sp, #0]
 8008af0:	444b      	add	r3, r9
 8008af2:	9307      	str	r3, [sp, #28]
 8008af4:	9b02      	ldr	r3, [sp, #8]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	46b8      	mov	r8, r7
 8008afc:	9306      	str	r3, [sp, #24]
 8008afe:	4607      	mov	r7, r0
 8008b00:	9b01      	ldr	r3, [sp, #4]
 8008b02:	4631      	mov	r1, r6
 8008b04:	3b01      	subs	r3, #1
 8008b06:	4658      	mov	r0, fp
 8008b08:	9302      	str	r3, [sp, #8]
 8008b0a:	f7ff fa69 	bl	8007fe0 <quorem>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	3330      	adds	r3, #48	; 0x30
 8008b12:	9004      	str	r0, [sp, #16]
 8008b14:	4641      	mov	r1, r8
 8008b16:	4658      	mov	r0, fp
 8008b18:	9308      	str	r3, [sp, #32]
 8008b1a:	f000 fb71 	bl	8009200 <__mcmp>
 8008b1e:	463a      	mov	r2, r7
 8008b20:	4681      	mov	r9, r0
 8008b22:	4631      	mov	r1, r6
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fb87 	bl	8009238 <__mdiff>
 8008b2a:	68c2      	ldr	r2, [r0, #12]
 8008b2c:	9b08      	ldr	r3, [sp, #32]
 8008b2e:	4605      	mov	r5, r0
 8008b30:	bb02      	cbnz	r2, 8008b74 <_dtoa_r+0xa7c>
 8008b32:	4601      	mov	r1, r0
 8008b34:	4658      	mov	r0, fp
 8008b36:	f000 fb63 	bl	8009200 <__mcmp>
 8008b3a:	9b08      	ldr	r3, [sp, #32]
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	4629      	mov	r1, r5
 8008b40:	4620      	mov	r0, r4
 8008b42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008b46:	f000 f91d 	bl	8008d84 <_Bfree>
 8008b4a:	9b05      	ldr	r3, [sp, #20]
 8008b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b4e:	9d01      	ldr	r5, [sp, #4]
 8008b50:	ea43 0102 	orr.w	r1, r3, r2
 8008b54:	9b06      	ldr	r3, [sp, #24]
 8008b56:	430b      	orrs	r3, r1
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	d10d      	bne.n	8008b78 <_dtoa_r+0xa80>
 8008b5c:	2b39      	cmp	r3, #57	; 0x39
 8008b5e:	d029      	beq.n	8008bb4 <_dtoa_r+0xabc>
 8008b60:	f1b9 0f00 	cmp.w	r9, #0
 8008b64:	dd01      	ble.n	8008b6a <_dtoa_r+0xa72>
 8008b66:	9b04      	ldr	r3, [sp, #16]
 8008b68:	3331      	adds	r3, #49	; 0x31
 8008b6a:	9a02      	ldr	r2, [sp, #8]
 8008b6c:	7013      	strb	r3, [r2, #0]
 8008b6e:	e774      	b.n	8008a5a <_dtoa_r+0x962>
 8008b70:	4638      	mov	r0, r7
 8008b72:	e7b9      	b.n	8008ae8 <_dtoa_r+0x9f0>
 8008b74:	2201      	movs	r2, #1
 8008b76:	e7e2      	b.n	8008b3e <_dtoa_r+0xa46>
 8008b78:	f1b9 0f00 	cmp.w	r9, #0
 8008b7c:	db06      	blt.n	8008b8c <_dtoa_r+0xa94>
 8008b7e:	9905      	ldr	r1, [sp, #20]
 8008b80:	ea41 0909 	orr.w	r9, r1, r9
 8008b84:	9906      	ldr	r1, [sp, #24]
 8008b86:	ea59 0101 	orrs.w	r1, r9, r1
 8008b8a:	d120      	bne.n	8008bce <_dtoa_r+0xad6>
 8008b8c:	2a00      	cmp	r2, #0
 8008b8e:	ddec      	ble.n	8008b6a <_dtoa_r+0xa72>
 8008b90:	4659      	mov	r1, fp
 8008b92:	2201      	movs	r2, #1
 8008b94:	4620      	mov	r0, r4
 8008b96:	9301      	str	r3, [sp, #4]
 8008b98:	f000 fac6 	bl	8009128 <__lshift>
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4683      	mov	fp, r0
 8008ba0:	f000 fb2e 	bl	8009200 <__mcmp>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	9b01      	ldr	r3, [sp, #4]
 8008ba8:	dc02      	bgt.n	8008bb0 <_dtoa_r+0xab8>
 8008baa:	d1de      	bne.n	8008b6a <_dtoa_r+0xa72>
 8008bac:	07da      	lsls	r2, r3, #31
 8008bae:	d5dc      	bpl.n	8008b6a <_dtoa_r+0xa72>
 8008bb0:	2b39      	cmp	r3, #57	; 0x39
 8008bb2:	d1d8      	bne.n	8008b66 <_dtoa_r+0xa6e>
 8008bb4:	9a02      	ldr	r2, [sp, #8]
 8008bb6:	2339      	movs	r3, #57	; 0x39
 8008bb8:	7013      	strb	r3, [r2, #0]
 8008bba:	462b      	mov	r3, r5
 8008bbc:	461d      	mov	r5, r3
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bc4:	2a39      	cmp	r2, #57	; 0x39
 8008bc6:	d050      	beq.n	8008c6a <_dtoa_r+0xb72>
 8008bc8:	3201      	adds	r2, #1
 8008bca:	701a      	strb	r2, [r3, #0]
 8008bcc:	e745      	b.n	8008a5a <_dtoa_r+0x962>
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	dd03      	ble.n	8008bda <_dtoa_r+0xae2>
 8008bd2:	2b39      	cmp	r3, #57	; 0x39
 8008bd4:	d0ee      	beq.n	8008bb4 <_dtoa_r+0xabc>
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	e7c7      	b.n	8008b6a <_dtoa_r+0xa72>
 8008bda:	9a01      	ldr	r2, [sp, #4]
 8008bdc:	9907      	ldr	r1, [sp, #28]
 8008bde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008be2:	428a      	cmp	r2, r1
 8008be4:	d02a      	beq.n	8008c3c <_dtoa_r+0xb44>
 8008be6:	4659      	mov	r1, fp
 8008be8:	2300      	movs	r3, #0
 8008bea:	220a      	movs	r2, #10
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 f8eb 	bl	8008dc8 <__multadd>
 8008bf2:	45b8      	cmp	r8, r7
 8008bf4:	4683      	mov	fp, r0
 8008bf6:	f04f 0300 	mov.w	r3, #0
 8008bfa:	f04f 020a 	mov.w	r2, #10
 8008bfe:	4641      	mov	r1, r8
 8008c00:	4620      	mov	r0, r4
 8008c02:	d107      	bne.n	8008c14 <_dtoa_r+0xb1c>
 8008c04:	f000 f8e0 	bl	8008dc8 <__multadd>
 8008c08:	4680      	mov	r8, r0
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	9b01      	ldr	r3, [sp, #4]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	e775      	b.n	8008b00 <_dtoa_r+0xa08>
 8008c14:	f000 f8d8 	bl	8008dc8 <__multadd>
 8008c18:	4639      	mov	r1, r7
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	220a      	movs	r2, #10
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 f8d1 	bl	8008dc8 <__multadd>
 8008c26:	4607      	mov	r7, r0
 8008c28:	e7f0      	b.n	8008c0c <_dtoa_r+0xb14>
 8008c2a:	f1b9 0f00 	cmp.w	r9, #0
 8008c2e:	9a00      	ldr	r2, [sp, #0]
 8008c30:	bfcc      	ite	gt
 8008c32:	464d      	movgt	r5, r9
 8008c34:	2501      	movle	r5, #1
 8008c36:	4415      	add	r5, r2
 8008c38:	f04f 0800 	mov.w	r8, #0
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	2201      	movs	r2, #1
 8008c40:	4620      	mov	r0, r4
 8008c42:	9301      	str	r3, [sp, #4]
 8008c44:	f000 fa70 	bl	8009128 <__lshift>
 8008c48:	4631      	mov	r1, r6
 8008c4a:	4683      	mov	fp, r0
 8008c4c:	f000 fad8 	bl	8009200 <__mcmp>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	dcb2      	bgt.n	8008bba <_dtoa_r+0xac2>
 8008c54:	d102      	bne.n	8008c5c <_dtoa_r+0xb64>
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	07db      	lsls	r3, r3, #31
 8008c5a:	d4ae      	bmi.n	8008bba <_dtoa_r+0xac2>
 8008c5c:	462b      	mov	r3, r5
 8008c5e:	461d      	mov	r5, r3
 8008c60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c64:	2a30      	cmp	r2, #48	; 0x30
 8008c66:	d0fa      	beq.n	8008c5e <_dtoa_r+0xb66>
 8008c68:	e6f7      	b.n	8008a5a <_dtoa_r+0x962>
 8008c6a:	9a00      	ldr	r2, [sp, #0]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d1a5      	bne.n	8008bbc <_dtoa_r+0xac4>
 8008c70:	f10a 0a01 	add.w	sl, sl, #1
 8008c74:	2331      	movs	r3, #49	; 0x31
 8008c76:	e779      	b.n	8008b6c <_dtoa_r+0xa74>
 8008c78:	4b13      	ldr	r3, [pc, #76]	; (8008cc8 <_dtoa_r+0xbd0>)
 8008c7a:	f7ff baaf 	b.w	80081dc <_dtoa_r+0xe4>
 8008c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f47f aa86 	bne.w	8008192 <_dtoa_r+0x9a>
 8008c86:	4b11      	ldr	r3, [pc, #68]	; (8008ccc <_dtoa_r+0xbd4>)
 8008c88:	f7ff baa8 	b.w	80081dc <_dtoa_r+0xe4>
 8008c8c:	f1b9 0f00 	cmp.w	r9, #0
 8008c90:	dc03      	bgt.n	8008c9a <_dtoa_r+0xba2>
 8008c92:	9b05      	ldr	r3, [sp, #20]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	f73f aec9 	bgt.w	8008a2c <_dtoa_r+0x934>
 8008c9a:	9d00      	ldr	r5, [sp, #0]
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4658      	mov	r0, fp
 8008ca0:	f7ff f99e 	bl	8007fe0 <quorem>
 8008ca4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008ca8:	f805 3b01 	strb.w	r3, [r5], #1
 8008cac:	9a00      	ldr	r2, [sp, #0]
 8008cae:	1aaa      	subs	r2, r5, r2
 8008cb0:	4591      	cmp	r9, r2
 8008cb2:	ddba      	ble.n	8008c2a <_dtoa_r+0xb32>
 8008cb4:	4659      	mov	r1, fp
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	220a      	movs	r2, #10
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f000 f884 	bl	8008dc8 <__multadd>
 8008cc0:	4683      	mov	fp, r0
 8008cc2:	e7eb      	b.n	8008c9c <_dtoa_r+0xba4>
 8008cc4:	0800b923 	.word	0x0800b923
 8008cc8:	0800b87c 	.word	0x0800b87c
 8008ccc:	0800b8a0 	.word	0x0800b8a0

08008cd0 <_localeconv_r>:
 8008cd0:	4800      	ldr	r0, [pc, #0]	; (8008cd4 <_localeconv_r+0x4>)
 8008cd2:	4770      	bx	lr
 8008cd4:	2000017c 	.word	0x2000017c

08008cd8 <malloc>:
 8008cd8:	4b02      	ldr	r3, [pc, #8]	; (8008ce4 <malloc+0xc>)
 8008cda:	4601      	mov	r1, r0
 8008cdc:	6818      	ldr	r0, [r3, #0]
 8008cde:	f000 bbef 	b.w	80094c0 <_malloc_r>
 8008ce2:	bf00      	nop
 8008ce4:	20000028 	.word	0x20000028

08008ce8 <memcpy>:
 8008ce8:	440a      	add	r2, r1
 8008cea:	4291      	cmp	r1, r2
 8008cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf0:	d100      	bne.n	8008cf4 <memcpy+0xc>
 8008cf2:	4770      	bx	lr
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cfe:	4291      	cmp	r1, r2
 8008d00:	d1f9      	bne.n	8008cf6 <memcpy+0xe>
 8008d02:	bd10      	pop	{r4, pc}

08008d04 <_Balloc>:
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d08:	4604      	mov	r4, r0
 8008d0a:	460d      	mov	r5, r1
 8008d0c:	b976      	cbnz	r6, 8008d2c <_Balloc+0x28>
 8008d0e:	2010      	movs	r0, #16
 8008d10:	f7ff ffe2 	bl	8008cd8 <malloc>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6260      	str	r0, [r4, #36]	; 0x24
 8008d18:	b920      	cbnz	r0, 8008d24 <_Balloc+0x20>
 8008d1a:	4b18      	ldr	r3, [pc, #96]	; (8008d7c <_Balloc+0x78>)
 8008d1c:	4818      	ldr	r0, [pc, #96]	; (8008d80 <_Balloc+0x7c>)
 8008d1e:	2166      	movs	r1, #102	; 0x66
 8008d20:	f000 fd94 	bl	800984c <__assert_func>
 8008d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d28:	6006      	str	r6, [r0, #0]
 8008d2a:	60c6      	str	r6, [r0, #12]
 8008d2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d2e:	68f3      	ldr	r3, [r6, #12]
 8008d30:	b183      	cbz	r3, 8008d54 <_Balloc+0x50>
 8008d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d3a:	b9b8      	cbnz	r0, 8008d6c <_Balloc+0x68>
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	fa01 f605 	lsl.w	r6, r1, r5
 8008d42:	1d72      	adds	r2, r6, #5
 8008d44:	0092      	lsls	r2, r2, #2
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 fb5a 	bl	8009400 <_calloc_r>
 8008d4c:	b160      	cbz	r0, 8008d68 <_Balloc+0x64>
 8008d4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d52:	e00e      	b.n	8008d72 <_Balloc+0x6e>
 8008d54:	2221      	movs	r2, #33	; 0x21
 8008d56:	2104      	movs	r1, #4
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 fb51 	bl	8009400 <_calloc_r>
 8008d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d60:	60f0      	str	r0, [r6, #12]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1e4      	bne.n	8008d32 <_Balloc+0x2e>
 8008d68:	2000      	movs	r0, #0
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	6802      	ldr	r2, [r0, #0]
 8008d6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d72:	2300      	movs	r3, #0
 8008d74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d78:	e7f7      	b.n	8008d6a <_Balloc+0x66>
 8008d7a:	bf00      	nop
 8008d7c:	0800b8ad 	.word	0x0800b8ad
 8008d80:	0800b934 	.word	0x0800b934

08008d84 <_Bfree>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d88:	4605      	mov	r5, r0
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	b976      	cbnz	r6, 8008dac <_Bfree+0x28>
 8008d8e:	2010      	movs	r0, #16
 8008d90:	f7ff ffa2 	bl	8008cd8 <malloc>
 8008d94:	4602      	mov	r2, r0
 8008d96:	6268      	str	r0, [r5, #36]	; 0x24
 8008d98:	b920      	cbnz	r0, 8008da4 <_Bfree+0x20>
 8008d9a:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <_Bfree+0x3c>)
 8008d9c:	4809      	ldr	r0, [pc, #36]	; (8008dc4 <_Bfree+0x40>)
 8008d9e:	218a      	movs	r1, #138	; 0x8a
 8008da0:	f000 fd54 	bl	800984c <__assert_func>
 8008da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008da8:	6006      	str	r6, [r0, #0]
 8008daa:	60c6      	str	r6, [r0, #12]
 8008dac:	b13c      	cbz	r4, 8008dbe <_Bfree+0x3a>
 8008dae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008db0:	6862      	ldr	r2, [r4, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008db8:	6021      	str	r1, [r4, #0]
 8008dba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}
 8008dc0:	0800b8ad 	.word	0x0800b8ad
 8008dc4:	0800b934 	.word	0x0800b934

08008dc8 <__multadd>:
 8008dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dcc:	690e      	ldr	r6, [r1, #16]
 8008dce:	4607      	mov	r7, r0
 8008dd0:	4698      	mov	r8, r3
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	f101 0014 	add.w	r0, r1, #20
 8008dd8:	2300      	movs	r3, #0
 8008dda:	6805      	ldr	r5, [r0, #0]
 8008ddc:	b2a9      	uxth	r1, r5
 8008dde:	fb02 8101 	mla	r1, r2, r1, r8
 8008de2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008de6:	0c2d      	lsrs	r5, r5, #16
 8008de8:	fb02 c505 	mla	r5, r2, r5, ip
 8008dec:	b289      	uxth	r1, r1
 8008dee:	3301      	adds	r3, #1
 8008df0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008df4:	429e      	cmp	r6, r3
 8008df6:	f840 1b04 	str.w	r1, [r0], #4
 8008dfa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008dfe:	dcec      	bgt.n	8008dda <__multadd+0x12>
 8008e00:	f1b8 0f00 	cmp.w	r8, #0
 8008e04:	d022      	beq.n	8008e4c <__multadd+0x84>
 8008e06:	68a3      	ldr	r3, [r4, #8]
 8008e08:	42b3      	cmp	r3, r6
 8008e0a:	dc19      	bgt.n	8008e40 <__multadd+0x78>
 8008e0c:	6861      	ldr	r1, [r4, #4]
 8008e0e:	4638      	mov	r0, r7
 8008e10:	3101      	adds	r1, #1
 8008e12:	f7ff ff77 	bl	8008d04 <_Balloc>
 8008e16:	4605      	mov	r5, r0
 8008e18:	b928      	cbnz	r0, 8008e26 <__multadd+0x5e>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	4b0d      	ldr	r3, [pc, #52]	; (8008e54 <__multadd+0x8c>)
 8008e1e:	480e      	ldr	r0, [pc, #56]	; (8008e58 <__multadd+0x90>)
 8008e20:	21b5      	movs	r1, #181	; 0xb5
 8008e22:	f000 fd13 	bl	800984c <__assert_func>
 8008e26:	6922      	ldr	r2, [r4, #16]
 8008e28:	3202      	adds	r2, #2
 8008e2a:	f104 010c 	add.w	r1, r4, #12
 8008e2e:	0092      	lsls	r2, r2, #2
 8008e30:	300c      	adds	r0, #12
 8008e32:	f7ff ff59 	bl	8008ce8 <memcpy>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4638      	mov	r0, r7
 8008e3a:	f7ff ffa3 	bl	8008d84 <_Bfree>
 8008e3e:	462c      	mov	r4, r5
 8008e40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e44:	3601      	adds	r6, #1
 8008e46:	f8c3 8014 	str.w	r8, [r3, #20]
 8008e4a:	6126      	str	r6, [r4, #16]
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e52:	bf00      	nop
 8008e54:	0800b923 	.word	0x0800b923
 8008e58:	0800b934 	.word	0x0800b934

08008e5c <__hi0bits>:
 8008e5c:	0c03      	lsrs	r3, r0, #16
 8008e5e:	041b      	lsls	r3, r3, #16
 8008e60:	b9d3      	cbnz	r3, 8008e98 <__hi0bits+0x3c>
 8008e62:	0400      	lsls	r0, r0, #16
 8008e64:	2310      	movs	r3, #16
 8008e66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e6a:	bf04      	itt	eq
 8008e6c:	0200      	lsleq	r0, r0, #8
 8008e6e:	3308      	addeq	r3, #8
 8008e70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e74:	bf04      	itt	eq
 8008e76:	0100      	lsleq	r0, r0, #4
 8008e78:	3304      	addeq	r3, #4
 8008e7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e7e:	bf04      	itt	eq
 8008e80:	0080      	lsleq	r0, r0, #2
 8008e82:	3302      	addeq	r3, #2
 8008e84:	2800      	cmp	r0, #0
 8008e86:	db05      	blt.n	8008e94 <__hi0bits+0x38>
 8008e88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e8c:	f103 0301 	add.w	r3, r3, #1
 8008e90:	bf08      	it	eq
 8008e92:	2320      	moveq	r3, #32
 8008e94:	4618      	mov	r0, r3
 8008e96:	4770      	bx	lr
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e7e4      	b.n	8008e66 <__hi0bits+0xa>

08008e9c <__lo0bits>:
 8008e9c:	6803      	ldr	r3, [r0, #0]
 8008e9e:	f013 0207 	ands.w	r2, r3, #7
 8008ea2:	4601      	mov	r1, r0
 8008ea4:	d00b      	beq.n	8008ebe <__lo0bits+0x22>
 8008ea6:	07da      	lsls	r2, r3, #31
 8008ea8:	d424      	bmi.n	8008ef4 <__lo0bits+0x58>
 8008eaa:	0798      	lsls	r0, r3, #30
 8008eac:	bf49      	itett	mi
 8008eae:	085b      	lsrmi	r3, r3, #1
 8008eb0:	089b      	lsrpl	r3, r3, #2
 8008eb2:	2001      	movmi	r0, #1
 8008eb4:	600b      	strmi	r3, [r1, #0]
 8008eb6:	bf5c      	itt	pl
 8008eb8:	600b      	strpl	r3, [r1, #0]
 8008eba:	2002      	movpl	r0, #2
 8008ebc:	4770      	bx	lr
 8008ebe:	b298      	uxth	r0, r3
 8008ec0:	b9b0      	cbnz	r0, 8008ef0 <__lo0bits+0x54>
 8008ec2:	0c1b      	lsrs	r3, r3, #16
 8008ec4:	2010      	movs	r0, #16
 8008ec6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008eca:	bf04      	itt	eq
 8008ecc:	0a1b      	lsreq	r3, r3, #8
 8008ece:	3008      	addeq	r0, #8
 8008ed0:	071a      	lsls	r2, r3, #28
 8008ed2:	bf04      	itt	eq
 8008ed4:	091b      	lsreq	r3, r3, #4
 8008ed6:	3004      	addeq	r0, #4
 8008ed8:	079a      	lsls	r2, r3, #30
 8008eda:	bf04      	itt	eq
 8008edc:	089b      	lsreq	r3, r3, #2
 8008ede:	3002      	addeq	r0, #2
 8008ee0:	07da      	lsls	r2, r3, #31
 8008ee2:	d403      	bmi.n	8008eec <__lo0bits+0x50>
 8008ee4:	085b      	lsrs	r3, r3, #1
 8008ee6:	f100 0001 	add.w	r0, r0, #1
 8008eea:	d005      	beq.n	8008ef8 <__lo0bits+0x5c>
 8008eec:	600b      	str	r3, [r1, #0]
 8008eee:	4770      	bx	lr
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	e7e8      	b.n	8008ec6 <__lo0bits+0x2a>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	4770      	bx	lr
 8008ef8:	2020      	movs	r0, #32
 8008efa:	4770      	bx	lr

08008efc <__i2b>:
 8008efc:	b510      	push	{r4, lr}
 8008efe:	460c      	mov	r4, r1
 8008f00:	2101      	movs	r1, #1
 8008f02:	f7ff feff 	bl	8008d04 <_Balloc>
 8008f06:	4602      	mov	r2, r0
 8008f08:	b928      	cbnz	r0, 8008f16 <__i2b+0x1a>
 8008f0a:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <__i2b+0x24>)
 8008f0c:	4805      	ldr	r0, [pc, #20]	; (8008f24 <__i2b+0x28>)
 8008f0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f12:	f000 fc9b 	bl	800984c <__assert_func>
 8008f16:	2301      	movs	r3, #1
 8008f18:	6144      	str	r4, [r0, #20]
 8008f1a:	6103      	str	r3, [r0, #16]
 8008f1c:	bd10      	pop	{r4, pc}
 8008f1e:	bf00      	nop
 8008f20:	0800b923 	.word	0x0800b923
 8008f24:	0800b934 	.word	0x0800b934

08008f28 <__multiply>:
 8008f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	690a      	ldr	r2, [r1, #16]
 8008f30:	6923      	ldr	r3, [r4, #16]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	bfb8      	it	lt
 8008f36:	460b      	movlt	r3, r1
 8008f38:	460d      	mov	r5, r1
 8008f3a:	bfbc      	itt	lt
 8008f3c:	4625      	movlt	r5, r4
 8008f3e:	461c      	movlt	r4, r3
 8008f40:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f44:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f48:	68ab      	ldr	r3, [r5, #8]
 8008f4a:	6869      	ldr	r1, [r5, #4]
 8008f4c:	eb0a 0709 	add.w	r7, sl, r9
 8008f50:	42bb      	cmp	r3, r7
 8008f52:	b085      	sub	sp, #20
 8008f54:	bfb8      	it	lt
 8008f56:	3101      	addlt	r1, #1
 8008f58:	f7ff fed4 	bl	8008d04 <_Balloc>
 8008f5c:	b930      	cbnz	r0, 8008f6c <__multiply+0x44>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	4b42      	ldr	r3, [pc, #264]	; (800906c <__multiply+0x144>)
 8008f62:	4843      	ldr	r0, [pc, #268]	; (8009070 <__multiply+0x148>)
 8008f64:	f240 115d 	movw	r1, #349	; 0x15d
 8008f68:	f000 fc70 	bl	800984c <__assert_func>
 8008f6c:	f100 0614 	add.w	r6, r0, #20
 8008f70:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008f74:	4633      	mov	r3, r6
 8008f76:	2200      	movs	r2, #0
 8008f78:	4543      	cmp	r3, r8
 8008f7a:	d31e      	bcc.n	8008fba <__multiply+0x92>
 8008f7c:	f105 0c14 	add.w	ip, r5, #20
 8008f80:	f104 0314 	add.w	r3, r4, #20
 8008f84:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008f88:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008f8c:	9202      	str	r2, [sp, #8]
 8008f8e:	ebac 0205 	sub.w	r2, ip, r5
 8008f92:	3a15      	subs	r2, #21
 8008f94:	f022 0203 	bic.w	r2, r2, #3
 8008f98:	3204      	adds	r2, #4
 8008f9a:	f105 0115 	add.w	r1, r5, #21
 8008f9e:	458c      	cmp	ip, r1
 8008fa0:	bf38      	it	cc
 8008fa2:	2204      	movcc	r2, #4
 8008fa4:	9201      	str	r2, [sp, #4]
 8008fa6:	9a02      	ldr	r2, [sp, #8]
 8008fa8:	9303      	str	r3, [sp, #12]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d808      	bhi.n	8008fc0 <__multiply+0x98>
 8008fae:	2f00      	cmp	r7, #0
 8008fb0:	dc55      	bgt.n	800905e <__multiply+0x136>
 8008fb2:	6107      	str	r7, [r0, #16]
 8008fb4:	b005      	add	sp, #20
 8008fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fba:	f843 2b04 	str.w	r2, [r3], #4
 8008fbe:	e7db      	b.n	8008f78 <__multiply+0x50>
 8008fc0:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fc4:	f1ba 0f00 	cmp.w	sl, #0
 8008fc8:	d020      	beq.n	800900c <__multiply+0xe4>
 8008fca:	f105 0e14 	add.w	lr, r5, #20
 8008fce:	46b1      	mov	r9, r6
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008fd6:	f8d9 b000 	ldr.w	fp, [r9]
 8008fda:	b2a1      	uxth	r1, r4
 8008fdc:	fa1f fb8b 	uxth.w	fp, fp
 8008fe0:	fb0a b101 	mla	r1, sl, r1, fp
 8008fe4:	4411      	add	r1, r2
 8008fe6:	f8d9 2000 	ldr.w	r2, [r9]
 8008fea:	0c24      	lsrs	r4, r4, #16
 8008fec:	0c12      	lsrs	r2, r2, #16
 8008fee:	fb0a 2404 	mla	r4, sl, r4, r2
 8008ff2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008ff6:	b289      	uxth	r1, r1
 8008ff8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008ffc:	45f4      	cmp	ip, lr
 8008ffe:	f849 1b04 	str.w	r1, [r9], #4
 8009002:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009006:	d8e4      	bhi.n	8008fd2 <__multiply+0xaa>
 8009008:	9901      	ldr	r1, [sp, #4]
 800900a:	5072      	str	r2, [r6, r1]
 800900c:	9a03      	ldr	r2, [sp, #12]
 800900e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009012:	3304      	adds	r3, #4
 8009014:	f1b9 0f00 	cmp.w	r9, #0
 8009018:	d01f      	beq.n	800905a <__multiply+0x132>
 800901a:	6834      	ldr	r4, [r6, #0]
 800901c:	f105 0114 	add.w	r1, r5, #20
 8009020:	46b6      	mov	lr, r6
 8009022:	f04f 0a00 	mov.w	sl, #0
 8009026:	880a      	ldrh	r2, [r1, #0]
 8009028:	f8be b002 	ldrh.w	fp, [lr, #2]
 800902c:	fb09 b202 	mla	r2, r9, r2, fp
 8009030:	4492      	add	sl, r2
 8009032:	b2a4      	uxth	r4, r4
 8009034:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009038:	f84e 4b04 	str.w	r4, [lr], #4
 800903c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009040:	f8be 2000 	ldrh.w	r2, [lr]
 8009044:	0c24      	lsrs	r4, r4, #16
 8009046:	fb09 2404 	mla	r4, r9, r4, r2
 800904a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800904e:	458c      	cmp	ip, r1
 8009050:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009054:	d8e7      	bhi.n	8009026 <__multiply+0xfe>
 8009056:	9a01      	ldr	r2, [sp, #4]
 8009058:	50b4      	str	r4, [r6, r2]
 800905a:	3604      	adds	r6, #4
 800905c:	e7a3      	b.n	8008fa6 <__multiply+0x7e>
 800905e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1a5      	bne.n	8008fb2 <__multiply+0x8a>
 8009066:	3f01      	subs	r7, #1
 8009068:	e7a1      	b.n	8008fae <__multiply+0x86>
 800906a:	bf00      	nop
 800906c:	0800b923 	.word	0x0800b923
 8009070:	0800b934 	.word	0x0800b934

08009074 <__pow5mult>:
 8009074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009078:	4615      	mov	r5, r2
 800907a:	f012 0203 	ands.w	r2, r2, #3
 800907e:	4606      	mov	r6, r0
 8009080:	460f      	mov	r7, r1
 8009082:	d007      	beq.n	8009094 <__pow5mult+0x20>
 8009084:	4c25      	ldr	r4, [pc, #148]	; (800911c <__pow5mult+0xa8>)
 8009086:	3a01      	subs	r2, #1
 8009088:	2300      	movs	r3, #0
 800908a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800908e:	f7ff fe9b 	bl	8008dc8 <__multadd>
 8009092:	4607      	mov	r7, r0
 8009094:	10ad      	asrs	r5, r5, #2
 8009096:	d03d      	beq.n	8009114 <__pow5mult+0xa0>
 8009098:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800909a:	b97c      	cbnz	r4, 80090bc <__pow5mult+0x48>
 800909c:	2010      	movs	r0, #16
 800909e:	f7ff fe1b 	bl	8008cd8 <malloc>
 80090a2:	4602      	mov	r2, r0
 80090a4:	6270      	str	r0, [r6, #36]	; 0x24
 80090a6:	b928      	cbnz	r0, 80090b4 <__pow5mult+0x40>
 80090a8:	4b1d      	ldr	r3, [pc, #116]	; (8009120 <__pow5mult+0xac>)
 80090aa:	481e      	ldr	r0, [pc, #120]	; (8009124 <__pow5mult+0xb0>)
 80090ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090b0:	f000 fbcc 	bl	800984c <__assert_func>
 80090b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090b8:	6004      	str	r4, [r0, #0]
 80090ba:	60c4      	str	r4, [r0, #12]
 80090bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090c4:	b94c      	cbnz	r4, 80090da <__pow5mult+0x66>
 80090c6:	f240 2171 	movw	r1, #625	; 0x271
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7ff ff16 	bl	8008efc <__i2b>
 80090d0:	2300      	movs	r3, #0
 80090d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80090d6:	4604      	mov	r4, r0
 80090d8:	6003      	str	r3, [r0, #0]
 80090da:	f04f 0900 	mov.w	r9, #0
 80090de:	07eb      	lsls	r3, r5, #31
 80090e0:	d50a      	bpl.n	80090f8 <__pow5mult+0x84>
 80090e2:	4639      	mov	r1, r7
 80090e4:	4622      	mov	r2, r4
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7ff ff1e 	bl	8008f28 <__multiply>
 80090ec:	4639      	mov	r1, r7
 80090ee:	4680      	mov	r8, r0
 80090f0:	4630      	mov	r0, r6
 80090f2:	f7ff fe47 	bl	8008d84 <_Bfree>
 80090f6:	4647      	mov	r7, r8
 80090f8:	106d      	asrs	r5, r5, #1
 80090fa:	d00b      	beq.n	8009114 <__pow5mult+0xa0>
 80090fc:	6820      	ldr	r0, [r4, #0]
 80090fe:	b938      	cbnz	r0, 8009110 <__pow5mult+0x9c>
 8009100:	4622      	mov	r2, r4
 8009102:	4621      	mov	r1, r4
 8009104:	4630      	mov	r0, r6
 8009106:	f7ff ff0f 	bl	8008f28 <__multiply>
 800910a:	6020      	str	r0, [r4, #0]
 800910c:	f8c0 9000 	str.w	r9, [r0]
 8009110:	4604      	mov	r4, r0
 8009112:	e7e4      	b.n	80090de <__pow5mult+0x6a>
 8009114:	4638      	mov	r0, r7
 8009116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800911a:	bf00      	nop
 800911c:	0800ba88 	.word	0x0800ba88
 8009120:	0800b8ad 	.word	0x0800b8ad
 8009124:	0800b934 	.word	0x0800b934

08009128 <__lshift>:
 8009128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800912c:	460c      	mov	r4, r1
 800912e:	6849      	ldr	r1, [r1, #4]
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009136:	68a3      	ldr	r3, [r4, #8]
 8009138:	4607      	mov	r7, r0
 800913a:	4691      	mov	r9, r2
 800913c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009140:	f108 0601 	add.w	r6, r8, #1
 8009144:	42b3      	cmp	r3, r6
 8009146:	db0b      	blt.n	8009160 <__lshift+0x38>
 8009148:	4638      	mov	r0, r7
 800914a:	f7ff fddb 	bl	8008d04 <_Balloc>
 800914e:	4605      	mov	r5, r0
 8009150:	b948      	cbnz	r0, 8009166 <__lshift+0x3e>
 8009152:	4602      	mov	r2, r0
 8009154:	4b28      	ldr	r3, [pc, #160]	; (80091f8 <__lshift+0xd0>)
 8009156:	4829      	ldr	r0, [pc, #164]	; (80091fc <__lshift+0xd4>)
 8009158:	f240 11d9 	movw	r1, #473	; 0x1d9
 800915c:	f000 fb76 	bl	800984c <__assert_func>
 8009160:	3101      	adds	r1, #1
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	e7ee      	b.n	8009144 <__lshift+0x1c>
 8009166:	2300      	movs	r3, #0
 8009168:	f100 0114 	add.w	r1, r0, #20
 800916c:	f100 0210 	add.w	r2, r0, #16
 8009170:	4618      	mov	r0, r3
 8009172:	4553      	cmp	r3, sl
 8009174:	db33      	blt.n	80091de <__lshift+0xb6>
 8009176:	6920      	ldr	r0, [r4, #16]
 8009178:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800917c:	f104 0314 	add.w	r3, r4, #20
 8009180:	f019 091f 	ands.w	r9, r9, #31
 8009184:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009188:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800918c:	d02b      	beq.n	80091e6 <__lshift+0xbe>
 800918e:	f1c9 0e20 	rsb	lr, r9, #32
 8009192:	468a      	mov	sl, r1
 8009194:	2200      	movs	r2, #0
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	fa00 f009 	lsl.w	r0, r0, r9
 800919c:	4302      	orrs	r2, r0
 800919e:	f84a 2b04 	str.w	r2, [sl], #4
 80091a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091a6:	459c      	cmp	ip, r3
 80091a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80091ac:	d8f3      	bhi.n	8009196 <__lshift+0x6e>
 80091ae:	ebac 0304 	sub.w	r3, ip, r4
 80091b2:	3b15      	subs	r3, #21
 80091b4:	f023 0303 	bic.w	r3, r3, #3
 80091b8:	3304      	adds	r3, #4
 80091ba:	f104 0015 	add.w	r0, r4, #21
 80091be:	4584      	cmp	ip, r0
 80091c0:	bf38      	it	cc
 80091c2:	2304      	movcc	r3, #4
 80091c4:	50ca      	str	r2, [r1, r3]
 80091c6:	b10a      	cbz	r2, 80091cc <__lshift+0xa4>
 80091c8:	f108 0602 	add.w	r6, r8, #2
 80091cc:	3e01      	subs	r6, #1
 80091ce:	4638      	mov	r0, r7
 80091d0:	612e      	str	r6, [r5, #16]
 80091d2:	4621      	mov	r1, r4
 80091d4:	f7ff fdd6 	bl	8008d84 <_Bfree>
 80091d8:	4628      	mov	r0, r5
 80091da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091de:	f842 0f04 	str.w	r0, [r2, #4]!
 80091e2:	3301      	adds	r3, #1
 80091e4:	e7c5      	b.n	8009172 <__lshift+0x4a>
 80091e6:	3904      	subs	r1, #4
 80091e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80091f0:	459c      	cmp	ip, r3
 80091f2:	d8f9      	bhi.n	80091e8 <__lshift+0xc0>
 80091f4:	e7ea      	b.n	80091cc <__lshift+0xa4>
 80091f6:	bf00      	nop
 80091f8:	0800b923 	.word	0x0800b923
 80091fc:	0800b934 	.word	0x0800b934

08009200 <__mcmp>:
 8009200:	b530      	push	{r4, r5, lr}
 8009202:	6902      	ldr	r2, [r0, #16]
 8009204:	690c      	ldr	r4, [r1, #16]
 8009206:	1b12      	subs	r2, r2, r4
 8009208:	d10e      	bne.n	8009228 <__mcmp+0x28>
 800920a:	f100 0314 	add.w	r3, r0, #20
 800920e:	3114      	adds	r1, #20
 8009210:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009214:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009218:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800921c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009220:	42a5      	cmp	r5, r4
 8009222:	d003      	beq.n	800922c <__mcmp+0x2c>
 8009224:	d305      	bcc.n	8009232 <__mcmp+0x32>
 8009226:	2201      	movs	r2, #1
 8009228:	4610      	mov	r0, r2
 800922a:	bd30      	pop	{r4, r5, pc}
 800922c:	4283      	cmp	r3, r0
 800922e:	d3f3      	bcc.n	8009218 <__mcmp+0x18>
 8009230:	e7fa      	b.n	8009228 <__mcmp+0x28>
 8009232:	f04f 32ff 	mov.w	r2, #4294967295
 8009236:	e7f7      	b.n	8009228 <__mcmp+0x28>

08009238 <__mdiff>:
 8009238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	460c      	mov	r4, r1
 800923e:	4606      	mov	r6, r0
 8009240:	4611      	mov	r1, r2
 8009242:	4620      	mov	r0, r4
 8009244:	4617      	mov	r7, r2
 8009246:	f7ff ffdb 	bl	8009200 <__mcmp>
 800924a:	1e05      	subs	r5, r0, #0
 800924c:	d110      	bne.n	8009270 <__mdiff+0x38>
 800924e:	4629      	mov	r1, r5
 8009250:	4630      	mov	r0, r6
 8009252:	f7ff fd57 	bl	8008d04 <_Balloc>
 8009256:	b930      	cbnz	r0, 8009266 <__mdiff+0x2e>
 8009258:	4b39      	ldr	r3, [pc, #228]	; (8009340 <__mdiff+0x108>)
 800925a:	4602      	mov	r2, r0
 800925c:	f240 2132 	movw	r1, #562	; 0x232
 8009260:	4838      	ldr	r0, [pc, #224]	; (8009344 <__mdiff+0x10c>)
 8009262:	f000 faf3 	bl	800984c <__assert_func>
 8009266:	2301      	movs	r3, #1
 8009268:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800926c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009270:	bfa4      	itt	ge
 8009272:	463b      	movge	r3, r7
 8009274:	4627      	movge	r7, r4
 8009276:	4630      	mov	r0, r6
 8009278:	6879      	ldr	r1, [r7, #4]
 800927a:	bfa6      	itte	ge
 800927c:	461c      	movge	r4, r3
 800927e:	2500      	movge	r5, #0
 8009280:	2501      	movlt	r5, #1
 8009282:	f7ff fd3f 	bl	8008d04 <_Balloc>
 8009286:	b920      	cbnz	r0, 8009292 <__mdiff+0x5a>
 8009288:	4b2d      	ldr	r3, [pc, #180]	; (8009340 <__mdiff+0x108>)
 800928a:	4602      	mov	r2, r0
 800928c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009290:	e7e6      	b.n	8009260 <__mdiff+0x28>
 8009292:	693e      	ldr	r6, [r7, #16]
 8009294:	60c5      	str	r5, [r0, #12]
 8009296:	6925      	ldr	r5, [r4, #16]
 8009298:	f107 0114 	add.w	r1, r7, #20
 800929c:	f104 0914 	add.w	r9, r4, #20
 80092a0:	f100 0e14 	add.w	lr, r0, #20
 80092a4:	f107 0210 	add.w	r2, r7, #16
 80092a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80092ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80092b0:	46f2      	mov	sl, lr
 80092b2:	2700      	movs	r7, #0
 80092b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80092b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092bc:	fa1f f883 	uxth.w	r8, r3
 80092c0:	fa17 f78b 	uxtah	r7, r7, fp
 80092c4:	0c1b      	lsrs	r3, r3, #16
 80092c6:	eba7 0808 	sub.w	r8, r7, r8
 80092ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092d2:	fa1f f888 	uxth.w	r8, r8
 80092d6:	141f      	asrs	r7, r3, #16
 80092d8:	454d      	cmp	r5, r9
 80092da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092de:	f84a 3b04 	str.w	r3, [sl], #4
 80092e2:	d8e7      	bhi.n	80092b4 <__mdiff+0x7c>
 80092e4:	1b2b      	subs	r3, r5, r4
 80092e6:	3b15      	subs	r3, #21
 80092e8:	f023 0303 	bic.w	r3, r3, #3
 80092ec:	3304      	adds	r3, #4
 80092ee:	3415      	adds	r4, #21
 80092f0:	42a5      	cmp	r5, r4
 80092f2:	bf38      	it	cc
 80092f4:	2304      	movcc	r3, #4
 80092f6:	4419      	add	r1, r3
 80092f8:	4473      	add	r3, lr
 80092fa:	469e      	mov	lr, r3
 80092fc:	460d      	mov	r5, r1
 80092fe:	4565      	cmp	r5, ip
 8009300:	d30e      	bcc.n	8009320 <__mdiff+0xe8>
 8009302:	f10c 0203 	add.w	r2, ip, #3
 8009306:	1a52      	subs	r2, r2, r1
 8009308:	f022 0203 	bic.w	r2, r2, #3
 800930c:	3903      	subs	r1, #3
 800930e:	458c      	cmp	ip, r1
 8009310:	bf38      	it	cc
 8009312:	2200      	movcc	r2, #0
 8009314:	441a      	add	r2, r3
 8009316:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800931a:	b17b      	cbz	r3, 800933c <__mdiff+0x104>
 800931c:	6106      	str	r6, [r0, #16]
 800931e:	e7a5      	b.n	800926c <__mdiff+0x34>
 8009320:	f855 8b04 	ldr.w	r8, [r5], #4
 8009324:	fa17 f488 	uxtah	r4, r7, r8
 8009328:	1422      	asrs	r2, r4, #16
 800932a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800932e:	b2a4      	uxth	r4, r4
 8009330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009334:	f84e 4b04 	str.w	r4, [lr], #4
 8009338:	1417      	asrs	r7, r2, #16
 800933a:	e7e0      	b.n	80092fe <__mdiff+0xc6>
 800933c:	3e01      	subs	r6, #1
 800933e:	e7ea      	b.n	8009316 <__mdiff+0xde>
 8009340:	0800b923 	.word	0x0800b923
 8009344:	0800b934 	.word	0x0800b934

08009348 <__d2b>:
 8009348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800934c:	4689      	mov	r9, r1
 800934e:	2101      	movs	r1, #1
 8009350:	ec57 6b10 	vmov	r6, r7, d0
 8009354:	4690      	mov	r8, r2
 8009356:	f7ff fcd5 	bl	8008d04 <_Balloc>
 800935a:	4604      	mov	r4, r0
 800935c:	b930      	cbnz	r0, 800936c <__d2b+0x24>
 800935e:	4602      	mov	r2, r0
 8009360:	4b25      	ldr	r3, [pc, #148]	; (80093f8 <__d2b+0xb0>)
 8009362:	4826      	ldr	r0, [pc, #152]	; (80093fc <__d2b+0xb4>)
 8009364:	f240 310a 	movw	r1, #778	; 0x30a
 8009368:	f000 fa70 	bl	800984c <__assert_func>
 800936c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009374:	bb35      	cbnz	r5, 80093c4 <__d2b+0x7c>
 8009376:	2e00      	cmp	r6, #0
 8009378:	9301      	str	r3, [sp, #4]
 800937a:	d028      	beq.n	80093ce <__d2b+0x86>
 800937c:	4668      	mov	r0, sp
 800937e:	9600      	str	r6, [sp, #0]
 8009380:	f7ff fd8c 	bl	8008e9c <__lo0bits>
 8009384:	9900      	ldr	r1, [sp, #0]
 8009386:	b300      	cbz	r0, 80093ca <__d2b+0x82>
 8009388:	9a01      	ldr	r2, [sp, #4]
 800938a:	f1c0 0320 	rsb	r3, r0, #32
 800938e:	fa02 f303 	lsl.w	r3, r2, r3
 8009392:	430b      	orrs	r3, r1
 8009394:	40c2      	lsrs	r2, r0
 8009396:	6163      	str	r3, [r4, #20]
 8009398:	9201      	str	r2, [sp, #4]
 800939a:	9b01      	ldr	r3, [sp, #4]
 800939c:	61a3      	str	r3, [r4, #24]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	bf14      	ite	ne
 80093a2:	2202      	movne	r2, #2
 80093a4:	2201      	moveq	r2, #1
 80093a6:	6122      	str	r2, [r4, #16]
 80093a8:	b1d5      	cbz	r5, 80093e0 <__d2b+0x98>
 80093aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093ae:	4405      	add	r5, r0
 80093b0:	f8c9 5000 	str.w	r5, [r9]
 80093b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093b8:	f8c8 0000 	str.w	r0, [r8]
 80093bc:	4620      	mov	r0, r4
 80093be:	b003      	add	sp, #12
 80093c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093c8:	e7d5      	b.n	8009376 <__d2b+0x2e>
 80093ca:	6161      	str	r1, [r4, #20]
 80093cc:	e7e5      	b.n	800939a <__d2b+0x52>
 80093ce:	a801      	add	r0, sp, #4
 80093d0:	f7ff fd64 	bl	8008e9c <__lo0bits>
 80093d4:	9b01      	ldr	r3, [sp, #4]
 80093d6:	6163      	str	r3, [r4, #20]
 80093d8:	2201      	movs	r2, #1
 80093da:	6122      	str	r2, [r4, #16]
 80093dc:	3020      	adds	r0, #32
 80093de:	e7e3      	b.n	80093a8 <__d2b+0x60>
 80093e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093e8:	f8c9 0000 	str.w	r0, [r9]
 80093ec:	6918      	ldr	r0, [r3, #16]
 80093ee:	f7ff fd35 	bl	8008e5c <__hi0bits>
 80093f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093f6:	e7df      	b.n	80093b8 <__d2b+0x70>
 80093f8:	0800b923 	.word	0x0800b923
 80093fc:	0800b934 	.word	0x0800b934

08009400 <_calloc_r>:
 8009400:	b513      	push	{r0, r1, r4, lr}
 8009402:	434a      	muls	r2, r1
 8009404:	4611      	mov	r1, r2
 8009406:	9201      	str	r2, [sp, #4]
 8009408:	f000 f85a 	bl	80094c0 <_malloc_r>
 800940c:	4604      	mov	r4, r0
 800940e:	b118      	cbz	r0, 8009418 <_calloc_r+0x18>
 8009410:	9a01      	ldr	r2, [sp, #4]
 8009412:	2100      	movs	r1, #0
 8009414:	f7fe f952 	bl	80076bc <memset>
 8009418:	4620      	mov	r0, r4
 800941a:	b002      	add	sp, #8
 800941c:	bd10      	pop	{r4, pc}
	...

08009420 <_free_r>:
 8009420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009422:	2900      	cmp	r1, #0
 8009424:	d048      	beq.n	80094b8 <_free_r+0x98>
 8009426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800942a:	9001      	str	r0, [sp, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f1a1 0404 	sub.w	r4, r1, #4
 8009432:	bfb8      	it	lt
 8009434:	18e4      	addlt	r4, r4, r3
 8009436:	f000 fa65 	bl	8009904 <__malloc_lock>
 800943a:	4a20      	ldr	r2, [pc, #128]	; (80094bc <_free_r+0x9c>)
 800943c:	9801      	ldr	r0, [sp, #4]
 800943e:	6813      	ldr	r3, [r2, #0]
 8009440:	4615      	mov	r5, r2
 8009442:	b933      	cbnz	r3, 8009452 <_free_r+0x32>
 8009444:	6063      	str	r3, [r4, #4]
 8009446:	6014      	str	r4, [r2, #0]
 8009448:	b003      	add	sp, #12
 800944a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800944e:	f000 ba5f 	b.w	8009910 <__malloc_unlock>
 8009452:	42a3      	cmp	r3, r4
 8009454:	d90b      	bls.n	800946e <_free_r+0x4e>
 8009456:	6821      	ldr	r1, [r4, #0]
 8009458:	1862      	adds	r2, r4, r1
 800945a:	4293      	cmp	r3, r2
 800945c:	bf04      	itt	eq
 800945e:	681a      	ldreq	r2, [r3, #0]
 8009460:	685b      	ldreq	r3, [r3, #4]
 8009462:	6063      	str	r3, [r4, #4]
 8009464:	bf04      	itt	eq
 8009466:	1852      	addeq	r2, r2, r1
 8009468:	6022      	streq	r2, [r4, #0]
 800946a:	602c      	str	r4, [r5, #0]
 800946c:	e7ec      	b.n	8009448 <_free_r+0x28>
 800946e:	461a      	mov	r2, r3
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	b10b      	cbz	r3, 8009478 <_free_r+0x58>
 8009474:	42a3      	cmp	r3, r4
 8009476:	d9fa      	bls.n	800946e <_free_r+0x4e>
 8009478:	6811      	ldr	r1, [r2, #0]
 800947a:	1855      	adds	r5, r2, r1
 800947c:	42a5      	cmp	r5, r4
 800947e:	d10b      	bne.n	8009498 <_free_r+0x78>
 8009480:	6824      	ldr	r4, [r4, #0]
 8009482:	4421      	add	r1, r4
 8009484:	1854      	adds	r4, r2, r1
 8009486:	42a3      	cmp	r3, r4
 8009488:	6011      	str	r1, [r2, #0]
 800948a:	d1dd      	bne.n	8009448 <_free_r+0x28>
 800948c:	681c      	ldr	r4, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	6053      	str	r3, [r2, #4]
 8009492:	4421      	add	r1, r4
 8009494:	6011      	str	r1, [r2, #0]
 8009496:	e7d7      	b.n	8009448 <_free_r+0x28>
 8009498:	d902      	bls.n	80094a0 <_free_r+0x80>
 800949a:	230c      	movs	r3, #12
 800949c:	6003      	str	r3, [r0, #0]
 800949e:	e7d3      	b.n	8009448 <_free_r+0x28>
 80094a0:	6825      	ldr	r5, [r4, #0]
 80094a2:	1961      	adds	r1, r4, r5
 80094a4:	428b      	cmp	r3, r1
 80094a6:	bf04      	itt	eq
 80094a8:	6819      	ldreq	r1, [r3, #0]
 80094aa:	685b      	ldreq	r3, [r3, #4]
 80094ac:	6063      	str	r3, [r4, #4]
 80094ae:	bf04      	itt	eq
 80094b0:	1949      	addeq	r1, r1, r5
 80094b2:	6021      	streq	r1, [r4, #0]
 80094b4:	6054      	str	r4, [r2, #4]
 80094b6:	e7c7      	b.n	8009448 <_free_r+0x28>
 80094b8:	b003      	add	sp, #12
 80094ba:	bd30      	pop	{r4, r5, pc}
 80094bc:	20000680 	.word	0x20000680

080094c0 <_malloc_r>:
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c2:	1ccd      	adds	r5, r1, #3
 80094c4:	f025 0503 	bic.w	r5, r5, #3
 80094c8:	3508      	adds	r5, #8
 80094ca:	2d0c      	cmp	r5, #12
 80094cc:	bf38      	it	cc
 80094ce:	250c      	movcc	r5, #12
 80094d0:	2d00      	cmp	r5, #0
 80094d2:	4606      	mov	r6, r0
 80094d4:	db01      	blt.n	80094da <_malloc_r+0x1a>
 80094d6:	42a9      	cmp	r1, r5
 80094d8:	d903      	bls.n	80094e2 <_malloc_r+0x22>
 80094da:	230c      	movs	r3, #12
 80094dc:	6033      	str	r3, [r6, #0]
 80094de:	2000      	movs	r0, #0
 80094e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e2:	f000 fa0f 	bl	8009904 <__malloc_lock>
 80094e6:	4921      	ldr	r1, [pc, #132]	; (800956c <_malloc_r+0xac>)
 80094e8:	680a      	ldr	r2, [r1, #0]
 80094ea:	4614      	mov	r4, r2
 80094ec:	b99c      	cbnz	r4, 8009516 <_malloc_r+0x56>
 80094ee:	4f20      	ldr	r7, [pc, #128]	; (8009570 <_malloc_r+0xb0>)
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	b923      	cbnz	r3, 80094fe <_malloc_r+0x3e>
 80094f4:	4621      	mov	r1, r4
 80094f6:	4630      	mov	r0, r6
 80094f8:	f000 f998 	bl	800982c <_sbrk_r>
 80094fc:	6038      	str	r0, [r7, #0]
 80094fe:	4629      	mov	r1, r5
 8009500:	4630      	mov	r0, r6
 8009502:	f000 f993 	bl	800982c <_sbrk_r>
 8009506:	1c43      	adds	r3, r0, #1
 8009508:	d123      	bne.n	8009552 <_malloc_r+0x92>
 800950a:	230c      	movs	r3, #12
 800950c:	6033      	str	r3, [r6, #0]
 800950e:	4630      	mov	r0, r6
 8009510:	f000 f9fe 	bl	8009910 <__malloc_unlock>
 8009514:	e7e3      	b.n	80094de <_malloc_r+0x1e>
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	1b5b      	subs	r3, r3, r5
 800951a:	d417      	bmi.n	800954c <_malloc_r+0x8c>
 800951c:	2b0b      	cmp	r3, #11
 800951e:	d903      	bls.n	8009528 <_malloc_r+0x68>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	441c      	add	r4, r3
 8009524:	6025      	str	r5, [r4, #0]
 8009526:	e004      	b.n	8009532 <_malloc_r+0x72>
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	42a2      	cmp	r2, r4
 800952c:	bf0c      	ite	eq
 800952e:	600b      	streq	r3, [r1, #0]
 8009530:	6053      	strne	r3, [r2, #4]
 8009532:	4630      	mov	r0, r6
 8009534:	f000 f9ec 	bl	8009910 <__malloc_unlock>
 8009538:	f104 000b 	add.w	r0, r4, #11
 800953c:	1d23      	adds	r3, r4, #4
 800953e:	f020 0007 	bic.w	r0, r0, #7
 8009542:	1ac2      	subs	r2, r0, r3
 8009544:	d0cc      	beq.n	80094e0 <_malloc_r+0x20>
 8009546:	1a1b      	subs	r3, r3, r0
 8009548:	50a3      	str	r3, [r4, r2]
 800954a:	e7c9      	b.n	80094e0 <_malloc_r+0x20>
 800954c:	4622      	mov	r2, r4
 800954e:	6864      	ldr	r4, [r4, #4]
 8009550:	e7cc      	b.n	80094ec <_malloc_r+0x2c>
 8009552:	1cc4      	adds	r4, r0, #3
 8009554:	f024 0403 	bic.w	r4, r4, #3
 8009558:	42a0      	cmp	r0, r4
 800955a:	d0e3      	beq.n	8009524 <_malloc_r+0x64>
 800955c:	1a21      	subs	r1, r4, r0
 800955e:	4630      	mov	r0, r6
 8009560:	f000 f964 	bl	800982c <_sbrk_r>
 8009564:	3001      	adds	r0, #1
 8009566:	d1dd      	bne.n	8009524 <_malloc_r+0x64>
 8009568:	e7cf      	b.n	800950a <_malloc_r+0x4a>
 800956a:	bf00      	nop
 800956c:	20000680 	.word	0x20000680
 8009570:	20000684 	.word	0x20000684

08009574 <__ssputs_r>:
 8009574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009578:	688e      	ldr	r6, [r1, #8]
 800957a:	429e      	cmp	r6, r3
 800957c:	4682      	mov	sl, r0
 800957e:	460c      	mov	r4, r1
 8009580:	4690      	mov	r8, r2
 8009582:	461f      	mov	r7, r3
 8009584:	d838      	bhi.n	80095f8 <__ssputs_r+0x84>
 8009586:	898a      	ldrh	r2, [r1, #12]
 8009588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800958c:	d032      	beq.n	80095f4 <__ssputs_r+0x80>
 800958e:	6825      	ldr	r5, [r4, #0]
 8009590:	6909      	ldr	r1, [r1, #16]
 8009592:	eba5 0901 	sub.w	r9, r5, r1
 8009596:	6965      	ldr	r5, [r4, #20]
 8009598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800959c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095a0:	3301      	adds	r3, #1
 80095a2:	444b      	add	r3, r9
 80095a4:	106d      	asrs	r5, r5, #1
 80095a6:	429d      	cmp	r5, r3
 80095a8:	bf38      	it	cc
 80095aa:	461d      	movcc	r5, r3
 80095ac:	0553      	lsls	r3, r2, #21
 80095ae:	d531      	bpl.n	8009614 <__ssputs_r+0xa0>
 80095b0:	4629      	mov	r1, r5
 80095b2:	f7ff ff85 	bl	80094c0 <_malloc_r>
 80095b6:	4606      	mov	r6, r0
 80095b8:	b950      	cbnz	r0, 80095d0 <__ssputs_r+0x5c>
 80095ba:	230c      	movs	r3, #12
 80095bc:	f8ca 3000 	str.w	r3, [sl]
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095c6:	81a3      	strh	r3, [r4, #12]
 80095c8:	f04f 30ff 	mov.w	r0, #4294967295
 80095cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d0:	6921      	ldr	r1, [r4, #16]
 80095d2:	464a      	mov	r2, r9
 80095d4:	f7ff fb88 	bl	8008ce8 <memcpy>
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	6126      	str	r6, [r4, #16]
 80095e6:	6165      	str	r5, [r4, #20]
 80095e8:	444e      	add	r6, r9
 80095ea:	eba5 0509 	sub.w	r5, r5, r9
 80095ee:	6026      	str	r6, [r4, #0]
 80095f0:	60a5      	str	r5, [r4, #8]
 80095f2:	463e      	mov	r6, r7
 80095f4:	42be      	cmp	r6, r7
 80095f6:	d900      	bls.n	80095fa <__ssputs_r+0x86>
 80095f8:	463e      	mov	r6, r7
 80095fa:	4632      	mov	r2, r6
 80095fc:	6820      	ldr	r0, [r4, #0]
 80095fe:	4641      	mov	r1, r8
 8009600:	f000 f966 	bl	80098d0 <memmove>
 8009604:	68a3      	ldr	r3, [r4, #8]
 8009606:	6822      	ldr	r2, [r4, #0]
 8009608:	1b9b      	subs	r3, r3, r6
 800960a:	4432      	add	r2, r6
 800960c:	60a3      	str	r3, [r4, #8]
 800960e:	6022      	str	r2, [r4, #0]
 8009610:	2000      	movs	r0, #0
 8009612:	e7db      	b.n	80095cc <__ssputs_r+0x58>
 8009614:	462a      	mov	r2, r5
 8009616:	f000 f981 	bl	800991c <_realloc_r>
 800961a:	4606      	mov	r6, r0
 800961c:	2800      	cmp	r0, #0
 800961e:	d1e1      	bne.n	80095e4 <__ssputs_r+0x70>
 8009620:	6921      	ldr	r1, [r4, #16]
 8009622:	4650      	mov	r0, sl
 8009624:	f7ff fefc 	bl	8009420 <_free_r>
 8009628:	e7c7      	b.n	80095ba <__ssputs_r+0x46>
	...

0800962c <_svfiprintf_r>:
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	4698      	mov	r8, r3
 8009632:	898b      	ldrh	r3, [r1, #12]
 8009634:	061b      	lsls	r3, r3, #24
 8009636:	b09d      	sub	sp, #116	; 0x74
 8009638:	4607      	mov	r7, r0
 800963a:	460d      	mov	r5, r1
 800963c:	4614      	mov	r4, r2
 800963e:	d50e      	bpl.n	800965e <_svfiprintf_r+0x32>
 8009640:	690b      	ldr	r3, [r1, #16]
 8009642:	b963      	cbnz	r3, 800965e <_svfiprintf_r+0x32>
 8009644:	2140      	movs	r1, #64	; 0x40
 8009646:	f7ff ff3b 	bl	80094c0 <_malloc_r>
 800964a:	6028      	str	r0, [r5, #0]
 800964c:	6128      	str	r0, [r5, #16]
 800964e:	b920      	cbnz	r0, 800965a <_svfiprintf_r+0x2e>
 8009650:	230c      	movs	r3, #12
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	e0d1      	b.n	80097fe <_svfiprintf_r+0x1d2>
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	616b      	str	r3, [r5, #20]
 800965e:	2300      	movs	r3, #0
 8009660:	9309      	str	r3, [sp, #36]	; 0x24
 8009662:	2320      	movs	r3, #32
 8009664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009668:	f8cd 800c 	str.w	r8, [sp, #12]
 800966c:	2330      	movs	r3, #48	; 0x30
 800966e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009818 <_svfiprintf_r+0x1ec>
 8009672:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009676:	f04f 0901 	mov.w	r9, #1
 800967a:	4623      	mov	r3, r4
 800967c:	469a      	mov	sl, r3
 800967e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009682:	b10a      	cbz	r2, 8009688 <_svfiprintf_r+0x5c>
 8009684:	2a25      	cmp	r2, #37	; 0x25
 8009686:	d1f9      	bne.n	800967c <_svfiprintf_r+0x50>
 8009688:	ebba 0b04 	subs.w	fp, sl, r4
 800968c:	d00b      	beq.n	80096a6 <_svfiprintf_r+0x7a>
 800968e:	465b      	mov	r3, fp
 8009690:	4622      	mov	r2, r4
 8009692:	4629      	mov	r1, r5
 8009694:	4638      	mov	r0, r7
 8009696:	f7ff ff6d 	bl	8009574 <__ssputs_r>
 800969a:	3001      	adds	r0, #1
 800969c:	f000 80aa 	beq.w	80097f4 <_svfiprintf_r+0x1c8>
 80096a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096a2:	445a      	add	r2, fp
 80096a4:	9209      	str	r2, [sp, #36]	; 0x24
 80096a6:	f89a 3000 	ldrb.w	r3, [sl]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 80a2 	beq.w	80097f4 <_svfiprintf_r+0x1c8>
 80096b0:	2300      	movs	r3, #0
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ba:	f10a 0a01 	add.w	sl, sl, #1
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	9307      	str	r3, [sp, #28]
 80096c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096c6:	931a      	str	r3, [sp, #104]	; 0x68
 80096c8:	4654      	mov	r4, sl
 80096ca:	2205      	movs	r2, #5
 80096cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d0:	4851      	ldr	r0, [pc, #324]	; (8009818 <_svfiprintf_r+0x1ec>)
 80096d2:	f7f6 fd8d 	bl	80001f0 <memchr>
 80096d6:	9a04      	ldr	r2, [sp, #16]
 80096d8:	b9d8      	cbnz	r0, 8009712 <_svfiprintf_r+0xe6>
 80096da:	06d0      	lsls	r0, r2, #27
 80096dc:	bf44      	itt	mi
 80096de:	2320      	movmi	r3, #32
 80096e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e4:	0711      	lsls	r1, r2, #28
 80096e6:	bf44      	itt	mi
 80096e8:	232b      	movmi	r3, #43	; 0x2b
 80096ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ee:	f89a 3000 	ldrb.w	r3, [sl]
 80096f2:	2b2a      	cmp	r3, #42	; 0x2a
 80096f4:	d015      	beq.n	8009722 <_svfiprintf_r+0xf6>
 80096f6:	9a07      	ldr	r2, [sp, #28]
 80096f8:	4654      	mov	r4, sl
 80096fa:	2000      	movs	r0, #0
 80096fc:	f04f 0c0a 	mov.w	ip, #10
 8009700:	4621      	mov	r1, r4
 8009702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009706:	3b30      	subs	r3, #48	; 0x30
 8009708:	2b09      	cmp	r3, #9
 800970a:	d94e      	bls.n	80097aa <_svfiprintf_r+0x17e>
 800970c:	b1b0      	cbz	r0, 800973c <_svfiprintf_r+0x110>
 800970e:	9207      	str	r2, [sp, #28]
 8009710:	e014      	b.n	800973c <_svfiprintf_r+0x110>
 8009712:	eba0 0308 	sub.w	r3, r0, r8
 8009716:	fa09 f303 	lsl.w	r3, r9, r3
 800971a:	4313      	orrs	r3, r2
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	46a2      	mov	sl, r4
 8009720:	e7d2      	b.n	80096c8 <_svfiprintf_r+0x9c>
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	1d19      	adds	r1, r3, #4
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	9103      	str	r1, [sp, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	bfbb      	ittet	lt
 800972e:	425b      	neglt	r3, r3
 8009730:	f042 0202 	orrlt.w	r2, r2, #2
 8009734:	9307      	strge	r3, [sp, #28]
 8009736:	9307      	strlt	r3, [sp, #28]
 8009738:	bfb8      	it	lt
 800973a:	9204      	strlt	r2, [sp, #16]
 800973c:	7823      	ldrb	r3, [r4, #0]
 800973e:	2b2e      	cmp	r3, #46	; 0x2e
 8009740:	d10c      	bne.n	800975c <_svfiprintf_r+0x130>
 8009742:	7863      	ldrb	r3, [r4, #1]
 8009744:	2b2a      	cmp	r3, #42	; 0x2a
 8009746:	d135      	bne.n	80097b4 <_svfiprintf_r+0x188>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	9203      	str	r2, [sp, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfb8      	it	lt
 8009754:	f04f 33ff 	movlt.w	r3, #4294967295
 8009758:	3402      	adds	r4, #2
 800975a:	9305      	str	r3, [sp, #20]
 800975c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009828 <_svfiprintf_r+0x1fc>
 8009760:	7821      	ldrb	r1, [r4, #0]
 8009762:	2203      	movs	r2, #3
 8009764:	4650      	mov	r0, sl
 8009766:	f7f6 fd43 	bl	80001f0 <memchr>
 800976a:	b140      	cbz	r0, 800977e <_svfiprintf_r+0x152>
 800976c:	2340      	movs	r3, #64	; 0x40
 800976e:	eba0 000a 	sub.w	r0, r0, sl
 8009772:	fa03 f000 	lsl.w	r0, r3, r0
 8009776:	9b04      	ldr	r3, [sp, #16]
 8009778:	4303      	orrs	r3, r0
 800977a:	3401      	adds	r4, #1
 800977c:	9304      	str	r3, [sp, #16]
 800977e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009782:	4826      	ldr	r0, [pc, #152]	; (800981c <_svfiprintf_r+0x1f0>)
 8009784:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009788:	2206      	movs	r2, #6
 800978a:	f7f6 fd31 	bl	80001f0 <memchr>
 800978e:	2800      	cmp	r0, #0
 8009790:	d038      	beq.n	8009804 <_svfiprintf_r+0x1d8>
 8009792:	4b23      	ldr	r3, [pc, #140]	; (8009820 <_svfiprintf_r+0x1f4>)
 8009794:	bb1b      	cbnz	r3, 80097de <_svfiprintf_r+0x1b2>
 8009796:	9b03      	ldr	r3, [sp, #12]
 8009798:	3307      	adds	r3, #7
 800979a:	f023 0307 	bic.w	r3, r3, #7
 800979e:	3308      	adds	r3, #8
 80097a0:	9303      	str	r3, [sp, #12]
 80097a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a4:	4433      	add	r3, r6
 80097a6:	9309      	str	r3, [sp, #36]	; 0x24
 80097a8:	e767      	b.n	800967a <_svfiprintf_r+0x4e>
 80097aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80097ae:	460c      	mov	r4, r1
 80097b0:	2001      	movs	r0, #1
 80097b2:	e7a5      	b.n	8009700 <_svfiprintf_r+0xd4>
 80097b4:	2300      	movs	r3, #0
 80097b6:	3401      	adds	r4, #1
 80097b8:	9305      	str	r3, [sp, #20]
 80097ba:	4619      	mov	r1, r3
 80097bc:	f04f 0c0a 	mov.w	ip, #10
 80097c0:	4620      	mov	r0, r4
 80097c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c6:	3a30      	subs	r2, #48	; 0x30
 80097c8:	2a09      	cmp	r2, #9
 80097ca:	d903      	bls.n	80097d4 <_svfiprintf_r+0x1a8>
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0c5      	beq.n	800975c <_svfiprintf_r+0x130>
 80097d0:	9105      	str	r1, [sp, #20]
 80097d2:	e7c3      	b.n	800975c <_svfiprintf_r+0x130>
 80097d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d8:	4604      	mov	r4, r0
 80097da:	2301      	movs	r3, #1
 80097dc:	e7f0      	b.n	80097c0 <_svfiprintf_r+0x194>
 80097de:	ab03      	add	r3, sp, #12
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	462a      	mov	r2, r5
 80097e4:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <_svfiprintf_r+0x1f8>)
 80097e6:	a904      	add	r1, sp, #16
 80097e8:	4638      	mov	r0, r7
 80097ea:	f7fe f80f 	bl	800780c <_printf_float>
 80097ee:	1c42      	adds	r2, r0, #1
 80097f0:	4606      	mov	r6, r0
 80097f2:	d1d6      	bne.n	80097a2 <_svfiprintf_r+0x176>
 80097f4:	89ab      	ldrh	r3, [r5, #12]
 80097f6:	065b      	lsls	r3, r3, #25
 80097f8:	f53f af2c 	bmi.w	8009654 <_svfiprintf_r+0x28>
 80097fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097fe:	b01d      	add	sp, #116	; 0x74
 8009800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009804:	ab03      	add	r3, sp, #12
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	462a      	mov	r2, r5
 800980a:	4b06      	ldr	r3, [pc, #24]	; (8009824 <_svfiprintf_r+0x1f8>)
 800980c:	a904      	add	r1, sp, #16
 800980e:	4638      	mov	r0, r7
 8009810:	f7fe faa0 	bl	8007d54 <_printf_i>
 8009814:	e7eb      	b.n	80097ee <_svfiprintf_r+0x1c2>
 8009816:	bf00      	nop
 8009818:	0800ba94 	.word	0x0800ba94
 800981c:	0800ba9e 	.word	0x0800ba9e
 8009820:	0800780d 	.word	0x0800780d
 8009824:	08009575 	.word	0x08009575
 8009828:	0800ba9a 	.word	0x0800ba9a

0800982c <_sbrk_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d06      	ldr	r5, [pc, #24]	; (8009848 <_sbrk_r+0x1c>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	f7f9 fef2 	bl	8003620 <_sbrk>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_sbrk_r+0x1a>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	b103      	cbz	r3, 8009846 <_sbrk_r+0x1a>
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	20000860 	.word	0x20000860

0800984c <__assert_func>:
 800984c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800984e:	4614      	mov	r4, r2
 8009850:	461a      	mov	r2, r3
 8009852:	4b09      	ldr	r3, [pc, #36]	; (8009878 <__assert_func+0x2c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4605      	mov	r5, r0
 8009858:	68d8      	ldr	r0, [r3, #12]
 800985a:	b14c      	cbz	r4, 8009870 <__assert_func+0x24>
 800985c:	4b07      	ldr	r3, [pc, #28]	; (800987c <__assert_func+0x30>)
 800985e:	9100      	str	r1, [sp, #0]
 8009860:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009864:	4906      	ldr	r1, [pc, #24]	; (8009880 <__assert_func+0x34>)
 8009866:	462b      	mov	r3, r5
 8009868:	f000 f80e 	bl	8009888 <fiprintf>
 800986c:	f000 faa4 	bl	8009db8 <abort>
 8009870:	4b04      	ldr	r3, [pc, #16]	; (8009884 <__assert_func+0x38>)
 8009872:	461c      	mov	r4, r3
 8009874:	e7f3      	b.n	800985e <__assert_func+0x12>
 8009876:	bf00      	nop
 8009878:	20000028 	.word	0x20000028
 800987c:	0800baa5 	.word	0x0800baa5
 8009880:	0800bab2 	.word	0x0800bab2
 8009884:	0800bae0 	.word	0x0800bae0

08009888 <fiprintf>:
 8009888:	b40e      	push	{r1, r2, r3}
 800988a:	b503      	push	{r0, r1, lr}
 800988c:	4601      	mov	r1, r0
 800988e:	ab03      	add	r3, sp, #12
 8009890:	4805      	ldr	r0, [pc, #20]	; (80098a8 <fiprintf+0x20>)
 8009892:	f853 2b04 	ldr.w	r2, [r3], #4
 8009896:	6800      	ldr	r0, [r0, #0]
 8009898:	9301      	str	r3, [sp, #4]
 800989a:	f000 f88f 	bl	80099bc <_vfiprintf_r>
 800989e:	b002      	add	sp, #8
 80098a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a4:	b003      	add	sp, #12
 80098a6:	4770      	bx	lr
 80098a8:	20000028 	.word	0x20000028

080098ac <__ascii_mbtowc>:
 80098ac:	b082      	sub	sp, #8
 80098ae:	b901      	cbnz	r1, 80098b2 <__ascii_mbtowc+0x6>
 80098b0:	a901      	add	r1, sp, #4
 80098b2:	b142      	cbz	r2, 80098c6 <__ascii_mbtowc+0x1a>
 80098b4:	b14b      	cbz	r3, 80098ca <__ascii_mbtowc+0x1e>
 80098b6:	7813      	ldrb	r3, [r2, #0]
 80098b8:	600b      	str	r3, [r1, #0]
 80098ba:	7812      	ldrb	r2, [r2, #0]
 80098bc:	1e10      	subs	r0, r2, #0
 80098be:	bf18      	it	ne
 80098c0:	2001      	movne	r0, #1
 80098c2:	b002      	add	sp, #8
 80098c4:	4770      	bx	lr
 80098c6:	4610      	mov	r0, r2
 80098c8:	e7fb      	b.n	80098c2 <__ascii_mbtowc+0x16>
 80098ca:	f06f 0001 	mvn.w	r0, #1
 80098ce:	e7f8      	b.n	80098c2 <__ascii_mbtowc+0x16>

080098d0 <memmove>:
 80098d0:	4288      	cmp	r0, r1
 80098d2:	b510      	push	{r4, lr}
 80098d4:	eb01 0402 	add.w	r4, r1, r2
 80098d8:	d902      	bls.n	80098e0 <memmove+0x10>
 80098da:	4284      	cmp	r4, r0
 80098dc:	4623      	mov	r3, r4
 80098de:	d807      	bhi.n	80098f0 <memmove+0x20>
 80098e0:	1e43      	subs	r3, r0, #1
 80098e2:	42a1      	cmp	r1, r4
 80098e4:	d008      	beq.n	80098f8 <memmove+0x28>
 80098e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098ee:	e7f8      	b.n	80098e2 <memmove+0x12>
 80098f0:	4402      	add	r2, r0
 80098f2:	4601      	mov	r1, r0
 80098f4:	428a      	cmp	r2, r1
 80098f6:	d100      	bne.n	80098fa <memmove+0x2a>
 80098f8:	bd10      	pop	{r4, pc}
 80098fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009902:	e7f7      	b.n	80098f4 <memmove+0x24>

08009904 <__malloc_lock>:
 8009904:	4801      	ldr	r0, [pc, #4]	; (800990c <__malloc_lock+0x8>)
 8009906:	f000 bc17 	b.w	800a138 <__retarget_lock_acquire_recursive>
 800990a:	bf00      	nop
 800990c:	20000868 	.word	0x20000868

08009910 <__malloc_unlock>:
 8009910:	4801      	ldr	r0, [pc, #4]	; (8009918 <__malloc_unlock+0x8>)
 8009912:	f000 bc12 	b.w	800a13a <__retarget_lock_release_recursive>
 8009916:	bf00      	nop
 8009918:	20000868 	.word	0x20000868

0800991c <_realloc_r>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	4607      	mov	r7, r0
 8009920:	4614      	mov	r4, r2
 8009922:	460e      	mov	r6, r1
 8009924:	b921      	cbnz	r1, 8009930 <_realloc_r+0x14>
 8009926:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800992a:	4611      	mov	r1, r2
 800992c:	f7ff bdc8 	b.w	80094c0 <_malloc_r>
 8009930:	b922      	cbnz	r2, 800993c <_realloc_r+0x20>
 8009932:	f7ff fd75 	bl	8009420 <_free_r>
 8009936:	4625      	mov	r5, r4
 8009938:	4628      	mov	r0, r5
 800993a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800993c:	f000 fc62 	bl	800a204 <_malloc_usable_size_r>
 8009940:	42a0      	cmp	r0, r4
 8009942:	d20f      	bcs.n	8009964 <_realloc_r+0x48>
 8009944:	4621      	mov	r1, r4
 8009946:	4638      	mov	r0, r7
 8009948:	f7ff fdba 	bl	80094c0 <_malloc_r>
 800994c:	4605      	mov	r5, r0
 800994e:	2800      	cmp	r0, #0
 8009950:	d0f2      	beq.n	8009938 <_realloc_r+0x1c>
 8009952:	4631      	mov	r1, r6
 8009954:	4622      	mov	r2, r4
 8009956:	f7ff f9c7 	bl	8008ce8 <memcpy>
 800995a:	4631      	mov	r1, r6
 800995c:	4638      	mov	r0, r7
 800995e:	f7ff fd5f 	bl	8009420 <_free_r>
 8009962:	e7e9      	b.n	8009938 <_realloc_r+0x1c>
 8009964:	4635      	mov	r5, r6
 8009966:	e7e7      	b.n	8009938 <_realloc_r+0x1c>

08009968 <__sfputc_r>:
 8009968:	6893      	ldr	r3, [r2, #8]
 800996a:	3b01      	subs	r3, #1
 800996c:	2b00      	cmp	r3, #0
 800996e:	b410      	push	{r4}
 8009970:	6093      	str	r3, [r2, #8]
 8009972:	da08      	bge.n	8009986 <__sfputc_r+0x1e>
 8009974:	6994      	ldr	r4, [r2, #24]
 8009976:	42a3      	cmp	r3, r4
 8009978:	db01      	blt.n	800997e <__sfputc_r+0x16>
 800997a:	290a      	cmp	r1, #10
 800997c:	d103      	bne.n	8009986 <__sfputc_r+0x1e>
 800997e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009982:	f000 b94b 	b.w	8009c1c <__swbuf_r>
 8009986:	6813      	ldr	r3, [r2, #0]
 8009988:	1c58      	adds	r0, r3, #1
 800998a:	6010      	str	r0, [r2, #0]
 800998c:	7019      	strb	r1, [r3, #0]
 800998e:	4608      	mov	r0, r1
 8009990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009994:	4770      	bx	lr

08009996 <__sfputs_r>:
 8009996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009998:	4606      	mov	r6, r0
 800999a:	460f      	mov	r7, r1
 800999c:	4614      	mov	r4, r2
 800999e:	18d5      	adds	r5, r2, r3
 80099a0:	42ac      	cmp	r4, r5
 80099a2:	d101      	bne.n	80099a8 <__sfputs_r+0x12>
 80099a4:	2000      	movs	r0, #0
 80099a6:	e007      	b.n	80099b8 <__sfputs_r+0x22>
 80099a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ac:	463a      	mov	r2, r7
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7ff ffda 	bl	8009968 <__sfputc_r>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d1f3      	bne.n	80099a0 <__sfputs_r+0xa>
 80099b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099bc <_vfiprintf_r>:
 80099bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c0:	460d      	mov	r5, r1
 80099c2:	b09d      	sub	sp, #116	; 0x74
 80099c4:	4614      	mov	r4, r2
 80099c6:	4698      	mov	r8, r3
 80099c8:	4606      	mov	r6, r0
 80099ca:	b118      	cbz	r0, 80099d4 <_vfiprintf_r+0x18>
 80099cc:	6983      	ldr	r3, [r0, #24]
 80099ce:	b90b      	cbnz	r3, 80099d4 <_vfiprintf_r+0x18>
 80099d0:	f000 fb14 	bl	8009ffc <__sinit>
 80099d4:	4b89      	ldr	r3, [pc, #548]	; (8009bfc <_vfiprintf_r+0x240>)
 80099d6:	429d      	cmp	r5, r3
 80099d8:	d11b      	bne.n	8009a12 <_vfiprintf_r+0x56>
 80099da:	6875      	ldr	r5, [r6, #4]
 80099dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099de:	07d9      	lsls	r1, r3, #31
 80099e0:	d405      	bmi.n	80099ee <_vfiprintf_r+0x32>
 80099e2:	89ab      	ldrh	r3, [r5, #12]
 80099e4:	059a      	lsls	r2, r3, #22
 80099e6:	d402      	bmi.n	80099ee <_vfiprintf_r+0x32>
 80099e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ea:	f000 fba5 	bl	800a138 <__retarget_lock_acquire_recursive>
 80099ee:	89ab      	ldrh	r3, [r5, #12]
 80099f0:	071b      	lsls	r3, r3, #28
 80099f2:	d501      	bpl.n	80099f8 <_vfiprintf_r+0x3c>
 80099f4:	692b      	ldr	r3, [r5, #16]
 80099f6:	b9eb      	cbnz	r3, 8009a34 <_vfiprintf_r+0x78>
 80099f8:	4629      	mov	r1, r5
 80099fa:	4630      	mov	r0, r6
 80099fc:	f000 f96e 	bl	8009cdc <__swsetup_r>
 8009a00:	b1c0      	cbz	r0, 8009a34 <_vfiprintf_r+0x78>
 8009a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a04:	07dc      	lsls	r4, r3, #31
 8009a06:	d50e      	bpl.n	8009a26 <_vfiprintf_r+0x6a>
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	b01d      	add	sp, #116	; 0x74
 8009a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a12:	4b7b      	ldr	r3, [pc, #492]	; (8009c00 <_vfiprintf_r+0x244>)
 8009a14:	429d      	cmp	r5, r3
 8009a16:	d101      	bne.n	8009a1c <_vfiprintf_r+0x60>
 8009a18:	68b5      	ldr	r5, [r6, #8]
 8009a1a:	e7df      	b.n	80099dc <_vfiprintf_r+0x20>
 8009a1c:	4b79      	ldr	r3, [pc, #484]	; (8009c04 <_vfiprintf_r+0x248>)
 8009a1e:	429d      	cmp	r5, r3
 8009a20:	bf08      	it	eq
 8009a22:	68f5      	ldreq	r5, [r6, #12]
 8009a24:	e7da      	b.n	80099dc <_vfiprintf_r+0x20>
 8009a26:	89ab      	ldrh	r3, [r5, #12]
 8009a28:	0598      	lsls	r0, r3, #22
 8009a2a:	d4ed      	bmi.n	8009a08 <_vfiprintf_r+0x4c>
 8009a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a2e:	f000 fb84 	bl	800a13a <__retarget_lock_release_recursive>
 8009a32:	e7e9      	b.n	8009a08 <_vfiprintf_r+0x4c>
 8009a34:	2300      	movs	r3, #0
 8009a36:	9309      	str	r3, [sp, #36]	; 0x24
 8009a38:	2320      	movs	r3, #32
 8009a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a42:	2330      	movs	r3, #48	; 0x30
 8009a44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c08 <_vfiprintf_r+0x24c>
 8009a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a4c:	f04f 0901 	mov.w	r9, #1
 8009a50:	4623      	mov	r3, r4
 8009a52:	469a      	mov	sl, r3
 8009a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a58:	b10a      	cbz	r2, 8009a5e <_vfiprintf_r+0xa2>
 8009a5a:	2a25      	cmp	r2, #37	; 0x25
 8009a5c:	d1f9      	bne.n	8009a52 <_vfiprintf_r+0x96>
 8009a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a62:	d00b      	beq.n	8009a7c <_vfiprintf_r+0xc0>
 8009a64:	465b      	mov	r3, fp
 8009a66:	4622      	mov	r2, r4
 8009a68:	4629      	mov	r1, r5
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f7ff ff93 	bl	8009996 <__sfputs_r>
 8009a70:	3001      	adds	r0, #1
 8009a72:	f000 80aa 	beq.w	8009bca <_vfiprintf_r+0x20e>
 8009a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a78:	445a      	add	r2, fp
 8009a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 80a2 	beq.w	8009bca <_vfiprintf_r+0x20e>
 8009a86:	2300      	movs	r3, #0
 8009a88:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a90:	f10a 0a01 	add.w	sl, sl, #1
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	9307      	str	r3, [sp, #28]
 8009a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a9e:	4654      	mov	r4, sl
 8009aa0:	2205      	movs	r2, #5
 8009aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa6:	4858      	ldr	r0, [pc, #352]	; (8009c08 <_vfiprintf_r+0x24c>)
 8009aa8:	f7f6 fba2 	bl	80001f0 <memchr>
 8009aac:	9a04      	ldr	r2, [sp, #16]
 8009aae:	b9d8      	cbnz	r0, 8009ae8 <_vfiprintf_r+0x12c>
 8009ab0:	06d1      	lsls	r1, r2, #27
 8009ab2:	bf44      	itt	mi
 8009ab4:	2320      	movmi	r3, #32
 8009ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aba:	0713      	lsls	r3, r2, #28
 8009abc:	bf44      	itt	mi
 8009abe:	232b      	movmi	r3, #43	; 0x2b
 8009ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8009aca:	d015      	beq.n	8009af8 <_vfiprintf_r+0x13c>
 8009acc:	9a07      	ldr	r2, [sp, #28]
 8009ace:	4654      	mov	r4, sl
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	f04f 0c0a 	mov.w	ip, #10
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009adc:	3b30      	subs	r3, #48	; 0x30
 8009ade:	2b09      	cmp	r3, #9
 8009ae0:	d94e      	bls.n	8009b80 <_vfiprintf_r+0x1c4>
 8009ae2:	b1b0      	cbz	r0, 8009b12 <_vfiprintf_r+0x156>
 8009ae4:	9207      	str	r2, [sp, #28]
 8009ae6:	e014      	b.n	8009b12 <_vfiprintf_r+0x156>
 8009ae8:	eba0 0308 	sub.w	r3, r0, r8
 8009aec:	fa09 f303 	lsl.w	r3, r9, r3
 8009af0:	4313      	orrs	r3, r2
 8009af2:	9304      	str	r3, [sp, #16]
 8009af4:	46a2      	mov	sl, r4
 8009af6:	e7d2      	b.n	8009a9e <_vfiprintf_r+0xe2>
 8009af8:	9b03      	ldr	r3, [sp, #12]
 8009afa:	1d19      	adds	r1, r3, #4
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	9103      	str	r1, [sp, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	bfbb      	ittet	lt
 8009b04:	425b      	neglt	r3, r3
 8009b06:	f042 0202 	orrlt.w	r2, r2, #2
 8009b0a:	9307      	strge	r3, [sp, #28]
 8009b0c:	9307      	strlt	r3, [sp, #28]
 8009b0e:	bfb8      	it	lt
 8009b10:	9204      	strlt	r2, [sp, #16]
 8009b12:	7823      	ldrb	r3, [r4, #0]
 8009b14:	2b2e      	cmp	r3, #46	; 0x2e
 8009b16:	d10c      	bne.n	8009b32 <_vfiprintf_r+0x176>
 8009b18:	7863      	ldrb	r3, [r4, #1]
 8009b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1c:	d135      	bne.n	8009b8a <_vfiprintf_r+0x1ce>
 8009b1e:	9b03      	ldr	r3, [sp, #12]
 8009b20:	1d1a      	adds	r2, r3, #4
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	9203      	str	r2, [sp, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	bfb8      	it	lt
 8009b2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b2e:	3402      	adds	r4, #2
 8009b30:	9305      	str	r3, [sp, #20]
 8009b32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c18 <_vfiprintf_r+0x25c>
 8009b36:	7821      	ldrb	r1, [r4, #0]
 8009b38:	2203      	movs	r2, #3
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	f7f6 fb58 	bl	80001f0 <memchr>
 8009b40:	b140      	cbz	r0, 8009b54 <_vfiprintf_r+0x198>
 8009b42:	2340      	movs	r3, #64	; 0x40
 8009b44:	eba0 000a 	sub.w	r0, r0, sl
 8009b48:	fa03 f000 	lsl.w	r0, r3, r0
 8009b4c:	9b04      	ldr	r3, [sp, #16]
 8009b4e:	4303      	orrs	r3, r0
 8009b50:	3401      	adds	r4, #1
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b58:	482c      	ldr	r0, [pc, #176]	; (8009c0c <_vfiprintf_r+0x250>)
 8009b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b5e:	2206      	movs	r2, #6
 8009b60:	f7f6 fb46 	bl	80001f0 <memchr>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d03f      	beq.n	8009be8 <_vfiprintf_r+0x22c>
 8009b68:	4b29      	ldr	r3, [pc, #164]	; (8009c10 <_vfiprintf_r+0x254>)
 8009b6a:	bb1b      	cbnz	r3, 8009bb4 <_vfiprintf_r+0x1f8>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	3307      	adds	r3, #7
 8009b70:	f023 0307 	bic.w	r3, r3, #7
 8009b74:	3308      	adds	r3, #8
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7a:	443b      	add	r3, r7
 8009b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7e:	e767      	b.n	8009a50 <_vfiprintf_r+0x94>
 8009b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b84:	460c      	mov	r4, r1
 8009b86:	2001      	movs	r0, #1
 8009b88:	e7a5      	b.n	8009ad6 <_vfiprintf_r+0x11a>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	3401      	adds	r4, #1
 8009b8e:	9305      	str	r3, [sp, #20]
 8009b90:	4619      	mov	r1, r3
 8009b92:	f04f 0c0a 	mov.w	ip, #10
 8009b96:	4620      	mov	r0, r4
 8009b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b9c:	3a30      	subs	r2, #48	; 0x30
 8009b9e:	2a09      	cmp	r2, #9
 8009ba0:	d903      	bls.n	8009baa <_vfiprintf_r+0x1ee>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0c5      	beq.n	8009b32 <_vfiprintf_r+0x176>
 8009ba6:	9105      	str	r1, [sp, #20]
 8009ba8:	e7c3      	b.n	8009b32 <_vfiprintf_r+0x176>
 8009baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bae:	4604      	mov	r4, r0
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e7f0      	b.n	8009b96 <_vfiprintf_r+0x1da>
 8009bb4:	ab03      	add	r3, sp, #12
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	462a      	mov	r2, r5
 8009bba:	4b16      	ldr	r3, [pc, #88]	; (8009c14 <_vfiprintf_r+0x258>)
 8009bbc:	a904      	add	r1, sp, #16
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f7fd fe24 	bl	800780c <_printf_float>
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	1c78      	adds	r0, r7, #1
 8009bc8:	d1d6      	bne.n	8009b78 <_vfiprintf_r+0x1bc>
 8009bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bcc:	07d9      	lsls	r1, r3, #31
 8009bce:	d405      	bmi.n	8009bdc <_vfiprintf_r+0x220>
 8009bd0:	89ab      	ldrh	r3, [r5, #12]
 8009bd2:	059a      	lsls	r2, r3, #22
 8009bd4:	d402      	bmi.n	8009bdc <_vfiprintf_r+0x220>
 8009bd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bd8:	f000 faaf 	bl	800a13a <__retarget_lock_release_recursive>
 8009bdc:	89ab      	ldrh	r3, [r5, #12]
 8009bde:	065b      	lsls	r3, r3, #25
 8009be0:	f53f af12 	bmi.w	8009a08 <_vfiprintf_r+0x4c>
 8009be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009be6:	e711      	b.n	8009a0c <_vfiprintf_r+0x50>
 8009be8:	ab03      	add	r3, sp, #12
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	462a      	mov	r2, r5
 8009bee:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <_vfiprintf_r+0x258>)
 8009bf0:	a904      	add	r1, sp, #16
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7fe f8ae 	bl	8007d54 <_printf_i>
 8009bf8:	e7e4      	b.n	8009bc4 <_vfiprintf_r+0x208>
 8009bfa:	bf00      	nop
 8009bfc:	0800bc0c 	.word	0x0800bc0c
 8009c00:	0800bc2c 	.word	0x0800bc2c
 8009c04:	0800bbec 	.word	0x0800bbec
 8009c08:	0800ba94 	.word	0x0800ba94
 8009c0c:	0800ba9e 	.word	0x0800ba9e
 8009c10:	0800780d 	.word	0x0800780d
 8009c14:	08009997 	.word	0x08009997
 8009c18:	0800ba9a 	.word	0x0800ba9a

08009c1c <__swbuf_r>:
 8009c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1e:	460e      	mov	r6, r1
 8009c20:	4614      	mov	r4, r2
 8009c22:	4605      	mov	r5, r0
 8009c24:	b118      	cbz	r0, 8009c2e <__swbuf_r+0x12>
 8009c26:	6983      	ldr	r3, [r0, #24]
 8009c28:	b90b      	cbnz	r3, 8009c2e <__swbuf_r+0x12>
 8009c2a:	f000 f9e7 	bl	8009ffc <__sinit>
 8009c2e:	4b21      	ldr	r3, [pc, #132]	; (8009cb4 <__swbuf_r+0x98>)
 8009c30:	429c      	cmp	r4, r3
 8009c32:	d12b      	bne.n	8009c8c <__swbuf_r+0x70>
 8009c34:	686c      	ldr	r4, [r5, #4]
 8009c36:	69a3      	ldr	r3, [r4, #24]
 8009c38:	60a3      	str	r3, [r4, #8]
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	071a      	lsls	r2, r3, #28
 8009c3e:	d52f      	bpl.n	8009ca0 <__swbuf_r+0x84>
 8009c40:	6923      	ldr	r3, [r4, #16]
 8009c42:	b36b      	cbz	r3, 8009ca0 <__swbuf_r+0x84>
 8009c44:	6923      	ldr	r3, [r4, #16]
 8009c46:	6820      	ldr	r0, [r4, #0]
 8009c48:	1ac0      	subs	r0, r0, r3
 8009c4a:	6963      	ldr	r3, [r4, #20]
 8009c4c:	b2f6      	uxtb	r6, r6
 8009c4e:	4283      	cmp	r3, r0
 8009c50:	4637      	mov	r7, r6
 8009c52:	dc04      	bgt.n	8009c5e <__swbuf_r+0x42>
 8009c54:	4621      	mov	r1, r4
 8009c56:	4628      	mov	r0, r5
 8009c58:	f000 f93c 	bl	8009ed4 <_fflush_r>
 8009c5c:	bb30      	cbnz	r0, 8009cac <__swbuf_r+0x90>
 8009c5e:	68a3      	ldr	r3, [r4, #8]
 8009c60:	3b01      	subs	r3, #1
 8009c62:	60a3      	str	r3, [r4, #8]
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	1c5a      	adds	r2, r3, #1
 8009c68:	6022      	str	r2, [r4, #0]
 8009c6a:	701e      	strb	r6, [r3, #0]
 8009c6c:	6963      	ldr	r3, [r4, #20]
 8009c6e:	3001      	adds	r0, #1
 8009c70:	4283      	cmp	r3, r0
 8009c72:	d004      	beq.n	8009c7e <__swbuf_r+0x62>
 8009c74:	89a3      	ldrh	r3, [r4, #12]
 8009c76:	07db      	lsls	r3, r3, #31
 8009c78:	d506      	bpl.n	8009c88 <__swbuf_r+0x6c>
 8009c7a:	2e0a      	cmp	r6, #10
 8009c7c:	d104      	bne.n	8009c88 <__swbuf_r+0x6c>
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4628      	mov	r0, r5
 8009c82:	f000 f927 	bl	8009ed4 <_fflush_r>
 8009c86:	b988      	cbnz	r0, 8009cac <__swbuf_r+0x90>
 8009c88:	4638      	mov	r0, r7
 8009c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	; (8009cb8 <__swbuf_r+0x9c>)
 8009c8e:	429c      	cmp	r4, r3
 8009c90:	d101      	bne.n	8009c96 <__swbuf_r+0x7a>
 8009c92:	68ac      	ldr	r4, [r5, #8]
 8009c94:	e7cf      	b.n	8009c36 <__swbuf_r+0x1a>
 8009c96:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <__swbuf_r+0xa0>)
 8009c98:	429c      	cmp	r4, r3
 8009c9a:	bf08      	it	eq
 8009c9c:	68ec      	ldreq	r4, [r5, #12]
 8009c9e:	e7ca      	b.n	8009c36 <__swbuf_r+0x1a>
 8009ca0:	4621      	mov	r1, r4
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f000 f81a 	bl	8009cdc <__swsetup_r>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d0cb      	beq.n	8009c44 <__swbuf_r+0x28>
 8009cac:	f04f 37ff 	mov.w	r7, #4294967295
 8009cb0:	e7ea      	b.n	8009c88 <__swbuf_r+0x6c>
 8009cb2:	bf00      	nop
 8009cb4:	0800bc0c 	.word	0x0800bc0c
 8009cb8:	0800bc2c 	.word	0x0800bc2c
 8009cbc:	0800bbec 	.word	0x0800bbec

08009cc0 <__ascii_wctomb>:
 8009cc0:	b149      	cbz	r1, 8009cd6 <__ascii_wctomb+0x16>
 8009cc2:	2aff      	cmp	r2, #255	; 0xff
 8009cc4:	bf85      	ittet	hi
 8009cc6:	238a      	movhi	r3, #138	; 0x8a
 8009cc8:	6003      	strhi	r3, [r0, #0]
 8009cca:	700a      	strbls	r2, [r1, #0]
 8009ccc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009cd0:	bf98      	it	ls
 8009cd2:	2001      	movls	r0, #1
 8009cd4:	4770      	bx	lr
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	4770      	bx	lr
	...

08009cdc <__swsetup_r>:
 8009cdc:	4b32      	ldr	r3, [pc, #200]	; (8009da8 <__swsetup_r+0xcc>)
 8009cde:	b570      	push	{r4, r5, r6, lr}
 8009ce0:	681d      	ldr	r5, [r3, #0]
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	b125      	cbz	r5, 8009cf2 <__swsetup_r+0x16>
 8009ce8:	69ab      	ldr	r3, [r5, #24]
 8009cea:	b913      	cbnz	r3, 8009cf2 <__swsetup_r+0x16>
 8009cec:	4628      	mov	r0, r5
 8009cee:	f000 f985 	bl	8009ffc <__sinit>
 8009cf2:	4b2e      	ldr	r3, [pc, #184]	; (8009dac <__swsetup_r+0xd0>)
 8009cf4:	429c      	cmp	r4, r3
 8009cf6:	d10f      	bne.n	8009d18 <__swsetup_r+0x3c>
 8009cf8:	686c      	ldr	r4, [r5, #4]
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d00:	0719      	lsls	r1, r3, #28
 8009d02:	d42c      	bmi.n	8009d5e <__swsetup_r+0x82>
 8009d04:	06dd      	lsls	r5, r3, #27
 8009d06:	d411      	bmi.n	8009d2c <__swsetup_r+0x50>
 8009d08:	2309      	movs	r3, #9
 8009d0a:	6033      	str	r3, [r6, #0]
 8009d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d10:	81a3      	strh	r3, [r4, #12]
 8009d12:	f04f 30ff 	mov.w	r0, #4294967295
 8009d16:	e03e      	b.n	8009d96 <__swsetup_r+0xba>
 8009d18:	4b25      	ldr	r3, [pc, #148]	; (8009db0 <__swsetup_r+0xd4>)
 8009d1a:	429c      	cmp	r4, r3
 8009d1c:	d101      	bne.n	8009d22 <__swsetup_r+0x46>
 8009d1e:	68ac      	ldr	r4, [r5, #8]
 8009d20:	e7eb      	b.n	8009cfa <__swsetup_r+0x1e>
 8009d22:	4b24      	ldr	r3, [pc, #144]	; (8009db4 <__swsetup_r+0xd8>)
 8009d24:	429c      	cmp	r4, r3
 8009d26:	bf08      	it	eq
 8009d28:	68ec      	ldreq	r4, [r5, #12]
 8009d2a:	e7e6      	b.n	8009cfa <__swsetup_r+0x1e>
 8009d2c:	0758      	lsls	r0, r3, #29
 8009d2e:	d512      	bpl.n	8009d56 <__swsetup_r+0x7a>
 8009d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d32:	b141      	cbz	r1, 8009d46 <__swsetup_r+0x6a>
 8009d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d38:	4299      	cmp	r1, r3
 8009d3a:	d002      	beq.n	8009d42 <__swsetup_r+0x66>
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f7ff fb6f 	bl	8009420 <_free_r>
 8009d42:	2300      	movs	r3, #0
 8009d44:	6363      	str	r3, [r4, #52]	; 0x34
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	6063      	str	r3, [r4, #4]
 8009d52:	6923      	ldr	r3, [r4, #16]
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	f043 0308 	orr.w	r3, r3, #8
 8009d5c:	81a3      	strh	r3, [r4, #12]
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	b94b      	cbnz	r3, 8009d76 <__swsetup_r+0x9a>
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d6c:	d003      	beq.n	8009d76 <__swsetup_r+0x9a>
 8009d6e:	4621      	mov	r1, r4
 8009d70:	4630      	mov	r0, r6
 8009d72:	f000 fa07 	bl	800a184 <__smakebuf_r>
 8009d76:	89a0      	ldrh	r0, [r4, #12]
 8009d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d7c:	f010 0301 	ands.w	r3, r0, #1
 8009d80:	d00a      	beq.n	8009d98 <__swsetup_r+0xbc>
 8009d82:	2300      	movs	r3, #0
 8009d84:	60a3      	str	r3, [r4, #8]
 8009d86:	6963      	ldr	r3, [r4, #20]
 8009d88:	425b      	negs	r3, r3
 8009d8a:	61a3      	str	r3, [r4, #24]
 8009d8c:	6923      	ldr	r3, [r4, #16]
 8009d8e:	b943      	cbnz	r3, 8009da2 <__swsetup_r+0xc6>
 8009d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d94:	d1ba      	bne.n	8009d0c <__swsetup_r+0x30>
 8009d96:	bd70      	pop	{r4, r5, r6, pc}
 8009d98:	0781      	lsls	r1, r0, #30
 8009d9a:	bf58      	it	pl
 8009d9c:	6963      	ldrpl	r3, [r4, #20]
 8009d9e:	60a3      	str	r3, [r4, #8]
 8009da0:	e7f4      	b.n	8009d8c <__swsetup_r+0xb0>
 8009da2:	2000      	movs	r0, #0
 8009da4:	e7f7      	b.n	8009d96 <__swsetup_r+0xba>
 8009da6:	bf00      	nop
 8009da8:	20000028 	.word	0x20000028
 8009dac:	0800bc0c 	.word	0x0800bc0c
 8009db0:	0800bc2c 	.word	0x0800bc2c
 8009db4:	0800bbec 	.word	0x0800bbec

08009db8 <abort>:
 8009db8:	b508      	push	{r3, lr}
 8009dba:	2006      	movs	r0, #6
 8009dbc:	f000 fa52 	bl	800a264 <raise>
 8009dc0:	2001      	movs	r0, #1
 8009dc2:	f7f9 fbb5 	bl	8003530 <_exit>
	...

08009dc8 <__sflush_r>:
 8009dc8:	898a      	ldrh	r2, [r1, #12]
 8009dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dce:	4605      	mov	r5, r0
 8009dd0:	0710      	lsls	r0, r2, #28
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	d458      	bmi.n	8009e88 <__sflush_r+0xc0>
 8009dd6:	684b      	ldr	r3, [r1, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	dc05      	bgt.n	8009de8 <__sflush_r+0x20>
 8009ddc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	dc02      	bgt.n	8009de8 <__sflush_r+0x20>
 8009de2:	2000      	movs	r0, #0
 8009de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dea:	2e00      	cmp	r6, #0
 8009dec:	d0f9      	beq.n	8009de2 <__sflush_r+0x1a>
 8009dee:	2300      	movs	r3, #0
 8009df0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009df4:	682f      	ldr	r7, [r5, #0]
 8009df6:	602b      	str	r3, [r5, #0]
 8009df8:	d032      	beq.n	8009e60 <__sflush_r+0x98>
 8009dfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	075a      	lsls	r2, r3, #29
 8009e00:	d505      	bpl.n	8009e0e <__sflush_r+0x46>
 8009e02:	6863      	ldr	r3, [r4, #4]
 8009e04:	1ac0      	subs	r0, r0, r3
 8009e06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e08:	b10b      	cbz	r3, 8009e0e <__sflush_r+0x46>
 8009e0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e0c:	1ac0      	subs	r0, r0, r3
 8009e0e:	2300      	movs	r3, #0
 8009e10:	4602      	mov	r2, r0
 8009e12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e14:	6a21      	ldr	r1, [r4, #32]
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b0      	blx	r6
 8009e1a:	1c43      	adds	r3, r0, #1
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	d106      	bne.n	8009e2e <__sflush_r+0x66>
 8009e20:	6829      	ldr	r1, [r5, #0]
 8009e22:	291d      	cmp	r1, #29
 8009e24:	d82c      	bhi.n	8009e80 <__sflush_r+0xb8>
 8009e26:	4a2a      	ldr	r2, [pc, #168]	; (8009ed0 <__sflush_r+0x108>)
 8009e28:	40ca      	lsrs	r2, r1
 8009e2a:	07d6      	lsls	r6, r2, #31
 8009e2c:	d528      	bpl.n	8009e80 <__sflush_r+0xb8>
 8009e2e:	2200      	movs	r2, #0
 8009e30:	6062      	str	r2, [r4, #4]
 8009e32:	04d9      	lsls	r1, r3, #19
 8009e34:	6922      	ldr	r2, [r4, #16]
 8009e36:	6022      	str	r2, [r4, #0]
 8009e38:	d504      	bpl.n	8009e44 <__sflush_r+0x7c>
 8009e3a:	1c42      	adds	r2, r0, #1
 8009e3c:	d101      	bne.n	8009e42 <__sflush_r+0x7a>
 8009e3e:	682b      	ldr	r3, [r5, #0]
 8009e40:	b903      	cbnz	r3, 8009e44 <__sflush_r+0x7c>
 8009e42:	6560      	str	r0, [r4, #84]	; 0x54
 8009e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e46:	602f      	str	r7, [r5, #0]
 8009e48:	2900      	cmp	r1, #0
 8009e4a:	d0ca      	beq.n	8009de2 <__sflush_r+0x1a>
 8009e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e50:	4299      	cmp	r1, r3
 8009e52:	d002      	beq.n	8009e5a <__sflush_r+0x92>
 8009e54:	4628      	mov	r0, r5
 8009e56:	f7ff fae3 	bl	8009420 <_free_r>
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e5e:	e7c1      	b.n	8009de4 <__sflush_r+0x1c>
 8009e60:	6a21      	ldr	r1, [r4, #32]
 8009e62:	2301      	movs	r3, #1
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b0      	blx	r6
 8009e68:	1c41      	adds	r1, r0, #1
 8009e6a:	d1c7      	bne.n	8009dfc <__sflush_r+0x34>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0c4      	beq.n	8009dfc <__sflush_r+0x34>
 8009e72:	2b1d      	cmp	r3, #29
 8009e74:	d001      	beq.n	8009e7a <__sflush_r+0xb2>
 8009e76:	2b16      	cmp	r3, #22
 8009e78:	d101      	bne.n	8009e7e <__sflush_r+0xb6>
 8009e7a:	602f      	str	r7, [r5, #0]
 8009e7c:	e7b1      	b.n	8009de2 <__sflush_r+0x1a>
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e84:	81a3      	strh	r3, [r4, #12]
 8009e86:	e7ad      	b.n	8009de4 <__sflush_r+0x1c>
 8009e88:	690f      	ldr	r7, [r1, #16]
 8009e8a:	2f00      	cmp	r7, #0
 8009e8c:	d0a9      	beq.n	8009de2 <__sflush_r+0x1a>
 8009e8e:	0793      	lsls	r3, r2, #30
 8009e90:	680e      	ldr	r6, [r1, #0]
 8009e92:	bf08      	it	eq
 8009e94:	694b      	ldreq	r3, [r1, #20]
 8009e96:	600f      	str	r7, [r1, #0]
 8009e98:	bf18      	it	ne
 8009e9a:	2300      	movne	r3, #0
 8009e9c:	eba6 0807 	sub.w	r8, r6, r7
 8009ea0:	608b      	str	r3, [r1, #8]
 8009ea2:	f1b8 0f00 	cmp.w	r8, #0
 8009ea6:	dd9c      	ble.n	8009de2 <__sflush_r+0x1a>
 8009ea8:	6a21      	ldr	r1, [r4, #32]
 8009eaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009eac:	4643      	mov	r3, r8
 8009eae:	463a      	mov	r2, r7
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b0      	blx	r6
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	dc06      	bgt.n	8009ec6 <__sflush_r+0xfe>
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ebe:	81a3      	strh	r3, [r4, #12]
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec4:	e78e      	b.n	8009de4 <__sflush_r+0x1c>
 8009ec6:	4407      	add	r7, r0
 8009ec8:	eba8 0800 	sub.w	r8, r8, r0
 8009ecc:	e7e9      	b.n	8009ea2 <__sflush_r+0xda>
 8009ece:	bf00      	nop
 8009ed0:	20400001 	.word	0x20400001

08009ed4 <_fflush_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	690b      	ldr	r3, [r1, #16]
 8009ed8:	4605      	mov	r5, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	b913      	cbnz	r3, 8009ee4 <_fflush_r+0x10>
 8009ede:	2500      	movs	r5, #0
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	b118      	cbz	r0, 8009eee <_fflush_r+0x1a>
 8009ee6:	6983      	ldr	r3, [r0, #24]
 8009ee8:	b90b      	cbnz	r3, 8009eee <_fflush_r+0x1a>
 8009eea:	f000 f887 	bl	8009ffc <__sinit>
 8009eee:	4b14      	ldr	r3, [pc, #80]	; (8009f40 <_fflush_r+0x6c>)
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	d11b      	bne.n	8009f2c <_fflush_r+0x58>
 8009ef4:	686c      	ldr	r4, [r5, #4]
 8009ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0ef      	beq.n	8009ede <_fflush_r+0xa>
 8009efe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f00:	07d0      	lsls	r0, r2, #31
 8009f02:	d404      	bmi.n	8009f0e <_fflush_r+0x3a>
 8009f04:	0599      	lsls	r1, r3, #22
 8009f06:	d402      	bmi.n	8009f0e <_fflush_r+0x3a>
 8009f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f0a:	f000 f915 	bl	800a138 <__retarget_lock_acquire_recursive>
 8009f0e:	4628      	mov	r0, r5
 8009f10:	4621      	mov	r1, r4
 8009f12:	f7ff ff59 	bl	8009dc8 <__sflush_r>
 8009f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f18:	07da      	lsls	r2, r3, #31
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	d4e0      	bmi.n	8009ee0 <_fflush_r+0xc>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	059b      	lsls	r3, r3, #22
 8009f22:	d4dd      	bmi.n	8009ee0 <_fflush_r+0xc>
 8009f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f26:	f000 f908 	bl	800a13a <__retarget_lock_release_recursive>
 8009f2a:	e7d9      	b.n	8009ee0 <_fflush_r+0xc>
 8009f2c:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <_fflush_r+0x70>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	d101      	bne.n	8009f36 <_fflush_r+0x62>
 8009f32:	68ac      	ldr	r4, [r5, #8]
 8009f34:	e7df      	b.n	8009ef6 <_fflush_r+0x22>
 8009f36:	4b04      	ldr	r3, [pc, #16]	; (8009f48 <_fflush_r+0x74>)
 8009f38:	429c      	cmp	r4, r3
 8009f3a:	bf08      	it	eq
 8009f3c:	68ec      	ldreq	r4, [r5, #12]
 8009f3e:	e7da      	b.n	8009ef6 <_fflush_r+0x22>
 8009f40:	0800bc0c 	.word	0x0800bc0c
 8009f44:	0800bc2c 	.word	0x0800bc2c
 8009f48:	0800bbec 	.word	0x0800bbec

08009f4c <std>:
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	b510      	push	{r4, lr}
 8009f50:	4604      	mov	r4, r0
 8009f52:	e9c0 3300 	strd	r3, r3, [r0]
 8009f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f5a:	6083      	str	r3, [r0, #8]
 8009f5c:	8181      	strh	r1, [r0, #12]
 8009f5e:	6643      	str	r3, [r0, #100]	; 0x64
 8009f60:	81c2      	strh	r2, [r0, #14]
 8009f62:	6183      	str	r3, [r0, #24]
 8009f64:	4619      	mov	r1, r3
 8009f66:	2208      	movs	r2, #8
 8009f68:	305c      	adds	r0, #92	; 0x5c
 8009f6a:	f7fd fba7 	bl	80076bc <memset>
 8009f6e:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <std+0x38>)
 8009f70:	6263      	str	r3, [r4, #36]	; 0x24
 8009f72:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <std+0x3c>)
 8009f74:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f76:	4b05      	ldr	r3, [pc, #20]	; (8009f8c <std+0x40>)
 8009f78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f7a:	4b05      	ldr	r3, [pc, #20]	; (8009f90 <std+0x44>)
 8009f7c:	6224      	str	r4, [r4, #32]
 8009f7e:	6323      	str	r3, [r4, #48]	; 0x30
 8009f80:	bd10      	pop	{r4, pc}
 8009f82:	bf00      	nop
 8009f84:	0800a29d 	.word	0x0800a29d
 8009f88:	0800a2bf 	.word	0x0800a2bf
 8009f8c:	0800a2f7 	.word	0x0800a2f7
 8009f90:	0800a31b 	.word	0x0800a31b

08009f94 <_cleanup_r>:
 8009f94:	4901      	ldr	r1, [pc, #4]	; (8009f9c <_cleanup_r+0x8>)
 8009f96:	f000 b8af 	b.w	800a0f8 <_fwalk_reent>
 8009f9a:	bf00      	nop
 8009f9c:	08009ed5 	.word	0x08009ed5

08009fa0 <__sfmoreglue>:
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	1e4a      	subs	r2, r1, #1
 8009fa4:	2568      	movs	r5, #104	; 0x68
 8009fa6:	4355      	muls	r5, r2
 8009fa8:	460e      	mov	r6, r1
 8009faa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fae:	f7ff fa87 	bl	80094c0 <_malloc_r>
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	b140      	cbz	r0, 8009fc8 <__sfmoreglue+0x28>
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	e9c0 1600 	strd	r1, r6, [r0]
 8009fbc:	300c      	adds	r0, #12
 8009fbe:	60a0      	str	r0, [r4, #8]
 8009fc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fc4:	f7fd fb7a 	bl	80076bc <memset>
 8009fc8:	4620      	mov	r0, r4
 8009fca:	bd70      	pop	{r4, r5, r6, pc}

08009fcc <__sfp_lock_acquire>:
 8009fcc:	4801      	ldr	r0, [pc, #4]	; (8009fd4 <__sfp_lock_acquire+0x8>)
 8009fce:	f000 b8b3 	b.w	800a138 <__retarget_lock_acquire_recursive>
 8009fd2:	bf00      	nop
 8009fd4:	2000086c 	.word	0x2000086c

08009fd8 <__sfp_lock_release>:
 8009fd8:	4801      	ldr	r0, [pc, #4]	; (8009fe0 <__sfp_lock_release+0x8>)
 8009fda:	f000 b8ae 	b.w	800a13a <__retarget_lock_release_recursive>
 8009fde:	bf00      	nop
 8009fe0:	2000086c 	.word	0x2000086c

08009fe4 <__sinit_lock_acquire>:
 8009fe4:	4801      	ldr	r0, [pc, #4]	; (8009fec <__sinit_lock_acquire+0x8>)
 8009fe6:	f000 b8a7 	b.w	800a138 <__retarget_lock_acquire_recursive>
 8009fea:	bf00      	nop
 8009fec:	20000867 	.word	0x20000867

08009ff0 <__sinit_lock_release>:
 8009ff0:	4801      	ldr	r0, [pc, #4]	; (8009ff8 <__sinit_lock_release+0x8>)
 8009ff2:	f000 b8a2 	b.w	800a13a <__retarget_lock_release_recursive>
 8009ff6:	bf00      	nop
 8009ff8:	20000867 	.word	0x20000867

08009ffc <__sinit>:
 8009ffc:	b510      	push	{r4, lr}
 8009ffe:	4604      	mov	r4, r0
 800a000:	f7ff fff0 	bl	8009fe4 <__sinit_lock_acquire>
 800a004:	69a3      	ldr	r3, [r4, #24]
 800a006:	b11b      	cbz	r3, 800a010 <__sinit+0x14>
 800a008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a00c:	f7ff bff0 	b.w	8009ff0 <__sinit_lock_release>
 800a010:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a014:	6523      	str	r3, [r4, #80]	; 0x50
 800a016:	4b13      	ldr	r3, [pc, #76]	; (800a064 <__sinit+0x68>)
 800a018:	4a13      	ldr	r2, [pc, #76]	; (800a068 <__sinit+0x6c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a01e:	42a3      	cmp	r3, r4
 800a020:	bf04      	itt	eq
 800a022:	2301      	moveq	r3, #1
 800a024:	61a3      	streq	r3, [r4, #24]
 800a026:	4620      	mov	r0, r4
 800a028:	f000 f820 	bl	800a06c <__sfp>
 800a02c:	6060      	str	r0, [r4, #4]
 800a02e:	4620      	mov	r0, r4
 800a030:	f000 f81c 	bl	800a06c <__sfp>
 800a034:	60a0      	str	r0, [r4, #8]
 800a036:	4620      	mov	r0, r4
 800a038:	f000 f818 	bl	800a06c <__sfp>
 800a03c:	2200      	movs	r2, #0
 800a03e:	60e0      	str	r0, [r4, #12]
 800a040:	2104      	movs	r1, #4
 800a042:	6860      	ldr	r0, [r4, #4]
 800a044:	f7ff ff82 	bl	8009f4c <std>
 800a048:	68a0      	ldr	r0, [r4, #8]
 800a04a:	2201      	movs	r2, #1
 800a04c:	2109      	movs	r1, #9
 800a04e:	f7ff ff7d 	bl	8009f4c <std>
 800a052:	68e0      	ldr	r0, [r4, #12]
 800a054:	2202      	movs	r2, #2
 800a056:	2112      	movs	r1, #18
 800a058:	f7ff ff78 	bl	8009f4c <std>
 800a05c:	2301      	movs	r3, #1
 800a05e:	61a3      	str	r3, [r4, #24]
 800a060:	e7d2      	b.n	800a008 <__sinit+0xc>
 800a062:	bf00      	nop
 800a064:	0800b868 	.word	0x0800b868
 800a068:	08009f95 	.word	0x08009f95

0800a06c <__sfp>:
 800a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06e:	4607      	mov	r7, r0
 800a070:	f7ff ffac 	bl	8009fcc <__sfp_lock_acquire>
 800a074:	4b1e      	ldr	r3, [pc, #120]	; (800a0f0 <__sfp+0x84>)
 800a076:	681e      	ldr	r6, [r3, #0]
 800a078:	69b3      	ldr	r3, [r6, #24]
 800a07a:	b913      	cbnz	r3, 800a082 <__sfp+0x16>
 800a07c:	4630      	mov	r0, r6
 800a07e:	f7ff ffbd 	bl	8009ffc <__sinit>
 800a082:	3648      	adds	r6, #72	; 0x48
 800a084:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a088:	3b01      	subs	r3, #1
 800a08a:	d503      	bpl.n	800a094 <__sfp+0x28>
 800a08c:	6833      	ldr	r3, [r6, #0]
 800a08e:	b30b      	cbz	r3, 800a0d4 <__sfp+0x68>
 800a090:	6836      	ldr	r6, [r6, #0]
 800a092:	e7f7      	b.n	800a084 <__sfp+0x18>
 800a094:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a098:	b9d5      	cbnz	r5, 800a0d0 <__sfp+0x64>
 800a09a:	4b16      	ldr	r3, [pc, #88]	; (800a0f4 <__sfp+0x88>)
 800a09c:	60e3      	str	r3, [r4, #12]
 800a09e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0a2:	6665      	str	r5, [r4, #100]	; 0x64
 800a0a4:	f000 f847 	bl	800a136 <__retarget_lock_init_recursive>
 800a0a8:	f7ff ff96 	bl	8009fd8 <__sfp_lock_release>
 800a0ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0b4:	6025      	str	r5, [r4, #0]
 800a0b6:	61a5      	str	r5, [r4, #24]
 800a0b8:	2208      	movs	r2, #8
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0c0:	f7fd fafc 	bl	80076bc <memset>
 800a0c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d0:	3468      	adds	r4, #104	; 0x68
 800a0d2:	e7d9      	b.n	800a088 <__sfp+0x1c>
 800a0d4:	2104      	movs	r1, #4
 800a0d6:	4638      	mov	r0, r7
 800a0d8:	f7ff ff62 	bl	8009fa0 <__sfmoreglue>
 800a0dc:	4604      	mov	r4, r0
 800a0de:	6030      	str	r0, [r6, #0]
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d1d5      	bne.n	800a090 <__sfp+0x24>
 800a0e4:	f7ff ff78 	bl	8009fd8 <__sfp_lock_release>
 800a0e8:	230c      	movs	r3, #12
 800a0ea:	603b      	str	r3, [r7, #0]
 800a0ec:	e7ee      	b.n	800a0cc <__sfp+0x60>
 800a0ee:	bf00      	nop
 800a0f0:	0800b868 	.word	0x0800b868
 800a0f4:	ffff0001 	.word	0xffff0001

0800a0f8 <_fwalk_reent>:
 800a0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	4688      	mov	r8, r1
 800a100:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a104:	2700      	movs	r7, #0
 800a106:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a10a:	f1b9 0901 	subs.w	r9, r9, #1
 800a10e:	d505      	bpl.n	800a11c <_fwalk_reent+0x24>
 800a110:	6824      	ldr	r4, [r4, #0]
 800a112:	2c00      	cmp	r4, #0
 800a114:	d1f7      	bne.n	800a106 <_fwalk_reent+0xe>
 800a116:	4638      	mov	r0, r7
 800a118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a11c:	89ab      	ldrh	r3, [r5, #12]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d907      	bls.n	800a132 <_fwalk_reent+0x3a>
 800a122:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a126:	3301      	adds	r3, #1
 800a128:	d003      	beq.n	800a132 <_fwalk_reent+0x3a>
 800a12a:	4629      	mov	r1, r5
 800a12c:	4630      	mov	r0, r6
 800a12e:	47c0      	blx	r8
 800a130:	4307      	orrs	r7, r0
 800a132:	3568      	adds	r5, #104	; 0x68
 800a134:	e7e9      	b.n	800a10a <_fwalk_reent+0x12>

0800a136 <__retarget_lock_init_recursive>:
 800a136:	4770      	bx	lr

0800a138 <__retarget_lock_acquire_recursive>:
 800a138:	4770      	bx	lr

0800a13a <__retarget_lock_release_recursive>:
 800a13a:	4770      	bx	lr

0800a13c <__swhatbuf_r>:
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	460e      	mov	r6, r1
 800a140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a144:	2900      	cmp	r1, #0
 800a146:	b096      	sub	sp, #88	; 0x58
 800a148:	4614      	mov	r4, r2
 800a14a:	461d      	mov	r5, r3
 800a14c:	da07      	bge.n	800a15e <__swhatbuf_r+0x22>
 800a14e:	2300      	movs	r3, #0
 800a150:	602b      	str	r3, [r5, #0]
 800a152:	89b3      	ldrh	r3, [r6, #12]
 800a154:	061a      	lsls	r2, r3, #24
 800a156:	d410      	bmi.n	800a17a <__swhatbuf_r+0x3e>
 800a158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a15c:	e00e      	b.n	800a17c <__swhatbuf_r+0x40>
 800a15e:	466a      	mov	r2, sp
 800a160:	f000 f902 	bl	800a368 <_fstat_r>
 800a164:	2800      	cmp	r0, #0
 800a166:	dbf2      	blt.n	800a14e <__swhatbuf_r+0x12>
 800a168:	9a01      	ldr	r2, [sp, #4]
 800a16a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a16e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a172:	425a      	negs	r2, r3
 800a174:	415a      	adcs	r2, r3
 800a176:	602a      	str	r2, [r5, #0]
 800a178:	e7ee      	b.n	800a158 <__swhatbuf_r+0x1c>
 800a17a:	2340      	movs	r3, #64	; 0x40
 800a17c:	2000      	movs	r0, #0
 800a17e:	6023      	str	r3, [r4, #0]
 800a180:	b016      	add	sp, #88	; 0x58
 800a182:	bd70      	pop	{r4, r5, r6, pc}

0800a184 <__smakebuf_r>:
 800a184:	898b      	ldrh	r3, [r1, #12]
 800a186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a188:	079d      	lsls	r5, r3, #30
 800a18a:	4606      	mov	r6, r0
 800a18c:	460c      	mov	r4, r1
 800a18e:	d507      	bpl.n	800a1a0 <__smakebuf_r+0x1c>
 800a190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	2301      	movs	r3, #1
 800a19a:	6163      	str	r3, [r4, #20]
 800a19c:	b002      	add	sp, #8
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	ab01      	add	r3, sp, #4
 800a1a2:	466a      	mov	r2, sp
 800a1a4:	f7ff ffca 	bl	800a13c <__swhatbuf_r>
 800a1a8:	9900      	ldr	r1, [sp, #0]
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff f987 	bl	80094c0 <_malloc_r>
 800a1b2:	b948      	cbnz	r0, 800a1c8 <__smakebuf_r+0x44>
 800a1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1b8:	059a      	lsls	r2, r3, #22
 800a1ba:	d4ef      	bmi.n	800a19c <__smakebuf_r+0x18>
 800a1bc:	f023 0303 	bic.w	r3, r3, #3
 800a1c0:	f043 0302 	orr.w	r3, r3, #2
 800a1c4:	81a3      	strh	r3, [r4, #12]
 800a1c6:	e7e3      	b.n	800a190 <__smakebuf_r+0xc>
 800a1c8:	4b0d      	ldr	r3, [pc, #52]	; (800a200 <__smakebuf_r+0x7c>)
 800a1ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	6020      	str	r0, [r4, #0]
 800a1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	9b00      	ldr	r3, [sp, #0]
 800a1d8:	6163      	str	r3, [r4, #20]
 800a1da:	9b01      	ldr	r3, [sp, #4]
 800a1dc:	6120      	str	r0, [r4, #16]
 800a1de:	b15b      	cbz	r3, 800a1f8 <__smakebuf_r+0x74>
 800a1e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f000 f8d1 	bl	800a38c <_isatty_r>
 800a1ea:	b128      	cbz	r0, 800a1f8 <__smakebuf_r+0x74>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	f023 0303 	bic.w	r3, r3, #3
 800a1f2:	f043 0301 	orr.w	r3, r3, #1
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	89a0      	ldrh	r0, [r4, #12]
 800a1fa:	4305      	orrs	r5, r0
 800a1fc:	81a5      	strh	r5, [r4, #12]
 800a1fe:	e7cd      	b.n	800a19c <__smakebuf_r+0x18>
 800a200:	08009f95 	.word	0x08009f95

0800a204 <_malloc_usable_size_r>:
 800a204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a208:	1f18      	subs	r0, r3, #4
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	bfbc      	itt	lt
 800a20e:	580b      	ldrlt	r3, [r1, r0]
 800a210:	18c0      	addlt	r0, r0, r3
 800a212:	4770      	bx	lr

0800a214 <_raise_r>:
 800a214:	291f      	cmp	r1, #31
 800a216:	b538      	push	{r3, r4, r5, lr}
 800a218:	4604      	mov	r4, r0
 800a21a:	460d      	mov	r5, r1
 800a21c:	d904      	bls.n	800a228 <_raise_r+0x14>
 800a21e:	2316      	movs	r3, #22
 800a220:	6003      	str	r3, [r0, #0]
 800a222:	f04f 30ff 	mov.w	r0, #4294967295
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a22a:	b112      	cbz	r2, 800a232 <_raise_r+0x1e>
 800a22c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a230:	b94b      	cbnz	r3, 800a246 <_raise_r+0x32>
 800a232:	4620      	mov	r0, r4
 800a234:	f000 f830 	bl	800a298 <_getpid_r>
 800a238:	462a      	mov	r2, r5
 800a23a:	4601      	mov	r1, r0
 800a23c:	4620      	mov	r0, r4
 800a23e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a242:	f000 b817 	b.w	800a274 <_kill_r>
 800a246:	2b01      	cmp	r3, #1
 800a248:	d00a      	beq.n	800a260 <_raise_r+0x4c>
 800a24a:	1c59      	adds	r1, r3, #1
 800a24c:	d103      	bne.n	800a256 <_raise_r+0x42>
 800a24e:	2316      	movs	r3, #22
 800a250:	6003      	str	r3, [r0, #0]
 800a252:	2001      	movs	r0, #1
 800a254:	e7e7      	b.n	800a226 <_raise_r+0x12>
 800a256:	2400      	movs	r4, #0
 800a258:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a25c:	4628      	mov	r0, r5
 800a25e:	4798      	blx	r3
 800a260:	2000      	movs	r0, #0
 800a262:	e7e0      	b.n	800a226 <_raise_r+0x12>

0800a264 <raise>:
 800a264:	4b02      	ldr	r3, [pc, #8]	; (800a270 <raise+0xc>)
 800a266:	4601      	mov	r1, r0
 800a268:	6818      	ldr	r0, [r3, #0]
 800a26a:	f7ff bfd3 	b.w	800a214 <_raise_r>
 800a26e:	bf00      	nop
 800a270:	20000028 	.word	0x20000028

0800a274 <_kill_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4d07      	ldr	r5, [pc, #28]	; (800a294 <_kill_r+0x20>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4604      	mov	r4, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	f7f9 f945 	bl	8003510 <_kill>
 800a286:	1c43      	adds	r3, r0, #1
 800a288:	d102      	bne.n	800a290 <_kill_r+0x1c>
 800a28a:	682b      	ldr	r3, [r5, #0]
 800a28c:	b103      	cbz	r3, 800a290 <_kill_r+0x1c>
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	bd38      	pop	{r3, r4, r5, pc}
 800a292:	bf00      	nop
 800a294:	20000860 	.word	0x20000860

0800a298 <_getpid_r>:
 800a298:	f7f9 b932 	b.w	8003500 <_getpid>

0800a29c <__sread>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	460c      	mov	r4, r1
 800a2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a4:	f000 f894 	bl	800a3d0 <_read_r>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	bfab      	itete	ge
 800a2ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a2b0:	181b      	addge	r3, r3, r0
 800a2b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2b6:	bfac      	ite	ge
 800a2b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2ba:	81a3      	strhlt	r3, [r4, #12]
 800a2bc:	bd10      	pop	{r4, pc}

0800a2be <__swrite>:
 800a2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c2:	461f      	mov	r7, r3
 800a2c4:	898b      	ldrh	r3, [r1, #12]
 800a2c6:	05db      	lsls	r3, r3, #23
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	4616      	mov	r6, r2
 800a2ce:	d505      	bpl.n	800a2dc <__swrite+0x1e>
 800a2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f000 f868 	bl	800a3ac <_lseek_r>
 800a2dc:	89a3      	ldrh	r3, [r4, #12]
 800a2de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2e6:	81a3      	strh	r3, [r4, #12]
 800a2e8:	4632      	mov	r2, r6
 800a2ea:	463b      	mov	r3, r7
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f2:	f000 b817 	b.w	800a324 <_write_r>

0800a2f6 <__sseek>:
 800a2f6:	b510      	push	{r4, lr}
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fe:	f000 f855 	bl	800a3ac <_lseek_r>
 800a302:	1c43      	adds	r3, r0, #1
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	bf15      	itete	ne
 800a308:	6560      	strne	r0, [r4, #84]	; 0x54
 800a30a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a30e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a312:	81a3      	strheq	r3, [r4, #12]
 800a314:	bf18      	it	ne
 800a316:	81a3      	strhne	r3, [r4, #12]
 800a318:	bd10      	pop	{r4, pc}

0800a31a <__sclose>:
 800a31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31e:	f000 b813 	b.w	800a348 <_close_r>
	...

0800a324 <_write_r>:
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	4d07      	ldr	r5, [pc, #28]	; (800a344 <_write_r+0x20>)
 800a328:	4604      	mov	r4, r0
 800a32a:	4608      	mov	r0, r1
 800a32c:	4611      	mov	r1, r2
 800a32e:	2200      	movs	r2, #0
 800a330:	602a      	str	r2, [r5, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	f7f9 f923 	bl	800357e <_write>
 800a338:	1c43      	adds	r3, r0, #1
 800a33a:	d102      	bne.n	800a342 <_write_r+0x1e>
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	b103      	cbz	r3, 800a342 <_write_r+0x1e>
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	bd38      	pop	{r3, r4, r5, pc}
 800a344:	20000860 	.word	0x20000860

0800a348 <_close_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	4d06      	ldr	r5, [pc, #24]	; (800a364 <_close_r+0x1c>)
 800a34c:	2300      	movs	r3, #0
 800a34e:	4604      	mov	r4, r0
 800a350:	4608      	mov	r0, r1
 800a352:	602b      	str	r3, [r5, #0]
 800a354:	f7f9 f92f 	bl	80035b6 <_close>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d102      	bne.n	800a362 <_close_r+0x1a>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	b103      	cbz	r3, 800a362 <_close_r+0x1a>
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	bd38      	pop	{r3, r4, r5, pc}
 800a364:	20000860 	.word	0x20000860

0800a368 <_fstat_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d07      	ldr	r5, [pc, #28]	; (800a388 <_fstat_r+0x20>)
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	4611      	mov	r1, r2
 800a374:	602b      	str	r3, [r5, #0]
 800a376:	f7f9 f92a 	bl	80035ce <_fstat>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	d102      	bne.n	800a384 <_fstat_r+0x1c>
 800a37e:	682b      	ldr	r3, [r5, #0]
 800a380:	b103      	cbz	r3, 800a384 <_fstat_r+0x1c>
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	bd38      	pop	{r3, r4, r5, pc}
 800a386:	bf00      	nop
 800a388:	20000860 	.word	0x20000860

0800a38c <_isatty_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	4d06      	ldr	r5, [pc, #24]	; (800a3a8 <_isatty_r+0x1c>)
 800a390:	2300      	movs	r3, #0
 800a392:	4604      	mov	r4, r0
 800a394:	4608      	mov	r0, r1
 800a396:	602b      	str	r3, [r5, #0]
 800a398:	f7f9 f929 	bl	80035ee <_isatty>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d102      	bne.n	800a3a6 <_isatty_r+0x1a>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	b103      	cbz	r3, 800a3a6 <_isatty_r+0x1a>
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	20000860 	.word	0x20000860

0800a3ac <_lseek_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d07      	ldr	r5, [pc, #28]	; (800a3cc <_lseek_r+0x20>)
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	4608      	mov	r0, r1
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	602a      	str	r2, [r5, #0]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	f7f9 f922 	bl	8003604 <_lseek>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_lseek_r+0x1e>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_lseek_r+0x1e>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	20000860 	.word	0x20000860

0800a3d0 <_read_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d07      	ldr	r5, [pc, #28]	; (800a3f0 <_read_r+0x20>)
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	4611      	mov	r1, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	602a      	str	r2, [r5, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f7f9 f8b0 	bl	8003544 <_read>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d102      	bne.n	800a3ee <_read_r+0x1e>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <_read_r+0x1e>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	20000860 	.word	0x20000860
 800a3f4:	00000000 	.word	0x00000000

0800a3f8 <sin>:
 800a3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3fa:	ec53 2b10 	vmov	r2, r3, d0
 800a3fe:	4826      	ldr	r0, [pc, #152]	; (800a498 <sin+0xa0>)
 800a400:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a404:	4281      	cmp	r1, r0
 800a406:	dc07      	bgt.n	800a418 <sin+0x20>
 800a408:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a490 <sin+0x98>
 800a40c:	2000      	movs	r0, #0
 800a40e:	f000 fe5b 	bl	800b0c8 <__kernel_sin>
 800a412:	ec51 0b10 	vmov	r0, r1, d0
 800a416:	e007      	b.n	800a428 <sin+0x30>
 800a418:	4820      	ldr	r0, [pc, #128]	; (800a49c <sin+0xa4>)
 800a41a:	4281      	cmp	r1, r0
 800a41c:	dd09      	ble.n	800a432 <sin+0x3a>
 800a41e:	ee10 0a10 	vmov	r0, s0
 800a422:	4619      	mov	r1, r3
 800a424:	f7f5 ff38 	bl	8000298 <__aeabi_dsub>
 800a428:	ec41 0b10 	vmov	d0, r0, r1
 800a42c:	b005      	add	sp, #20
 800a42e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a432:	4668      	mov	r0, sp
 800a434:	f000 f834 	bl	800a4a0 <__ieee754_rem_pio2>
 800a438:	f000 0003 	and.w	r0, r0, #3
 800a43c:	2801      	cmp	r0, #1
 800a43e:	d008      	beq.n	800a452 <sin+0x5a>
 800a440:	2802      	cmp	r0, #2
 800a442:	d00d      	beq.n	800a460 <sin+0x68>
 800a444:	b9d0      	cbnz	r0, 800a47c <sin+0x84>
 800a446:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a44a:	ed9d 0b00 	vldr	d0, [sp]
 800a44e:	2001      	movs	r0, #1
 800a450:	e7dd      	b.n	800a40e <sin+0x16>
 800a452:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a456:	ed9d 0b00 	vldr	d0, [sp]
 800a45a:	f000 fa2d 	bl	800a8b8 <__kernel_cos>
 800a45e:	e7d8      	b.n	800a412 <sin+0x1a>
 800a460:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a464:	ed9d 0b00 	vldr	d0, [sp]
 800a468:	2001      	movs	r0, #1
 800a46a:	f000 fe2d 	bl	800b0c8 <__kernel_sin>
 800a46e:	ec53 2b10 	vmov	r2, r3, d0
 800a472:	ee10 0a10 	vmov	r0, s0
 800a476:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a47a:	e7d5      	b.n	800a428 <sin+0x30>
 800a47c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a480:	ed9d 0b00 	vldr	d0, [sp]
 800a484:	f000 fa18 	bl	800a8b8 <__kernel_cos>
 800a488:	e7f1      	b.n	800a46e <sin+0x76>
 800a48a:	bf00      	nop
 800a48c:	f3af 8000 	nop.w
	...
 800a498:	3fe921fb 	.word	0x3fe921fb
 800a49c:	7fefffff 	.word	0x7fefffff

0800a4a0 <__ieee754_rem_pio2>:
 800a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	ed2d 8b02 	vpush	{d8}
 800a4a8:	ec55 4b10 	vmov	r4, r5, d0
 800a4ac:	4bca      	ldr	r3, [pc, #808]	; (800a7d8 <__ieee754_rem_pio2+0x338>)
 800a4ae:	b08b      	sub	sp, #44	; 0x2c
 800a4b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a4b4:	4598      	cmp	r8, r3
 800a4b6:	4682      	mov	sl, r0
 800a4b8:	9502      	str	r5, [sp, #8]
 800a4ba:	dc08      	bgt.n	800a4ce <__ieee754_rem_pio2+0x2e>
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2300      	movs	r3, #0
 800a4c0:	ed80 0b00 	vstr	d0, [r0]
 800a4c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a4c8:	f04f 0b00 	mov.w	fp, #0
 800a4cc:	e028      	b.n	800a520 <__ieee754_rem_pio2+0x80>
 800a4ce:	4bc3      	ldr	r3, [pc, #780]	; (800a7dc <__ieee754_rem_pio2+0x33c>)
 800a4d0:	4598      	cmp	r8, r3
 800a4d2:	dc78      	bgt.n	800a5c6 <__ieee754_rem_pio2+0x126>
 800a4d4:	9b02      	ldr	r3, [sp, #8]
 800a4d6:	4ec2      	ldr	r6, [pc, #776]	; (800a7e0 <__ieee754_rem_pio2+0x340>)
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	ee10 0a10 	vmov	r0, s0
 800a4de:	a3b0      	add	r3, pc, #704	; (adr r3, 800a7a0 <__ieee754_rem_pio2+0x300>)
 800a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	dd39      	ble.n	800a55c <__ieee754_rem_pio2+0xbc>
 800a4e8:	f7f5 fed6 	bl	8000298 <__aeabi_dsub>
 800a4ec:	45b0      	cmp	r8, r6
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	460d      	mov	r5, r1
 800a4f2:	d01b      	beq.n	800a52c <__ieee754_rem_pio2+0x8c>
 800a4f4:	a3ac      	add	r3, pc, #688	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x308>)
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	f7f5 fecd 	bl	8000298 <__aeabi_dsub>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	e9ca 2300 	strd	r2, r3, [sl]
 800a506:	4620      	mov	r0, r4
 800a508:	4629      	mov	r1, r5
 800a50a:	f7f5 fec5 	bl	8000298 <__aeabi_dsub>
 800a50e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x308>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	f7f5 fec0 	bl	8000298 <__aeabi_dsub>
 800a518:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a51c:	f04f 0b01 	mov.w	fp, #1
 800a520:	4658      	mov	r0, fp
 800a522:	b00b      	add	sp, #44	; 0x2c
 800a524:	ecbd 8b02 	vpop	{d8}
 800a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a7b0 <__ieee754_rem_pio2+0x310>)
 800a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a532:	f7f5 feb1 	bl	8000298 <__aeabi_dsub>
 800a536:	a3a0      	add	r3, pc, #640	; (adr r3, 800a7b8 <__ieee754_rem_pio2+0x318>)
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	4604      	mov	r4, r0
 800a53e:	460d      	mov	r5, r1
 800a540:	f7f5 feaa 	bl	8000298 <__aeabi_dsub>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	e9ca 2300 	strd	r2, r3, [sl]
 800a54c:	4620      	mov	r0, r4
 800a54e:	4629      	mov	r1, r5
 800a550:	f7f5 fea2 	bl	8000298 <__aeabi_dsub>
 800a554:	a398      	add	r3, pc, #608	; (adr r3, 800a7b8 <__ieee754_rem_pio2+0x318>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	e7db      	b.n	800a514 <__ieee754_rem_pio2+0x74>
 800a55c:	f7f5 fe9e 	bl	800029c <__adddf3>
 800a560:	45b0      	cmp	r8, r6
 800a562:	4604      	mov	r4, r0
 800a564:	460d      	mov	r5, r1
 800a566:	d016      	beq.n	800a596 <__ieee754_rem_pio2+0xf6>
 800a568:	a38f      	add	r3, pc, #572	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x308>)
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	f7f5 fe95 	bl	800029c <__adddf3>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	e9ca 2300 	strd	r2, r3, [sl]
 800a57a:	4620      	mov	r0, r4
 800a57c:	4629      	mov	r1, r5
 800a57e:	f7f5 fe8b 	bl	8000298 <__aeabi_dsub>
 800a582:	a389      	add	r3, pc, #548	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x308>)
 800a584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a588:	f7f5 fe88 	bl	800029c <__adddf3>
 800a58c:	f04f 3bff 	mov.w	fp, #4294967295
 800a590:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a594:	e7c4      	b.n	800a520 <__ieee754_rem_pio2+0x80>
 800a596:	a386      	add	r3, pc, #536	; (adr r3, 800a7b0 <__ieee754_rem_pio2+0x310>)
 800a598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59c:	f7f5 fe7e 	bl	800029c <__adddf3>
 800a5a0:	a385      	add	r3, pc, #532	; (adr r3, 800a7b8 <__ieee754_rem_pio2+0x318>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	460d      	mov	r5, r1
 800a5aa:	f7f5 fe77 	bl	800029c <__adddf3>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	e9ca 2300 	strd	r2, r3, [sl]
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	f7f5 fe6d 	bl	8000298 <__aeabi_dsub>
 800a5be:	a37e      	add	r3, pc, #504	; (adr r3, 800a7b8 <__ieee754_rem_pio2+0x318>)
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	e7e0      	b.n	800a588 <__ieee754_rem_pio2+0xe8>
 800a5c6:	4b87      	ldr	r3, [pc, #540]	; (800a7e4 <__ieee754_rem_pio2+0x344>)
 800a5c8:	4598      	cmp	r8, r3
 800a5ca:	f300 80d9 	bgt.w	800a780 <__ieee754_rem_pio2+0x2e0>
 800a5ce:	f000 fe39 	bl	800b244 <fabs>
 800a5d2:	ec55 4b10 	vmov	r4, r5, d0
 800a5d6:	ee10 0a10 	vmov	r0, s0
 800a5da:	a379      	add	r3, pc, #484	; (adr r3, 800a7c0 <__ieee754_rem_pio2+0x320>)
 800a5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	f7f6 f811 	bl	8000608 <__aeabi_dmul>
 800a5e6:	4b80      	ldr	r3, [pc, #512]	; (800a7e8 <__ieee754_rem_pio2+0x348>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f7f5 fe57 	bl	800029c <__adddf3>
 800a5ee:	f7f6 fabb 	bl	8000b68 <__aeabi_d2iz>
 800a5f2:	4683      	mov	fp, r0
 800a5f4:	f7f5 ff9e 	bl	8000534 <__aeabi_i2d>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	ec43 2b18 	vmov	d8, r2, r3
 800a600:	a367      	add	r3, pc, #412	; (adr r3, 800a7a0 <__ieee754_rem_pio2+0x300>)
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	f7f5 ffff 	bl	8000608 <__aeabi_dmul>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f7f5 fe41 	bl	8000298 <__aeabi_dsub>
 800a616:	a364      	add	r3, pc, #400	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x308>)
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	4606      	mov	r6, r0
 800a61e:	460f      	mov	r7, r1
 800a620:	ec51 0b18 	vmov	r0, r1, d8
 800a624:	f7f5 fff0 	bl	8000608 <__aeabi_dmul>
 800a628:	f1bb 0f1f 	cmp.w	fp, #31
 800a62c:	4604      	mov	r4, r0
 800a62e:	460d      	mov	r5, r1
 800a630:	dc0d      	bgt.n	800a64e <__ieee754_rem_pio2+0x1ae>
 800a632:	4b6e      	ldr	r3, [pc, #440]	; (800a7ec <__ieee754_rem_pio2+0x34c>)
 800a634:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63c:	4543      	cmp	r3, r8
 800a63e:	d006      	beq.n	800a64e <__ieee754_rem_pio2+0x1ae>
 800a640:	4622      	mov	r2, r4
 800a642:	462b      	mov	r3, r5
 800a644:	4630      	mov	r0, r6
 800a646:	4639      	mov	r1, r7
 800a648:	f7f5 fe26 	bl	8000298 <__aeabi_dsub>
 800a64c:	e00f      	b.n	800a66e <__ieee754_rem_pio2+0x1ce>
 800a64e:	462b      	mov	r3, r5
 800a650:	4622      	mov	r2, r4
 800a652:	4630      	mov	r0, r6
 800a654:	4639      	mov	r1, r7
 800a656:	f7f5 fe1f 	bl	8000298 <__aeabi_dsub>
 800a65a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a65e:	9303      	str	r3, [sp, #12]
 800a660:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a664:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a668:	f1b8 0f10 	cmp.w	r8, #16
 800a66c:	dc02      	bgt.n	800a674 <__ieee754_rem_pio2+0x1d4>
 800a66e:	e9ca 0100 	strd	r0, r1, [sl]
 800a672:	e039      	b.n	800a6e8 <__ieee754_rem_pio2+0x248>
 800a674:	a34e      	add	r3, pc, #312	; (adr r3, 800a7b0 <__ieee754_rem_pio2+0x310>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	ec51 0b18 	vmov	r0, r1, d8
 800a67e:	f7f5 ffc3 	bl	8000608 <__aeabi_dmul>
 800a682:	4604      	mov	r4, r0
 800a684:	460d      	mov	r5, r1
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4630      	mov	r0, r6
 800a68c:	4639      	mov	r1, r7
 800a68e:	f7f5 fe03 	bl	8000298 <__aeabi_dsub>
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	4680      	mov	r8, r0
 800a698:	4689      	mov	r9, r1
 800a69a:	4630      	mov	r0, r6
 800a69c:	4639      	mov	r1, r7
 800a69e:	f7f5 fdfb 	bl	8000298 <__aeabi_dsub>
 800a6a2:	4622      	mov	r2, r4
 800a6a4:	462b      	mov	r3, r5
 800a6a6:	f7f5 fdf7 	bl	8000298 <__aeabi_dsub>
 800a6aa:	a343      	add	r3, pc, #268	; (adr r3, 800a7b8 <__ieee754_rem_pio2+0x318>)
 800a6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	460d      	mov	r5, r1
 800a6b4:	ec51 0b18 	vmov	r0, r1, d8
 800a6b8:	f7f5 ffa6 	bl	8000608 <__aeabi_dmul>
 800a6bc:	4622      	mov	r2, r4
 800a6be:	462b      	mov	r3, r5
 800a6c0:	f7f5 fdea 	bl	8000298 <__aeabi_dsub>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	460d      	mov	r5, r1
 800a6cc:	4640      	mov	r0, r8
 800a6ce:	4649      	mov	r1, r9
 800a6d0:	f7f5 fde2 	bl	8000298 <__aeabi_dsub>
 800a6d4:	9a03      	ldr	r2, [sp, #12]
 800a6d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	2b31      	cmp	r3, #49	; 0x31
 800a6de:	dc24      	bgt.n	800a72a <__ieee754_rem_pio2+0x28a>
 800a6e0:	e9ca 0100 	strd	r0, r1, [sl]
 800a6e4:	4646      	mov	r6, r8
 800a6e6:	464f      	mov	r7, r9
 800a6e8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	4642      	mov	r2, r8
 800a6f0:	464b      	mov	r3, r9
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f7f5 fdd0 	bl	8000298 <__aeabi_dsub>
 800a6f8:	462b      	mov	r3, r5
 800a6fa:	4622      	mov	r2, r4
 800a6fc:	f7f5 fdcc 	bl	8000298 <__aeabi_dsub>
 800a700:	9b02      	ldr	r3, [sp, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a708:	f6bf af0a 	bge.w	800a520 <__ieee754_rem_pio2+0x80>
 800a70c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a710:	f8ca 3004 	str.w	r3, [sl, #4]
 800a714:	f8ca 8000 	str.w	r8, [sl]
 800a718:	f8ca 0008 	str.w	r0, [sl, #8]
 800a71c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a720:	f8ca 300c 	str.w	r3, [sl, #12]
 800a724:	f1cb 0b00 	rsb	fp, fp, #0
 800a728:	e6fa      	b.n	800a520 <__ieee754_rem_pio2+0x80>
 800a72a:	a327      	add	r3, pc, #156	; (adr r3, 800a7c8 <__ieee754_rem_pio2+0x328>)
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	ec51 0b18 	vmov	r0, r1, d8
 800a734:	f7f5 ff68 	bl	8000608 <__aeabi_dmul>
 800a738:	4604      	mov	r4, r0
 800a73a:	460d      	mov	r5, r1
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	4640      	mov	r0, r8
 800a742:	4649      	mov	r1, r9
 800a744:	f7f5 fda8 	bl	8000298 <__aeabi_dsub>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	4606      	mov	r6, r0
 800a74e:	460f      	mov	r7, r1
 800a750:	4640      	mov	r0, r8
 800a752:	4649      	mov	r1, r9
 800a754:	f7f5 fda0 	bl	8000298 <__aeabi_dsub>
 800a758:	4622      	mov	r2, r4
 800a75a:	462b      	mov	r3, r5
 800a75c:	f7f5 fd9c 	bl	8000298 <__aeabi_dsub>
 800a760:	a31b      	add	r3, pc, #108	; (adr r3, 800a7d0 <__ieee754_rem_pio2+0x330>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	4604      	mov	r4, r0
 800a768:	460d      	mov	r5, r1
 800a76a:	ec51 0b18 	vmov	r0, r1, d8
 800a76e:	f7f5 ff4b 	bl	8000608 <__aeabi_dmul>
 800a772:	4622      	mov	r2, r4
 800a774:	462b      	mov	r3, r5
 800a776:	f7f5 fd8f 	bl	8000298 <__aeabi_dsub>
 800a77a:	4604      	mov	r4, r0
 800a77c:	460d      	mov	r5, r1
 800a77e:	e75f      	b.n	800a640 <__ieee754_rem_pio2+0x1a0>
 800a780:	4b1b      	ldr	r3, [pc, #108]	; (800a7f0 <__ieee754_rem_pio2+0x350>)
 800a782:	4598      	cmp	r8, r3
 800a784:	dd36      	ble.n	800a7f4 <__ieee754_rem_pio2+0x354>
 800a786:	ee10 2a10 	vmov	r2, s0
 800a78a:	462b      	mov	r3, r5
 800a78c:	4620      	mov	r0, r4
 800a78e:	4629      	mov	r1, r5
 800a790:	f7f5 fd82 	bl	8000298 <__aeabi_dsub>
 800a794:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a798:	e9ca 0100 	strd	r0, r1, [sl]
 800a79c:	e694      	b.n	800a4c8 <__ieee754_rem_pio2+0x28>
 800a79e:	bf00      	nop
 800a7a0:	54400000 	.word	0x54400000
 800a7a4:	3ff921fb 	.word	0x3ff921fb
 800a7a8:	1a626331 	.word	0x1a626331
 800a7ac:	3dd0b461 	.word	0x3dd0b461
 800a7b0:	1a600000 	.word	0x1a600000
 800a7b4:	3dd0b461 	.word	0x3dd0b461
 800a7b8:	2e037073 	.word	0x2e037073
 800a7bc:	3ba3198a 	.word	0x3ba3198a
 800a7c0:	6dc9c883 	.word	0x6dc9c883
 800a7c4:	3fe45f30 	.word	0x3fe45f30
 800a7c8:	2e000000 	.word	0x2e000000
 800a7cc:	3ba3198a 	.word	0x3ba3198a
 800a7d0:	252049c1 	.word	0x252049c1
 800a7d4:	397b839a 	.word	0x397b839a
 800a7d8:	3fe921fb 	.word	0x3fe921fb
 800a7dc:	4002d97b 	.word	0x4002d97b
 800a7e0:	3ff921fb 	.word	0x3ff921fb
 800a7e4:	413921fb 	.word	0x413921fb
 800a7e8:	3fe00000 	.word	0x3fe00000
 800a7ec:	0800bc4c 	.word	0x0800bc4c
 800a7f0:	7fefffff 	.word	0x7fefffff
 800a7f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a7f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a7fc:	ee10 0a10 	vmov	r0, s0
 800a800:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a804:	ee10 6a10 	vmov	r6, s0
 800a808:	460f      	mov	r7, r1
 800a80a:	f7f6 f9ad 	bl	8000b68 <__aeabi_d2iz>
 800a80e:	f7f5 fe91 	bl	8000534 <__aeabi_i2d>
 800a812:	4602      	mov	r2, r0
 800a814:	460b      	mov	r3, r1
 800a816:	4630      	mov	r0, r6
 800a818:	4639      	mov	r1, r7
 800a81a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a81e:	f7f5 fd3b 	bl	8000298 <__aeabi_dsub>
 800a822:	4b22      	ldr	r3, [pc, #136]	; (800a8ac <__ieee754_rem_pio2+0x40c>)
 800a824:	2200      	movs	r2, #0
 800a826:	f7f5 feef 	bl	8000608 <__aeabi_dmul>
 800a82a:	460f      	mov	r7, r1
 800a82c:	4606      	mov	r6, r0
 800a82e:	f7f6 f99b 	bl	8000b68 <__aeabi_d2iz>
 800a832:	f7f5 fe7f 	bl	8000534 <__aeabi_i2d>
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	4630      	mov	r0, r6
 800a83c:	4639      	mov	r1, r7
 800a83e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a842:	f7f5 fd29 	bl	8000298 <__aeabi_dsub>
 800a846:	4b19      	ldr	r3, [pc, #100]	; (800a8ac <__ieee754_rem_pio2+0x40c>)
 800a848:	2200      	movs	r2, #0
 800a84a:	f7f5 fedd 	bl	8000608 <__aeabi_dmul>
 800a84e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a852:	ad04      	add	r5, sp, #16
 800a854:	f04f 0803 	mov.w	r8, #3
 800a858:	46a9      	mov	r9, r5
 800a85a:	2600      	movs	r6, #0
 800a85c:	2700      	movs	r7, #0
 800a85e:	4632      	mov	r2, r6
 800a860:	463b      	mov	r3, r7
 800a862:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a866:	46c3      	mov	fp, r8
 800a868:	3d08      	subs	r5, #8
 800a86a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a86e:	f7f6 f933 	bl	8000ad8 <__aeabi_dcmpeq>
 800a872:	2800      	cmp	r0, #0
 800a874:	d1f3      	bne.n	800a85e <__ieee754_rem_pio2+0x3be>
 800a876:	4b0e      	ldr	r3, [pc, #56]	; (800a8b0 <__ieee754_rem_pio2+0x410>)
 800a878:	9301      	str	r3, [sp, #4]
 800a87a:	2302      	movs	r3, #2
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	4622      	mov	r2, r4
 800a880:	465b      	mov	r3, fp
 800a882:	4651      	mov	r1, sl
 800a884:	4648      	mov	r0, r9
 800a886:	f000 f8df 	bl	800aa48 <__kernel_rem_pio2>
 800a88a:	9b02      	ldr	r3, [sp, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	4683      	mov	fp, r0
 800a890:	f6bf ae46 	bge.w	800a520 <__ieee754_rem_pio2+0x80>
 800a894:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a898:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a89c:	f8ca 3004 	str.w	r3, [sl, #4]
 800a8a0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a8a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a8a8:	e73a      	b.n	800a720 <__ieee754_rem_pio2+0x280>
 800a8aa:	bf00      	nop
 800a8ac:	41700000 	.word	0x41700000
 800a8b0:	0800bccc 	.word	0x0800bccc
 800a8b4:	00000000 	.word	0x00000000

0800a8b8 <__kernel_cos>:
 800a8b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	ec57 6b10 	vmov	r6, r7, d0
 800a8c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a8c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a8c8:	ed8d 1b00 	vstr	d1, [sp]
 800a8cc:	da07      	bge.n	800a8de <__kernel_cos+0x26>
 800a8ce:	ee10 0a10 	vmov	r0, s0
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f7f6 f948 	bl	8000b68 <__aeabi_d2iz>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	f000 8088 	beq.w	800a9ee <__kernel_cos+0x136>
 800a8de:	4632      	mov	r2, r6
 800a8e0:	463b      	mov	r3, r7
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	f7f5 fe8f 	bl	8000608 <__aeabi_dmul>
 800a8ea:	4b51      	ldr	r3, [pc, #324]	; (800aa30 <__kernel_cos+0x178>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	460d      	mov	r5, r1
 800a8f2:	f7f5 fe89 	bl	8000608 <__aeabi_dmul>
 800a8f6:	a340      	add	r3, pc, #256	; (adr r3, 800a9f8 <__kernel_cos+0x140>)
 800a8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fc:	4682      	mov	sl, r0
 800a8fe:	468b      	mov	fp, r1
 800a900:	4620      	mov	r0, r4
 800a902:	4629      	mov	r1, r5
 800a904:	f7f5 fe80 	bl	8000608 <__aeabi_dmul>
 800a908:	a33d      	add	r3, pc, #244	; (adr r3, 800aa00 <__kernel_cos+0x148>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	f7f5 fcc5 	bl	800029c <__adddf3>
 800a912:	4622      	mov	r2, r4
 800a914:	462b      	mov	r3, r5
 800a916:	f7f5 fe77 	bl	8000608 <__aeabi_dmul>
 800a91a:	a33b      	add	r3, pc, #236	; (adr r3, 800aa08 <__kernel_cos+0x150>)
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	f7f5 fcba 	bl	8000298 <__aeabi_dsub>
 800a924:	4622      	mov	r2, r4
 800a926:	462b      	mov	r3, r5
 800a928:	f7f5 fe6e 	bl	8000608 <__aeabi_dmul>
 800a92c:	a338      	add	r3, pc, #224	; (adr r3, 800aa10 <__kernel_cos+0x158>)
 800a92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a932:	f7f5 fcb3 	bl	800029c <__adddf3>
 800a936:	4622      	mov	r2, r4
 800a938:	462b      	mov	r3, r5
 800a93a:	f7f5 fe65 	bl	8000608 <__aeabi_dmul>
 800a93e:	a336      	add	r3, pc, #216	; (adr r3, 800aa18 <__kernel_cos+0x160>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f7f5 fca8 	bl	8000298 <__aeabi_dsub>
 800a948:	4622      	mov	r2, r4
 800a94a:	462b      	mov	r3, r5
 800a94c:	f7f5 fe5c 	bl	8000608 <__aeabi_dmul>
 800a950:	a333      	add	r3, pc, #204	; (adr r3, 800aa20 <__kernel_cos+0x168>)
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f7f5 fca1 	bl	800029c <__adddf3>
 800a95a:	4622      	mov	r2, r4
 800a95c:	462b      	mov	r3, r5
 800a95e:	f7f5 fe53 	bl	8000608 <__aeabi_dmul>
 800a962:	4622      	mov	r2, r4
 800a964:	462b      	mov	r3, r5
 800a966:	f7f5 fe4f 	bl	8000608 <__aeabi_dmul>
 800a96a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a96e:	4604      	mov	r4, r0
 800a970:	460d      	mov	r5, r1
 800a972:	4630      	mov	r0, r6
 800a974:	4639      	mov	r1, r7
 800a976:	f7f5 fe47 	bl	8000608 <__aeabi_dmul>
 800a97a:	460b      	mov	r3, r1
 800a97c:	4602      	mov	r2, r0
 800a97e:	4629      	mov	r1, r5
 800a980:	4620      	mov	r0, r4
 800a982:	f7f5 fc89 	bl	8000298 <__aeabi_dsub>
 800a986:	4b2b      	ldr	r3, [pc, #172]	; (800aa34 <__kernel_cos+0x17c>)
 800a988:	4598      	cmp	r8, r3
 800a98a:	4606      	mov	r6, r0
 800a98c:	460f      	mov	r7, r1
 800a98e:	dc10      	bgt.n	800a9b2 <__kernel_cos+0xfa>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4650      	mov	r0, sl
 800a996:	4659      	mov	r1, fp
 800a998:	f7f5 fc7e 	bl	8000298 <__aeabi_dsub>
 800a99c:	460b      	mov	r3, r1
 800a99e:	4926      	ldr	r1, [pc, #152]	; (800aa38 <__kernel_cos+0x180>)
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	f7f5 fc78 	bl	8000298 <__aeabi_dsub>
 800a9a8:	ec41 0b10 	vmov	d0, r0, r1
 800a9ac:	b003      	add	sp, #12
 800a9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b2:	4b22      	ldr	r3, [pc, #136]	; (800aa3c <__kernel_cos+0x184>)
 800a9b4:	4920      	ldr	r1, [pc, #128]	; (800aa38 <__kernel_cos+0x180>)
 800a9b6:	4598      	cmp	r8, r3
 800a9b8:	bfcc      	ite	gt
 800a9ba:	4d21      	ldrgt	r5, [pc, #132]	; (800aa40 <__kernel_cos+0x188>)
 800a9bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a9c0:	2400      	movs	r4, #0
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	462b      	mov	r3, r5
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	f7f5 fc66 	bl	8000298 <__aeabi_dsub>
 800a9cc:	4622      	mov	r2, r4
 800a9ce:	4680      	mov	r8, r0
 800a9d0:	4689      	mov	r9, r1
 800a9d2:	462b      	mov	r3, r5
 800a9d4:	4650      	mov	r0, sl
 800a9d6:	4659      	mov	r1, fp
 800a9d8:	f7f5 fc5e 	bl	8000298 <__aeabi_dsub>
 800a9dc:	4632      	mov	r2, r6
 800a9de:	463b      	mov	r3, r7
 800a9e0:	f7f5 fc5a 	bl	8000298 <__aeabi_dsub>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4640      	mov	r0, r8
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	e7da      	b.n	800a9a4 <__kernel_cos+0xec>
 800a9ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800aa28 <__kernel_cos+0x170>
 800a9f2:	e7db      	b.n	800a9ac <__kernel_cos+0xf4>
 800a9f4:	f3af 8000 	nop.w
 800a9f8:	be8838d4 	.word	0xbe8838d4
 800a9fc:	bda8fae9 	.word	0xbda8fae9
 800aa00:	bdb4b1c4 	.word	0xbdb4b1c4
 800aa04:	3e21ee9e 	.word	0x3e21ee9e
 800aa08:	809c52ad 	.word	0x809c52ad
 800aa0c:	3e927e4f 	.word	0x3e927e4f
 800aa10:	19cb1590 	.word	0x19cb1590
 800aa14:	3efa01a0 	.word	0x3efa01a0
 800aa18:	16c15177 	.word	0x16c15177
 800aa1c:	3f56c16c 	.word	0x3f56c16c
 800aa20:	5555554c 	.word	0x5555554c
 800aa24:	3fa55555 	.word	0x3fa55555
 800aa28:	00000000 	.word	0x00000000
 800aa2c:	3ff00000 	.word	0x3ff00000
 800aa30:	3fe00000 	.word	0x3fe00000
 800aa34:	3fd33332 	.word	0x3fd33332
 800aa38:	3ff00000 	.word	0x3ff00000
 800aa3c:	3fe90000 	.word	0x3fe90000
 800aa40:	3fd20000 	.word	0x3fd20000
 800aa44:	00000000 	.word	0x00000000

0800aa48 <__kernel_rem_pio2>:
 800aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	ed2d 8b02 	vpush	{d8}
 800aa50:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800aa54:	f112 0f14 	cmn.w	r2, #20
 800aa58:	9308      	str	r3, [sp, #32]
 800aa5a:	9101      	str	r1, [sp, #4]
 800aa5c:	4bc6      	ldr	r3, [pc, #792]	; (800ad78 <__kernel_rem_pio2+0x330>)
 800aa5e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800aa60:	9009      	str	r0, [sp, #36]	; 0x24
 800aa62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa66:	9304      	str	r3, [sp, #16]
 800aa68:	9b08      	ldr	r3, [sp, #32]
 800aa6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa6e:	bfa8      	it	ge
 800aa70:	1ed4      	subge	r4, r2, #3
 800aa72:	9306      	str	r3, [sp, #24]
 800aa74:	bfb2      	itee	lt
 800aa76:	2400      	movlt	r4, #0
 800aa78:	2318      	movge	r3, #24
 800aa7a:	fb94 f4f3 	sdivge	r4, r4, r3
 800aa7e:	f06f 0317 	mvn.w	r3, #23
 800aa82:	fb04 3303 	mla	r3, r4, r3, r3
 800aa86:	eb03 0a02 	add.w	sl, r3, r2
 800aa8a:	9b04      	ldr	r3, [sp, #16]
 800aa8c:	9a06      	ldr	r2, [sp, #24]
 800aa8e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800ad68 <__kernel_rem_pio2+0x320>
 800aa92:	eb03 0802 	add.w	r8, r3, r2
 800aa96:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800aa98:	1aa7      	subs	r7, r4, r2
 800aa9a:	ae20      	add	r6, sp, #128	; 0x80
 800aa9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800aaa0:	2500      	movs	r5, #0
 800aaa2:	4545      	cmp	r5, r8
 800aaa4:	dd18      	ble.n	800aad8 <__kernel_rem_pio2+0x90>
 800aaa6:	9b08      	ldr	r3, [sp, #32]
 800aaa8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800aaac:	aa20      	add	r2, sp, #128	; 0x80
 800aaae:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800ad68 <__kernel_rem_pio2+0x320>
 800aab2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800aab6:	f1c3 0301 	rsb	r3, r3, #1
 800aaba:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800aabe:	9307      	str	r3, [sp, #28]
 800aac0:	9b07      	ldr	r3, [sp, #28]
 800aac2:	9a04      	ldr	r2, [sp, #16]
 800aac4:	4443      	add	r3, r8
 800aac6:	429a      	cmp	r2, r3
 800aac8:	db2f      	blt.n	800ab2a <__kernel_rem_pio2+0xe2>
 800aaca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aace:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800aad2:	462f      	mov	r7, r5
 800aad4:	2600      	movs	r6, #0
 800aad6:	e01b      	b.n	800ab10 <__kernel_rem_pio2+0xc8>
 800aad8:	42ef      	cmn	r7, r5
 800aada:	d407      	bmi.n	800aaec <__kernel_rem_pio2+0xa4>
 800aadc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aae0:	f7f5 fd28 	bl	8000534 <__aeabi_i2d>
 800aae4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aae8:	3501      	adds	r5, #1
 800aaea:	e7da      	b.n	800aaa2 <__kernel_rem_pio2+0x5a>
 800aaec:	ec51 0b18 	vmov	r0, r1, d8
 800aaf0:	e7f8      	b.n	800aae4 <__kernel_rem_pio2+0x9c>
 800aaf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaf6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800aafa:	f7f5 fd85 	bl	8000608 <__aeabi_dmul>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab06:	f7f5 fbc9 	bl	800029c <__adddf3>
 800ab0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab0e:	3601      	adds	r6, #1
 800ab10:	9b06      	ldr	r3, [sp, #24]
 800ab12:	429e      	cmp	r6, r3
 800ab14:	f1a7 0708 	sub.w	r7, r7, #8
 800ab18:	ddeb      	ble.n	800aaf2 <__kernel_rem_pio2+0xaa>
 800ab1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab1e:	3508      	adds	r5, #8
 800ab20:	ecab 7b02 	vstmia	fp!, {d7}
 800ab24:	f108 0801 	add.w	r8, r8, #1
 800ab28:	e7ca      	b.n	800aac0 <__kernel_rem_pio2+0x78>
 800ab2a:	9b04      	ldr	r3, [sp, #16]
 800ab2c:	aa0c      	add	r2, sp, #48	; 0x30
 800ab2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab32:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab34:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ab36:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ab3a:	9c04      	ldr	r4, [sp, #16]
 800ab3c:	930a      	str	r3, [sp, #40]	; 0x28
 800ab3e:	ab98      	add	r3, sp, #608	; 0x260
 800ab40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab44:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ab48:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ab4c:	f8cd b008 	str.w	fp, [sp, #8]
 800ab50:	4625      	mov	r5, r4
 800ab52:	2d00      	cmp	r5, #0
 800ab54:	dc78      	bgt.n	800ac48 <__kernel_rem_pio2+0x200>
 800ab56:	ec47 6b10 	vmov	d0, r6, r7
 800ab5a:	4650      	mov	r0, sl
 800ab5c:	f000 fbfc 	bl	800b358 <scalbn>
 800ab60:	ec57 6b10 	vmov	r6, r7, d0
 800ab64:	2200      	movs	r2, #0
 800ab66:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ab6a:	ee10 0a10 	vmov	r0, s0
 800ab6e:	4639      	mov	r1, r7
 800ab70:	f7f5 fd4a 	bl	8000608 <__aeabi_dmul>
 800ab74:	ec41 0b10 	vmov	d0, r0, r1
 800ab78:	f000 fb6e 	bl	800b258 <floor>
 800ab7c:	4b7f      	ldr	r3, [pc, #508]	; (800ad7c <__kernel_rem_pio2+0x334>)
 800ab7e:	ec51 0b10 	vmov	r0, r1, d0
 800ab82:	2200      	movs	r2, #0
 800ab84:	f7f5 fd40 	bl	8000608 <__aeabi_dmul>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	4639      	mov	r1, r7
 800ab90:	f7f5 fb82 	bl	8000298 <__aeabi_dsub>
 800ab94:	460f      	mov	r7, r1
 800ab96:	4606      	mov	r6, r0
 800ab98:	f7f5 ffe6 	bl	8000b68 <__aeabi_d2iz>
 800ab9c:	9007      	str	r0, [sp, #28]
 800ab9e:	f7f5 fcc9 	bl	8000534 <__aeabi_i2d>
 800aba2:	4602      	mov	r2, r0
 800aba4:	460b      	mov	r3, r1
 800aba6:	4630      	mov	r0, r6
 800aba8:	4639      	mov	r1, r7
 800abaa:	f7f5 fb75 	bl	8000298 <__aeabi_dsub>
 800abae:	f1ba 0f00 	cmp.w	sl, #0
 800abb2:	4606      	mov	r6, r0
 800abb4:	460f      	mov	r7, r1
 800abb6:	dd70      	ble.n	800ac9a <__kernel_rem_pio2+0x252>
 800abb8:	1e62      	subs	r2, r4, #1
 800abba:	ab0c      	add	r3, sp, #48	; 0x30
 800abbc:	9d07      	ldr	r5, [sp, #28]
 800abbe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800abc2:	f1ca 0118 	rsb	r1, sl, #24
 800abc6:	fa40 f301 	asr.w	r3, r0, r1
 800abca:	441d      	add	r5, r3
 800abcc:	408b      	lsls	r3, r1
 800abce:	1ac0      	subs	r0, r0, r3
 800abd0:	ab0c      	add	r3, sp, #48	; 0x30
 800abd2:	9507      	str	r5, [sp, #28]
 800abd4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800abd8:	f1ca 0317 	rsb	r3, sl, #23
 800abdc:	fa40 f303 	asr.w	r3, r0, r3
 800abe0:	9302      	str	r3, [sp, #8]
 800abe2:	9b02      	ldr	r3, [sp, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	dd66      	ble.n	800acb6 <__kernel_rem_pio2+0x26e>
 800abe8:	9b07      	ldr	r3, [sp, #28]
 800abea:	2200      	movs	r2, #0
 800abec:	3301      	adds	r3, #1
 800abee:	9307      	str	r3, [sp, #28]
 800abf0:	4615      	mov	r5, r2
 800abf2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800abf6:	4294      	cmp	r4, r2
 800abf8:	f300 8099 	bgt.w	800ad2e <__kernel_rem_pio2+0x2e6>
 800abfc:	f1ba 0f00 	cmp.w	sl, #0
 800ac00:	dd07      	ble.n	800ac12 <__kernel_rem_pio2+0x1ca>
 800ac02:	f1ba 0f01 	cmp.w	sl, #1
 800ac06:	f000 80a5 	beq.w	800ad54 <__kernel_rem_pio2+0x30c>
 800ac0a:	f1ba 0f02 	cmp.w	sl, #2
 800ac0e:	f000 80c1 	beq.w	800ad94 <__kernel_rem_pio2+0x34c>
 800ac12:	9b02      	ldr	r3, [sp, #8]
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d14e      	bne.n	800acb6 <__kernel_rem_pio2+0x26e>
 800ac18:	4632      	mov	r2, r6
 800ac1a:	463b      	mov	r3, r7
 800ac1c:	4958      	ldr	r1, [pc, #352]	; (800ad80 <__kernel_rem_pio2+0x338>)
 800ac1e:	2000      	movs	r0, #0
 800ac20:	f7f5 fb3a 	bl	8000298 <__aeabi_dsub>
 800ac24:	4606      	mov	r6, r0
 800ac26:	460f      	mov	r7, r1
 800ac28:	2d00      	cmp	r5, #0
 800ac2a:	d044      	beq.n	800acb6 <__kernel_rem_pio2+0x26e>
 800ac2c:	4650      	mov	r0, sl
 800ac2e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800ad70 <__kernel_rem_pio2+0x328>
 800ac32:	f000 fb91 	bl	800b358 <scalbn>
 800ac36:	4630      	mov	r0, r6
 800ac38:	4639      	mov	r1, r7
 800ac3a:	ec53 2b10 	vmov	r2, r3, d0
 800ac3e:	f7f5 fb2b 	bl	8000298 <__aeabi_dsub>
 800ac42:	4606      	mov	r6, r0
 800ac44:	460f      	mov	r7, r1
 800ac46:	e036      	b.n	800acb6 <__kernel_rem_pio2+0x26e>
 800ac48:	4b4e      	ldr	r3, [pc, #312]	; (800ad84 <__kernel_rem_pio2+0x33c>)
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	4639      	mov	r1, r7
 800ac50:	f7f5 fcda 	bl	8000608 <__aeabi_dmul>
 800ac54:	f7f5 ff88 	bl	8000b68 <__aeabi_d2iz>
 800ac58:	f7f5 fc6c 	bl	8000534 <__aeabi_i2d>
 800ac5c:	4b4a      	ldr	r3, [pc, #296]	; (800ad88 <__kernel_rem_pio2+0x340>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	4680      	mov	r8, r0
 800ac62:	4689      	mov	r9, r1
 800ac64:	f7f5 fcd0 	bl	8000608 <__aeabi_dmul>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	4639      	mov	r1, r7
 800ac70:	f7f5 fb12 	bl	8000298 <__aeabi_dsub>
 800ac74:	f7f5 ff78 	bl	8000b68 <__aeabi_d2iz>
 800ac78:	9b02      	ldr	r3, [sp, #8]
 800ac7a:	f843 0b04 	str.w	r0, [r3], #4
 800ac7e:	3d01      	subs	r5, #1
 800ac80:	9302      	str	r3, [sp, #8]
 800ac82:	ab70      	add	r3, sp, #448	; 0x1c0
 800ac84:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	4640      	mov	r0, r8
 800ac8e:	4649      	mov	r1, r9
 800ac90:	f7f5 fb04 	bl	800029c <__adddf3>
 800ac94:	4606      	mov	r6, r0
 800ac96:	460f      	mov	r7, r1
 800ac98:	e75b      	b.n	800ab52 <__kernel_rem_pio2+0x10a>
 800ac9a:	d105      	bne.n	800aca8 <__kernel_rem_pio2+0x260>
 800ac9c:	1e63      	subs	r3, r4, #1
 800ac9e:	aa0c      	add	r2, sp, #48	; 0x30
 800aca0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aca4:	15c3      	asrs	r3, r0, #23
 800aca6:	e79b      	b.n	800abe0 <__kernel_rem_pio2+0x198>
 800aca8:	4b38      	ldr	r3, [pc, #224]	; (800ad8c <__kernel_rem_pio2+0x344>)
 800acaa:	2200      	movs	r2, #0
 800acac:	f7f5 ff32 	bl	8000b14 <__aeabi_dcmpge>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d139      	bne.n	800ad28 <__kernel_rem_pio2+0x2e0>
 800acb4:	9002      	str	r0, [sp, #8]
 800acb6:	2200      	movs	r2, #0
 800acb8:	2300      	movs	r3, #0
 800acba:	4630      	mov	r0, r6
 800acbc:	4639      	mov	r1, r7
 800acbe:	f7f5 ff0b 	bl	8000ad8 <__aeabi_dcmpeq>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	f000 80b4 	beq.w	800ae30 <__kernel_rem_pio2+0x3e8>
 800acc8:	f104 3bff 	add.w	fp, r4, #4294967295
 800accc:	465b      	mov	r3, fp
 800acce:	2200      	movs	r2, #0
 800acd0:	9904      	ldr	r1, [sp, #16]
 800acd2:	428b      	cmp	r3, r1
 800acd4:	da65      	bge.n	800ada2 <__kernel_rem_pio2+0x35a>
 800acd6:	2a00      	cmp	r2, #0
 800acd8:	d07b      	beq.n	800add2 <__kernel_rem_pio2+0x38a>
 800acda:	ab0c      	add	r3, sp, #48	; 0x30
 800acdc:	f1aa 0a18 	sub.w	sl, sl, #24
 800ace0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 80a0 	beq.w	800ae2a <__kernel_rem_pio2+0x3e2>
 800acea:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800ad70 <__kernel_rem_pio2+0x328>
 800acee:	4650      	mov	r0, sl
 800acf0:	f000 fb32 	bl	800b358 <scalbn>
 800acf4:	4f23      	ldr	r7, [pc, #140]	; (800ad84 <__kernel_rem_pio2+0x33c>)
 800acf6:	ec55 4b10 	vmov	r4, r5, d0
 800acfa:	46d8      	mov	r8, fp
 800acfc:	2600      	movs	r6, #0
 800acfe:	f1b8 0f00 	cmp.w	r8, #0
 800ad02:	f280 80cf 	bge.w	800aea4 <__kernel_rem_pio2+0x45c>
 800ad06:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800ad68 <__kernel_rem_pio2+0x320>
 800ad0a:	465f      	mov	r7, fp
 800ad0c:	f04f 0800 	mov.w	r8, #0
 800ad10:	2f00      	cmp	r7, #0
 800ad12:	f2c0 80fd 	blt.w	800af10 <__kernel_rem_pio2+0x4c8>
 800ad16:	ab70      	add	r3, sp, #448	; 0x1c0
 800ad18:	f8df a074 	ldr.w	sl, [pc, #116]	; 800ad90 <__kernel_rem_pio2+0x348>
 800ad1c:	ec55 4b18 	vmov	r4, r5, d8
 800ad20:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ad24:	2600      	movs	r6, #0
 800ad26:	e0e5      	b.n	800aef4 <__kernel_rem_pio2+0x4ac>
 800ad28:	2302      	movs	r3, #2
 800ad2a:	9302      	str	r3, [sp, #8]
 800ad2c:	e75c      	b.n	800abe8 <__kernel_rem_pio2+0x1a0>
 800ad2e:	f8db 3000 	ldr.w	r3, [fp]
 800ad32:	b955      	cbnz	r5, 800ad4a <__kernel_rem_pio2+0x302>
 800ad34:	b123      	cbz	r3, 800ad40 <__kernel_rem_pio2+0x2f8>
 800ad36:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ad3a:	f8cb 3000 	str.w	r3, [fp]
 800ad3e:	2301      	movs	r3, #1
 800ad40:	3201      	adds	r2, #1
 800ad42:	f10b 0b04 	add.w	fp, fp, #4
 800ad46:	461d      	mov	r5, r3
 800ad48:	e755      	b.n	800abf6 <__kernel_rem_pio2+0x1ae>
 800ad4a:	1acb      	subs	r3, r1, r3
 800ad4c:	f8cb 3000 	str.w	r3, [fp]
 800ad50:	462b      	mov	r3, r5
 800ad52:	e7f5      	b.n	800ad40 <__kernel_rem_pio2+0x2f8>
 800ad54:	1e62      	subs	r2, r4, #1
 800ad56:	ab0c      	add	r3, sp, #48	; 0x30
 800ad58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad5c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ad60:	a90c      	add	r1, sp, #48	; 0x30
 800ad62:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ad66:	e754      	b.n	800ac12 <__kernel_rem_pio2+0x1ca>
	...
 800ad74:	3ff00000 	.word	0x3ff00000
 800ad78:	0800be18 	.word	0x0800be18
 800ad7c:	40200000 	.word	0x40200000
 800ad80:	3ff00000 	.word	0x3ff00000
 800ad84:	3e700000 	.word	0x3e700000
 800ad88:	41700000 	.word	0x41700000
 800ad8c:	3fe00000 	.word	0x3fe00000
 800ad90:	0800bdd8 	.word	0x0800bdd8
 800ad94:	1e62      	subs	r2, r4, #1
 800ad96:	ab0c      	add	r3, sp, #48	; 0x30
 800ad98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ada0:	e7de      	b.n	800ad60 <__kernel_rem_pio2+0x318>
 800ada2:	a90c      	add	r1, sp, #48	; 0x30
 800ada4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	430a      	orrs	r2, r1
 800adac:	e790      	b.n	800acd0 <__kernel_rem_pio2+0x288>
 800adae:	3301      	adds	r3, #1
 800adb0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800adb4:	2900      	cmp	r1, #0
 800adb6:	d0fa      	beq.n	800adae <__kernel_rem_pio2+0x366>
 800adb8:	9a08      	ldr	r2, [sp, #32]
 800adba:	18e3      	adds	r3, r4, r3
 800adbc:	18a6      	adds	r6, r4, r2
 800adbe:	aa20      	add	r2, sp, #128	; 0x80
 800adc0:	1c65      	adds	r5, r4, #1
 800adc2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800adc6:	9302      	str	r3, [sp, #8]
 800adc8:	9b02      	ldr	r3, [sp, #8]
 800adca:	42ab      	cmp	r3, r5
 800adcc:	da04      	bge.n	800add8 <__kernel_rem_pio2+0x390>
 800adce:	461c      	mov	r4, r3
 800add0:	e6b5      	b.n	800ab3e <__kernel_rem_pio2+0xf6>
 800add2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800add4:	2301      	movs	r3, #1
 800add6:	e7eb      	b.n	800adb0 <__kernel_rem_pio2+0x368>
 800add8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adde:	f7f5 fba9 	bl	8000534 <__aeabi_i2d>
 800ade2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ade6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade8:	46b3      	mov	fp, r6
 800adea:	461c      	mov	r4, r3
 800adec:	2700      	movs	r7, #0
 800adee:	f04f 0800 	mov.w	r8, #0
 800adf2:	f04f 0900 	mov.w	r9, #0
 800adf6:	9b06      	ldr	r3, [sp, #24]
 800adf8:	429f      	cmp	r7, r3
 800adfa:	dd06      	ble.n	800ae0a <__kernel_rem_pio2+0x3c2>
 800adfc:	ab70      	add	r3, sp, #448	; 0x1c0
 800adfe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae02:	e9c3 8900 	strd	r8, r9, [r3]
 800ae06:	3501      	adds	r5, #1
 800ae08:	e7de      	b.n	800adc8 <__kernel_rem_pio2+0x380>
 800ae0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ae0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ae12:	f7f5 fbf9 	bl	8000608 <__aeabi_dmul>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	4640      	mov	r0, r8
 800ae1c:	4649      	mov	r1, r9
 800ae1e:	f7f5 fa3d 	bl	800029c <__adddf3>
 800ae22:	3701      	adds	r7, #1
 800ae24:	4680      	mov	r8, r0
 800ae26:	4689      	mov	r9, r1
 800ae28:	e7e5      	b.n	800adf6 <__kernel_rem_pio2+0x3ae>
 800ae2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae2e:	e754      	b.n	800acda <__kernel_rem_pio2+0x292>
 800ae30:	ec47 6b10 	vmov	d0, r6, r7
 800ae34:	f1ca 0000 	rsb	r0, sl, #0
 800ae38:	f000 fa8e 	bl	800b358 <scalbn>
 800ae3c:	ec57 6b10 	vmov	r6, r7, d0
 800ae40:	4b9f      	ldr	r3, [pc, #636]	; (800b0c0 <__kernel_rem_pio2+0x678>)
 800ae42:	ee10 0a10 	vmov	r0, s0
 800ae46:	2200      	movs	r2, #0
 800ae48:	4639      	mov	r1, r7
 800ae4a:	f7f5 fe63 	bl	8000b14 <__aeabi_dcmpge>
 800ae4e:	b300      	cbz	r0, 800ae92 <__kernel_rem_pio2+0x44a>
 800ae50:	4b9c      	ldr	r3, [pc, #624]	; (800b0c4 <__kernel_rem_pio2+0x67c>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	4630      	mov	r0, r6
 800ae56:	4639      	mov	r1, r7
 800ae58:	f7f5 fbd6 	bl	8000608 <__aeabi_dmul>
 800ae5c:	f7f5 fe84 	bl	8000b68 <__aeabi_d2iz>
 800ae60:	4605      	mov	r5, r0
 800ae62:	f7f5 fb67 	bl	8000534 <__aeabi_i2d>
 800ae66:	4b96      	ldr	r3, [pc, #600]	; (800b0c0 <__kernel_rem_pio2+0x678>)
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f7f5 fbcd 	bl	8000608 <__aeabi_dmul>
 800ae6e:	460b      	mov	r3, r1
 800ae70:	4602      	mov	r2, r0
 800ae72:	4639      	mov	r1, r7
 800ae74:	4630      	mov	r0, r6
 800ae76:	f7f5 fa0f 	bl	8000298 <__aeabi_dsub>
 800ae7a:	f7f5 fe75 	bl	8000b68 <__aeabi_d2iz>
 800ae7e:	f104 0b01 	add.w	fp, r4, #1
 800ae82:	ab0c      	add	r3, sp, #48	; 0x30
 800ae84:	f10a 0a18 	add.w	sl, sl, #24
 800ae88:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ae8c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800ae90:	e72b      	b.n	800acea <__kernel_rem_pio2+0x2a2>
 800ae92:	4630      	mov	r0, r6
 800ae94:	4639      	mov	r1, r7
 800ae96:	f7f5 fe67 	bl	8000b68 <__aeabi_d2iz>
 800ae9a:	ab0c      	add	r3, sp, #48	; 0x30
 800ae9c:	46a3      	mov	fp, r4
 800ae9e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aea2:	e722      	b.n	800acea <__kernel_rem_pio2+0x2a2>
 800aea4:	ab70      	add	r3, sp, #448	; 0x1c0
 800aea6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800aeaa:	ab0c      	add	r3, sp, #48	; 0x30
 800aeac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aeb0:	f7f5 fb40 	bl	8000534 <__aeabi_i2d>
 800aeb4:	4622      	mov	r2, r4
 800aeb6:	462b      	mov	r3, r5
 800aeb8:	f7f5 fba6 	bl	8000608 <__aeabi_dmul>
 800aebc:	4632      	mov	r2, r6
 800aebe:	e9c9 0100 	strd	r0, r1, [r9]
 800aec2:	463b      	mov	r3, r7
 800aec4:	4620      	mov	r0, r4
 800aec6:	4629      	mov	r1, r5
 800aec8:	f7f5 fb9e 	bl	8000608 <__aeabi_dmul>
 800aecc:	f108 38ff 	add.w	r8, r8, #4294967295
 800aed0:	4604      	mov	r4, r0
 800aed2:	460d      	mov	r5, r1
 800aed4:	e713      	b.n	800acfe <__kernel_rem_pio2+0x2b6>
 800aed6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800aeda:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800aede:	f7f5 fb93 	bl	8000608 <__aeabi_dmul>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4620      	mov	r0, r4
 800aee8:	4629      	mov	r1, r5
 800aeea:	f7f5 f9d7 	bl	800029c <__adddf3>
 800aeee:	3601      	adds	r6, #1
 800aef0:	4604      	mov	r4, r0
 800aef2:	460d      	mov	r5, r1
 800aef4:	9b04      	ldr	r3, [sp, #16]
 800aef6:	429e      	cmp	r6, r3
 800aef8:	dc01      	bgt.n	800aefe <__kernel_rem_pio2+0x4b6>
 800aefa:	45b0      	cmp	r8, r6
 800aefc:	daeb      	bge.n	800aed6 <__kernel_rem_pio2+0x48e>
 800aefe:	ab48      	add	r3, sp, #288	; 0x120
 800af00:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800af04:	e9c3 4500 	strd	r4, r5, [r3]
 800af08:	3f01      	subs	r7, #1
 800af0a:	f108 0801 	add.w	r8, r8, #1
 800af0e:	e6ff      	b.n	800ad10 <__kernel_rem_pio2+0x2c8>
 800af10:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800af12:	2b02      	cmp	r3, #2
 800af14:	dc0b      	bgt.n	800af2e <__kernel_rem_pio2+0x4e6>
 800af16:	2b00      	cmp	r3, #0
 800af18:	dc6e      	bgt.n	800aff8 <__kernel_rem_pio2+0x5b0>
 800af1a:	d045      	beq.n	800afa8 <__kernel_rem_pio2+0x560>
 800af1c:	9b07      	ldr	r3, [sp, #28]
 800af1e:	f003 0007 	and.w	r0, r3, #7
 800af22:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800af26:	ecbd 8b02 	vpop	{d8}
 800af2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800af30:	2b03      	cmp	r3, #3
 800af32:	d1f3      	bne.n	800af1c <__kernel_rem_pio2+0x4d4>
 800af34:	ab48      	add	r3, sp, #288	; 0x120
 800af36:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800af3a:	46d0      	mov	r8, sl
 800af3c:	46d9      	mov	r9, fp
 800af3e:	f1b9 0f00 	cmp.w	r9, #0
 800af42:	f1a8 0808 	sub.w	r8, r8, #8
 800af46:	dc64      	bgt.n	800b012 <__kernel_rem_pio2+0x5ca>
 800af48:	465c      	mov	r4, fp
 800af4a:	2c01      	cmp	r4, #1
 800af4c:	f1aa 0a08 	sub.w	sl, sl, #8
 800af50:	dc7e      	bgt.n	800b050 <__kernel_rem_pio2+0x608>
 800af52:	2000      	movs	r0, #0
 800af54:	2100      	movs	r1, #0
 800af56:	f1bb 0f01 	cmp.w	fp, #1
 800af5a:	f300 8097 	bgt.w	800b08c <__kernel_rem_pio2+0x644>
 800af5e:	9b02      	ldr	r3, [sp, #8]
 800af60:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800af64:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f040 8099 	bne.w	800b0a0 <__kernel_rem_pio2+0x658>
 800af6e:	9b01      	ldr	r3, [sp, #4]
 800af70:	e9c3 5600 	strd	r5, r6, [r3]
 800af74:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800af78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800af7c:	e7ce      	b.n	800af1c <__kernel_rem_pio2+0x4d4>
 800af7e:	ab48      	add	r3, sp, #288	; 0x120
 800af80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f7f5 f988 	bl	800029c <__adddf3>
 800af8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af90:	f1bb 0f00 	cmp.w	fp, #0
 800af94:	daf3      	bge.n	800af7e <__kernel_rem_pio2+0x536>
 800af96:	9b02      	ldr	r3, [sp, #8]
 800af98:	b113      	cbz	r3, 800afa0 <__kernel_rem_pio2+0x558>
 800af9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af9e:	4619      	mov	r1, r3
 800afa0:	9b01      	ldr	r3, [sp, #4]
 800afa2:	e9c3 0100 	strd	r0, r1, [r3]
 800afa6:	e7b9      	b.n	800af1c <__kernel_rem_pio2+0x4d4>
 800afa8:	2000      	movs	r0, #0
 800afaa:	2100      	movs	r1, #0
 800afac:	e7f0      	b.n	800af90 <__kernel_rem_pio2+0x548>
 800afae:	ab48      	add	r3, sp, #288	; 0x120
 800afb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f7f5 f970 	bl	800029c <__adddf3>
 800afbc:	3c01      	subs	r4, #1
 800afbe:	2c00      	cmp	r4, #0
 800afc0:	daf5      	bge.n	800afae <__kernel_rem_pio2+0x566>
 800afc2:	9b02      	ldr	r3, [sp, #8]
 800afc4:	b1e3      	cbz	r3, 800b000 <__kernel_rem_pio2+0x5b8>
 800afc6:	4602      	mov	r2, r0
 800afc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afcc:	9c01      	ldr	r4, [sp, #4]
 800afce:	e9c4 2300 	strd	r2, r3, [r4]
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800afda:	f7f5 f95d 	bl	8000298 <__aeabi_dsub>
 800afde:	ad4a      	add	r5, sp, #296	; 0x128
 800afe0:	2401      	movs	r4, #1
 800afe2:	45a3      	cmp	fp, r4
 800afe4:	da0f      	bge.n	800b006 <__kernel_rem_pio2+0x5be>
 800afe6:	9b02      	ldr	r3, [sp, #8]
 800afe8:	b113      	cbz	r3, 800aff0 <__kernel_rem_pio2+0x5a8>
 800afea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afee:	4619      	mov	r1, r3
 800aff0:	9b01      	ldr	r3, [sp, #4]
 800aff2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aff6:	e791      	b.n	800af1c <__kernel_rem_pio2+0x4d4>
 800aff8:	465c      	mov	r4, fp
 800affa:	2000      	movs	r0, #0
 800affc:	2100      	movs	r1, #0
 800affe:	e7de      	b.n	800afbe <__kernel_rem_pio2+0x576>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	e7e2      	b.n	800afcc <__kernel_rem_pio2+0x584>
 800b006:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b00a:	f7f5 f947 	bl	800029c <__adddf3>
 800b00e:	3401      	adds	r4, #1
 800b010:	e7e7      	b.n	800afe2 <__kernel_rem_pio2+0x59a>
 800b012:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b016:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b01a:	4620      	mov	r0, r4
 800b01c:	4632      	mov	r2, r6
 800b01e:	463b      	mov	r3, r7
 800b020:	4629      	mov	r1, r5
 800b022:	f7f5 f93b 	bl	800029c <__adddf3>
 800b026:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b02a:	4602      	mov	r2, r0
 800b02c:	460b      	mov	r3, r1
 800b02e:	4620      	mov	r0, r4
 800b030:	4629      	mov	r1, r5
 800b032:	f7f5 f931 	bl	8000298 <__aeabi_dsub>
 800b036:	4632      	mov	r2, r6
 800b038:	463b      	mov	r3, r7
 800b03a:	f7f5 f92f 	bl	800029c <__adddf3>
 800b03e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b042:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b046:	ed88 7b00 	vstr	d7, [r8]
 800b04a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b04e:	e776      	b.n	800af3e <__kernel_rem_pio2+0x4f6>
 800b050:	e9da 8900 	ldrd	r8, r9, [sl]
 800b054:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b058:	4640      	mov	r0, r8
 800b05a:	4632      	mov	r2, r6
 800b05c:	463b      	mov	r3, r7
 800b05e:	4649      	mov	r1, r9
 800b060:	f7f5 f91c 	bl	800029c <__adddf3>
 800b064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	4640      	mov	r0, r8
 800b06e:	4649      	mov	r1, r9
 800b070:	f7f5 f912 	bl	8000298 <__aeabi_dsub>
 800b074:	4632      	mov	r2, r6
 800b076:	463b      	mov	r3, r7
 800b078:	f7f5 f910 	bl	800029c <__adddf3>
 800b07c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b080:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b084:	ed8a 7b00 	vstr	d7, [sl]
 800b088:	3c01      	subs	r4, #1
 800b08a:	e75e      	b.n	800af4a <__kernel_rem_pio2+0x502>
 800b08c:	ab48      	add	r3, sp, #288	; 0x120
 800b08e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b096:	f7f5 f901 	bl	800029c <__adddf3>
 800b09a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b09e:	e75a      	b.n	800af56 <__kernel_rem_pio2+0x50e>
 800b0a0:	9b01      	ldr	r3, [sp, #4]
 800b0a2:	9a01      	ldr	r2, [sp, #4]
 800b0a4:	601d      	str	r5, [r3, #0]
 800b0a6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b0aa:	605c      	str	r4, [r3, #4]
 800b0ac:	609f      	str	r7, [r3, #8]
 800b0ae:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b0b2:	60d3      	str	r3, [r2, #12]
 800b0b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0b8:	6110      	str	r0, [r2, #16]
 800b0ba:	6153      	str	r3, [r2, #20]
 800b0bc:	e72e      	b.n	800af1c <__kernel_rem_pio2+0x4d4>
 800b0be:	bf00      	nop
 800b0c0:	41700000 	.word	0x41700000
 800b0c4:	3e700000 	.word	0x3e700000

0800b0c8 <__kernel_sin>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	ed2d 8b04 	vpush	{d8-d9}
 800b0d0:	eeb0 8a41 	vmov.f32	s16, s2
 800b0d4:	eef0 8a61 	vmov.f32	s17, s3
 800b0d8:	ec55 4b10 	vmov	r4, r5, d0
 800b0dc:	b083      	sub	sp, #12
 800b0de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b0e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b0e6:	9001      	str	r0, [sp, #4]
 800b0e8:	da06      	bge.n	800b0f8 <__kernel_sin+0x30>
 800b0ea:	ee10 0a10 	vmov	r0, s0
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	f7f5 fd3a 	bl	8000b68 <__aeabi_d2iz>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d051      	beq.n	800b19c <__kernel_sin+0xd4>
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	462b      	mov	r3, r5
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	4629      	mov	r1, r5
 800b100:	f7f5 fa82 	bl	8000608 <__aeabi_dmul>
 800b104:	4682      	mov	sl, r0
 800b106:	468b      	mov	fp, r1
 800b108:	4602      	mov	r2, r0
 800b10a:	460b      	mov	r3, r1
 800b10c:	4620      	mov	r0, r4
 800b10e:	4629      	mov	r1, r5
 800b110:	f7f5 fa7a 	bl	8000608 <__aeabi_dmul>
 800b114:	a341      	add	r3, pc, #260	; (adr r3, 800b21c <__kernel_sin+0x154>)
 800b116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11a:	4680      	mov	r8, r0
 800b11c:	4689      	mov	r9, r1
 800b11e:	4650      	mov	r0, sl
 800b120:	4659      	mov	r1, fp
 800b122:	f7f5 fa71 	bl	8000608 <__aeabi_dmul>
 800b126:	a33f      	add	r3, pc, #252	; (adr r3, 800b224 <__kernel_sin+0x15c>)
 800b128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12c:	f7f5 f8b4 	bl	8000298 <__aeabi_dsub>
 800b130:	4652      	mov	r2, sl
 800b132:	465b      	mov	r3, fp
 800b134:	f7f5 fa68 	bl	8000608 <__aeabi_dmul>
 800b138:	a33c      	add	r3, pc, #240	; (adr r3, 800b22c <__kernel_sin+0x164>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f7f5 f8ad 	bl	800029c <__adddf3>
 800b142:	4652      	mov	r2, sl
 800b144:	465b      	mov	r3, fp
 800b146:	f7f5 fa5f 	bl	8000608 <__aeabi_dmul>
 800b14a:	a33a      	add	r3, pc, #232	; (adr r3, 800b234 <__kernel_sin+0x16c>)
 800b14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b150:	f7f5 f8a2 	bl	8000298 <__aeabi_dsub>
 800b154:	4652      	mov	r2, sl
 800b156:	465b      	mov	r3, fp
 800b158:	f7f5 fa56 	bl	8000608 <__aeabi_dmul>
 800b15c:	a337      	add	r3, pc, #220	; (adr r3, 800b23c <__kernel_sin+0x174>)
 800b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b162:	f7f5 f89b 	bl	800029c <__adddf3>
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	4606      	mov	r6, r0
 800b16a:	460f      	mov	r7, r1
 800b16c:	b9eb      	cbnz	r3, 800b1aa <__kernel_sin+0xe2>
 800b16e:	4602      	mov	r2, r0
 800b170:	460b      	mov	r3, r1
 800b172:	4650      	mov	r0, sl
 800b174:	4659      	mov	r1, fp
 800b176:	f7f5 fa47 	bl	8000608 <__aeabi_dmul>
 800b17a:	a325      	add	r3, pc, #148	; (adr r3, 800b210 <__kernel_sin+0x148>)
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	f7f5 f88a 	bl	8000298 <__aeabi_dsub>
 800b184:	4642      	mov	r2, r8
 800b186:	464b      	mov	r3, r9
 800b188:	f7f5 fa3e 	bl	8000608 <__aeabi_dmul>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	4620      	mov	r0, r4
 800b192:	4629      	mov	r1, r5
 800b194:	f7f5 f882 	bl	800029c <__adddf3>
 800b198:	4604      	mov	r4, r0
 800b19a:	460d      	mov	r5, r1
 800b19c:	ec45 4b10 	vmov	d0, r4, r5
 800b1a0:	b003      	add	sp, #12
 800b1a2:	ecbd 8b04 	vpop	{d8-d9}
 800b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1aa:	4b1b      	ldr	r3, [pc, #108]	; (800b218 <__kernel_sin+0x150>)
 800b1ac:	ec51 0b18 	vmov	r0, r1, d8
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f7f5 fa29 	bl	8000608 <__aeabi_dmul>
 800b1b6:	4632      	mov	r2, r6
 800b1b8:	ec41 0b19 	vmov	d9, r0, r1
 800b1bc:	463b      	mov	r3, r7
 800b1be:	4640      	mov	r0, r8
 800b1c0:	4649      	mov	r1, r9
 800b1c2:	f7f5 fa21 	bl	8000608 <__aeabi_dmul>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	ec51 0b19 	vmov	r0, r1, d9
 800b1ce:	f7f5 f863 	bl	8000298 <__aeabi_dsub>
 800b1d2:	4652      	mov	r2, sl
 800b1d4:	465b      	mov	r3, fp
 800b1d6:	f7f5 fa17 	bl	8000608 <__aeabi_dmul>
 800b1da:	ec53 2b18 	vmov	r2, r3, d8
 800b1de:	f7f5 f85b 	bl	8000298 <__aeabi_dsub>
 800b1e2:	a30b      	add	r3, pc, #44	; (adr r3, 800b210 <__kernel_sin+0x148>)
 800b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	460f      	mov	r7, r1
 800b1ec:	4640      	mov	r0, r8
 800b1ee:	4649      	mov	r1, r9
 800b1f0:	f7f5 fa0a 	bl	8000608 <__aeabi_dmul>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	f7f5 f84e 	bl	800029c <__adddf3>
 800b200:	4602      	mov	r2, r0
 800b202:	460b      	mov	r3, r1
 800b204:	4620      	mov	r0, r4
 800b206:	4629      	mov	r1, r5
 800b208:	f7f5 f846 	bl	8000298 <__aeabi_dsub>
 800b20c:	e7c4      	b.n	800b198 <__kernel_sin+0xd0>
 800b20e:	bf00      	nop
 800b210:	55555549 	.word	0x55555549
 800b214:	3fc55555 	.word	0x3fc55555
 800b218:	3fe00000 	.word	0x3fe00000
 800b21c:	5acfd57c 	.word	0x5acfd57c
 800b220:	3de5d93a 	.word	0x3de5d93a
 800b224:	8a2b9ceb 	.word	0x8a2b9ceb
 800b228:	3e5ae5e6 	.word	0x3e5ae5e6
 800b22c:	57b1fe7d 	.word	0x57b1fe7d
 800b230:	3ec71de3 	.word	0x3ec71de3
 800b234:	19c161d5 	.word	0x19c161d5
 800b238:	3f2a01a0 	.word	0x3f2a01a0
 800b23c:	1110f8a6 	.word	0x1110f8a6
 800b240:	3f811111 	.word	0x3f811111

0800b244 <fabs>:
 800b244:	ec51 0b10 	vmov	r0, r1, d0
 800b248:	ee10 2a10 	vmov	r2, s0
 800b24c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b250:	ec43 2b10 	vmov	d0, r2, r3
 800b254:	4770      	bx	lr
	...

0800b258 <floor>:
 800b258:	ec51 0b10 	vmov	r0, r1, d0
 800b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b260:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b264:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b268:	2e13      	cmp	r6, #19
 800b26a:	ee10 5a10 	vmov	r5, s0
 800b26e:	ee10 8a10 	vmov	r8, s0
 800b272:	460c      	mov	r4, r1
 800b274:	dc32      	bgt.n	800b2dc <floor+0x84>
 800b276:	2e00      	cmp	r6, #0
 800b278:	da14      	bge.n	800b2a4 <floor+0x4c>
 800b27a:	a333      	add	r3, pc, #204	; (adr r3, 800b348 <floor+0xf0>)
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	f7f5 f80c 	bl	800029c <__adddf3>
 800b284:	2200      	movs	r2, #0
 800b286:	2300      	movs	r3, #0
 800b288:	f7f5 fc4e 	bl	8000b28 <__aeabi_dcmpgt>
 800b28c:	b138      	cbz	r0, 800b29e <floor+0x46>
 800b28e:	2c00      	cmp	r4, #0
 800b290:	da57      	bge.n	800b342 <floor+0xea>
 800b292:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b296:	431d      	orrs	r5, r3
 800b298:	d001      	beq.n	800b29e <floor+0x46>
 800b29a:	4c2d      	ldr	r4, [pc, #180]	; (800b350 <floor+0xf8>)
 800b29c:	2500      	movs	r5, #0
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	e025      	b.n	800b2f0 <floor+0x98>
 800b2a4:	4f2b      	ldr	r7, [pc, #172]	; (800b354 <floor+0xfc>)
 800b2a6:	4137      	asrs	r7, r6
 800b2a8:	ea01 0307 	and.w	r3, r1, r7
 800b2ac:	4303      	orrs	r3, r0
 800b2ae:	d01f      	beq.n	800b2f0 <floor+0x98>
 800b2b0:	a325      	add	r3, pc, #148	; (adr r3, 800b348 <floor+0xf0>)
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	f7f4 fff1 	bl	800029c <__adddf3>
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f7f5 fc33 	bl	8000b28 <__aeabi_dcmpgt>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	d0eb      	beq.n	800b29e <floor+0x46>
 800b2c6:	2c00      	cmp	r4, #0
 800b2c8:	bfbe      	ittt	lt
 800b2ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b2ce:	fa43 f606 	asrlt.w	r6, r3, r6
 800b2d2:	19a4      	addlt	r4, r4, r6
 800b2d4:	ea24 0407 	bic.w	r4, r4, r7
 800b2d8:	2500      	movs	r5, #0
 800b2da:	e7e0      	b.n	800b29e <floor+0x46>
 800b2dc:	2e33      	cmp	r6, #51	; 0x33
 800b2de:	dd0b      	ble.n	800b2f8 <floor+0xa0>
 800b2e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b2e4:	d104      	bne.n	800b2f0 <floor+0x98>
 800b2e6:	ee10 2a10 	vmov	r2, s0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	f7f4 ffd6 	bl	800029c <__adddf3>
 800b2f0:	ec41 0b10 	vmov	d0, r0, r1
 800b2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b300:	fa23 f707 	lsr.w	r7, r3, r7
 800b304:	4207      	tst	r7, r0
 800b306:	d0f3      	beq.n	800b2f0 <floor+0x98>
 800b308:	a30f      	add	r3, pc, #60	; (adr r3, 800b348 <floor+0xf0>)
 800b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30e:	f7f4 ffc5 	bl	800029c <__adddf3>
 800b312:	2200      	movs	r2, #0
 800b314:	2300      	movs	r3, #0
 800b316:	f7f5 fc07 	bl	8000b28 <__aeabi_dcmpgt>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d0bf      	beq.n	800b29e <floor+0x46>
 800b31e:	2c00      	cmp	r4, #0
 800b320:	da02      	bge.n	800b328 <floor+0xd0>
 800b322:	2e14      	cmp	r6, #20
 800b324:	d103      	bne.n	800b32e <floor+0xd6>
 800b326:	3401      	adds	r4, #1
 800b328:	ea25 0507 	bic.w	r5, r5, r7
 800b32c:	e7b7      	b.n	800b29e <floor+0x46>
 800b32e:	2301      	movs	r3, #1
 800b330:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b334:	fa03 f606 	lsl.w	r6, r3, r6
 800b338:	4435      	add	r5, r6
 800b33a:	4545      	cmp	r5, r8
 800b33c:	bf38      	it	cc
 800b33e:	18e4      	addcc	r4, r4, r3
 800b340:	e7f2      	b.n	800b328 <floor+0xd0>
 800b342:	2500      	movs	r5, #0
 800b344:	462c      	mov	r4, r5
 800b346:	e7aa      	b.n	800b29e <floor+0x46>
 800b348:	8800759c 	.word	0x8800759c
 800b34c:	7e37e43c 	.word	0x7e37e43c
 800b350:	bff00000 	.word	0xbff00000
 800b354:	000fffff 	.word	0x000fffff

0800b358 <scalbn>:
 800b358:	b570      	push	{r4, r5, r6, lr}
 800b35a:	ec55 4b10 	vmov	r4, r5, d0
 800b35e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b362:	4606      	mov	r6, r0
 800b364:	462b      	mov	r3, r5
 800b366:	b99a      	cbnz	r2, 800b390 <scalbn+0x38>
 800b368:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b36c:	4323      	orrs	r3, r4
 800b36e:	d036      	beq.n	800b3de <scalbn+0x86>
 800b370:	4b39      	ldr	r3, [pc, #228]	; (800b458 <scalbn+0x100>)
 800b372:	4629      	mov	r1, r5
 800b374:	ee10 0a10 	vmov	r0, s0
 800b378:	2200      	movs	r2, #0
 800b37a:	f7f5 f945 	bl	8000608 <__aeabi_dmul>
 800b37e:	4b37      	ldr	r3, [pc, #220]	; (800b45c <scalbn+0x104>)
 800b380:	429e      	cmp	r6, r3
 800b382:	4604      	mov	r4, r0
 800b384:	460d      	mov	r5, r1
 800b386:	da10      	bge.n	800b3aa <scalbn+0x52>
 800b388:	a32b      	add	r3, pc, #172	; (adr r3, 800b438 <scalbn+0xe0>)
 800b38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38e:	e03a      	b.n	800b406 <scalbn+0xae>
 800b390:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b394:	428a      	cmp	r2, r1
 800b396:	d10c      	bne.n	800b3b2 <scalbn+0x5a>
 800b398:	ee10 2a10 	vmov	r2, s0
 800b39c:	4620      	mov	r0, r4
 800b39e:	4629      	mov	r1, r5
 800b3a0:	f7f4 ff7c 	bl	800029c <__adddf3>
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	460d      	mov	r5, r1
 800b3a8:	e019      	b.n	800b3de <scalbn+0x86>
 800b3aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	3a36      	subs	r2, #54	; 0x36
 800b3b2:	4432      	add	r2, r6
 800b3b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b3b8:	428a      	cmp	r2, r1
 800b3ba:	dd08      	ble.n	800b3ce <scalbn+0x76>
 800b3bc:	2d00      	cmp	r5, #0
 800b3be:	a120      	add	r1, pc, #128	; (adr r1, 800b440 <scalbn+0xe8>)
 800b3c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3c4:	da1c      	bge.n	800b400 <scalbn+0xa8>
 800b3c6:	a120      	add	r1, pc, #128	; (adr r1, 800b448 <scalbn+0xf0>)
 800b3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3cc:	e018      	b.n	800b400 <scalbn+0xa8>
 800b3ce:	2a00      	cmp	r2, #0
 800b3d0:	dd08      	ble.n	800b3e4 <scalbn+0x8c>
 800b3d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b3da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b3de:	ec45 4b10 	vmov	d0, r4, r5
 800b3e2:	bd70      	pop	{r4, r5, r6, pc}
 800b3e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b3e8:	da19      	bge.n	800b41e <scalbn+0xc6>
 800b3ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b3ee:	429e      	cmp	r6, r3
 800b3f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b3f4:	dd0a      	ble.n	800b40c <scalbn+0xb4>
 800b3f6:	a112      	add	r1, pc, #72	; (adr r1, 800b440 <scalbn+0xe8>)
 800b3f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1e2      	bne.n	800b3c6 <scalbn+0x6e>
 800b400:	a30f      	add	r3, pc, #60	; (adr r3, 800b440 <scalbn+0xe8>)
 800b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b406:	f7f5 f8ff 	bl	8000608 <__aeabi_dmul>
 800b40a:	e7cb      	b.n	800b3a4 <scalbn+0x4c>
 800b40c:	a10a      	add	r1, pc, #40	; (adr r1, 800b438 <scalbn+0xe0>)
 800b40e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d0b8      	beq.n	800b388 <scalbn+0x30>
 800b416:	a10e      	add	r1, pc, #56	; (adr r1, 800b450 <scalbn+0xf8>)
 800b418:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b41c:	e7b4      	b.n	800b388 <scalbn+0x30>
 800b41e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b422:	3236      	adds	r2, #54	; 0x36
 800b424:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b428:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b42c:	4620      	mov	r0, r4
 800b42e:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <scalbn+0x108>)
 800b430:	2200      	movs	r2, #0
 800b432:	e7e8      	b.n	800b406 <scalbn+0xae>
 800b434:	f3af 8000 	nop.w
 800b438:	c2f8f359 	.word	0xc2f8f359
 800b43c:	01a56e1f 	.word	0x01a56e1f
 800b440:	8800759c 	.word	0x8800759c
 800b444:	7e37e43c 	.word	0x7e37e43c
 800b448:	8800759c 	.word	0x8800759c
 800b44c:	fe37e43c 	.word	0xfe37e43c
 800b450:	c2f8f359 	.word	0xc2f8f359
 800b454:	81a56e1f 	.word	0x81a56e1f
 800b458:	43500000 	.word	0x43500000
 800b45c:	ffff3cb0 	.word	0xffff3cb0
 800b460:	3c900000 	.word	0x3c900000

0800b464 <_init>:
 800b464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b466:	bf00      	nop
 800b468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46a:	bc08      	pop	{r3}
 800b46c:	469e      	mov	lr, r3
 800b46e:	4770      	bx	lr

0800b470 <_fini>:
 800b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b472:	bf00      	nop
 800b474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b476:	bc08      	pop	{r3}
 800b478:	469e      	mov	lr, r3
 800b47a:	4770      	bx	lr
